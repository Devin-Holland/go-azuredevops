// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetServiceEndpointsByNamesParams creates a new GetServiceEndpointsByNamesParams object
// with the default values initialized.
func NewGetServiceEndpointsByNamesParams() *GetServiceEndpointsByNamesParams {
	var ()
	return &GetServiceEndpointsByNamesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServiceEndpointsByNamesParamsWithTimeout creates a new GetServiceEndpointsByNamesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServiceEndpointsByNamesParamsWithTimeout(timeout time.Duration) *GetServiceEndpointsByNamesParams {
	var ()
	return &GetServiceEndpointsByNamesParams{

		timeout: timeout,
	}
}

// NewGetServiceEndpointsByNamesParamsWithContext creates a new GetServiceEndpointsByNamesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetServiceEndpointsByNamesParamsWithContext(ctx context.Context) *GetServiceEndpointsByNamesParams {
	var ()
	return &GetServiceEndpointsByNamesParams{

		Context: ctx,
	}
}

// NewGetServiceEndpointsByNamesParamsWithHTTPClient creates a new GetServiceEndpointsByNamesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetServiceEndpointsByNamesParamsWithHTTPClient(client *http.Client) *GetServiceEndpointsByNamesParams {
	var ()
	return &GetServiceEndpointsByNamesParams{
		HTTPClient: client,
	}
}

/*GetServiceEndpointsByNamesParams contains all the parameters to send to the API endpoint
for the get service endpoints by names operation typically these are written to a http.Request
*/
type GetServiceEndpointsByNamesParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*AuthSchemes
	  Authorization schemes used for service endpoints.

	*/
	AuthSchemes *string
	/*EndpointNames
	  Names of the service endpoints.

	*/
	EndpointNames string
	/*IncludeDetails
	  Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests

	*/
	IncludeDetails *bool
	/*IncludeFailed
	  Failed flag for service endpoints.

	*/
	IncludeFailed *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Owner
	  Owner for service endpoints.

	*/
	Owner *string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*Type
	  Type of the service endpoints.

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithTimeout(timeout time.Duration) *GetServiceEndpointsByNamesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithContext(ctx context.Context) *GetServiceEndpointsByNamesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithHTTPClient(client *http.Client) *GetServiceEndpointsByNamesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithAPIVersion(aPIVersion string) *GetServiceEndpointsByNamesParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithAuthSchemes adds the authSchemes to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithAuthSchemes(authSchemes *string) *GetServiceEndpointsByNamesParams {
	o.SetAuthSchemes(authSchemes)
	return o
}

// SetAuthSchemes adds the authSchemes to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetAuthSchemes(authSchemes *string) {
	o.AuthSchemes = authSchemes
}

// WithEndpointNames adds the endpointNames to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithEndpointNames(endpointNames string) *GetServiceEndpointsByNamesParams {
	o.SetEndpointNames(endpointNames)
	return o
}

// SetEndpointNames adds the endpointNames to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetEndpointNames(endpointNames string) {
	o.EndpointNames = endpointNames
}

// WithIncludeDetails adds the includeDetails to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithIncludeDetails(includeDetails *bool) *GetServiceEndpointsByNamesParams {
	o.SetIncludeDetails(includeDetails)
	return o
}

// SetIncludeDetails adds the includeDetails to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetIncludeDetails(includeDetails *bool) {
	o.IncludeDetails = includeDetails
}

// WithIncludeFailed adds the includeFailed to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithIncludeFailed(includeFailed *bool) *GetServiceEndpointsByNamesParams {
	o.SetIncludeFailed(includeFailed)
	return o
}

// SetIncludeFailed adds the includeFailed to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetIncludeFailed(includeFailed *bool) {
	o.IncludeFailed = includeFailed
}

// WithOrganization adds the organization to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithOrganization(organization string) *GetServiceEndpointsByNamesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithOwner adds the owner to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithOwner(owner *string) *GetServiceEndpointsByNamesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithProject adds the project to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithProject(project string) *GetServiceEndpointsByNamesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetProject(project string) {
	o.Project = project
}

// WithType adds the typeVar to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) WithType(typeVar *string) *GetServiceEndpointsByNamesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get service endpoints by names params
func (o *GetServiceEndpointsByNamesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetServiceEndpointsByNamesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.AuthSchemes != nil {

		// query param authSchemes
		var qrAuthSchemes string
		if o.AuthSchemes != nil {
			qrAuthSchemes = *o.AuthSchemes
		}
		qAuthSchemes := qrAuthSchemes
		if qAuthSchemes != "" {
			if err := r.SetQueryParam("authSchemes", qAuthSchemes); err != nil {
				return err
			}
		}

	}

	// query param endpointNames
	qrEndpointNames := o.EndpointNames
	qEndpointNames := qrEndpointNames
	if qEndpointNames != "" {
		if err := r.SetQueryParam("endpointNames", qEndpointNames); err != nil {
			return err
		}
	}

	if o.IncludeDetails != nil {

		// query param includeDetails
		var qrIncludeDetails bool
		if o.IncludeDetails != nil {
			qrIncludeDetails = *o.IncludeDetails
		}
		qIncludeDetails := swag.FormatBool(qrIncludeDetails)
		if qIncludeDetails != "" {
			if err := r.SetQueryParam("includeDetails", qIncludeDetails); err != nil {
				return err
			}
		}

	}

	if o.IncludeFailed != nil {

		// query param includeFailed
		var qrIncludeFailed bool
		if o.IncludeFailed != nil {
			qrIncludeFailed = *o.IncludeFailed
		}
		qIncludeFailed := swag.FormatBool(qrIncludeFailed)
		if qIncludeFailed != "" {
			if err := r.SetQueryParam("includeFailed", qIncludeFailed); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
