// Code generated by go-swagger; DO NOT EDIT.

package memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new memberships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for memberships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Add Create a new membership between a container and subject.
*/
func (a *Client) Add(params *AddParams, authInfo runtime.ClientAuthInfoWriter) (*AddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Add",
		Method:             "PUT",
		PathPattern:        "/{organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOK), nil

}

/*
CheckMembershipExistence Check to see if a membership relationship between a container and subject exists.
*/
func (a *Client) CheckMembershipExistence(params *CheckMembershipExistenceParams, authInfo runtime.ClientAuthInfoWriter) (*CheckMembershipExistenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckMembershipExistenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Check Membership Existence",
		Method:             "HEAD",
		PathPattern:        "/{organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckMembershipExistenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckMembershipExistenceOK), nil

}

/*
RemoveMembership Deletes a membership between a container and subject.
*/
func (a *Client) RemoveMembership(params *RemoveMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Membership",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveMembershipOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
