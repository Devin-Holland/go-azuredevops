// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// UpdateRequestsRequestIDReader is a Reader for the UpdateRequestsRequestID structure.
type UpdateRequestsRequestIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRequestsRequestIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateRequestsRequestIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateRequestsRequestIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateRequestsRequestIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRequestsRequestIDOK creates a UpdateRequestsRequestIDOK with default headers values
func NewUpdateRequestsRequestIDOK() *UpdateRequestsRequestIDOK {
	return &UpdateRequestsRequestIDOK{}
}

/*UpdateRequestsRequestIDOK handles this case with default header values.

Successfully updated the symbol request as specified by the request identifier.
*/
type UpdateRequestsRequestIDOK struct {
	Payload *models.Request
}

func (o *UpdateRequestsRequestIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/_apis/symbol/requests/{requestId}][%d] updateRequestsRequestIdOK  %+v", 200, o.Payload)
}

func (o *UpdateRequestsRequestIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Request)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRequestsRequestIDNotFound creates a UpdateRequestsRequestIDNotFound with default headers values
func NewUpdateRequestsRequestIDNotFound() *UpdateRequestsRequestIDNotFound {
	return &UpdateRequestsRequestIDNotFound{}
}

/*UpdateRequestsRequestIDNotFound handles this case with default header values.

The symbol request as specified by the request identifier was not found.
*/
type UpdateRequestsRequestIDNotFound struct {
	Payload *models.Request
}

func (o *UpdateRequestsRequestIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/_apis/symbol/requests/{requestId}][%d] updateRequestsRequestIdNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRequestsRequestIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Request)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRequestsRequestIDConflict creates a UpdateRequestsRequestIDConflict with default headers values
func NewUpdateRequestsRequestIDConflict() *UpdateRequestsRequestIDConflict {
	return &UpdateRequestsRequestIDConflict{}
}

/*UpdateRequestsRequestIDConflict handles this case with default header values.

The symbol request as specified by the request identifier could not be updated due to a server-side conflict, for exmaple, an unmatched etag.
*/
type UpdateRequestsRequestIDConflict struct {
	Payload *models.Request
}

func (o *UpdateRequestsRequestIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/_apis/symbol/requests/{requestId}][%d] updateRequestsRequestIdConflict  %+v", 409, o.Payload)
}

func (o *UpdateRequestsRequestIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Request)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
