// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRequests Create a new symbol request.
*/
func (a *Client) CreateRequests(params *CreateRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRequestsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create Requests",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/symbol/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRequestsCreated), nil

}

/*
CreateRequestsRequestIDDebugEntries Create debug entries for a symbol request as specified by its identifier.
*/
func (a *Client) CreateRequestsRequestIDDebugEntries(params *CreateRequestsRequestIDDebugEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRequestsRequestIDDebugEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRequestsRequestIDDebugEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create Requests Request Id Debug Entries",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/symbol/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRequestsRequestIDDebugEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRequestsRequestIDDebugEntriesOK), nil

}

/*
DeleteRequestsRequestID Delete a symbol request by request identifier.
*/
func (a *Client) DeleteRequestsRequestID(params *DeleteRequestsRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRequestsRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRequestsRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Requests Request Id",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/symbol/requests/{requestId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRequestsRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRequestsRequestIDOK), nil

}

/*
DeleteRequestsRequestName Delete a symbol request by request name.
*/
func (a *Client) DeleteRequestsRequestName(params *DeleteRequestsRequestNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRequestsRequestNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRequestsRequestNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Requests Request Name",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/symbol/requests",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRequestsRequestNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRequestsRequestNameOK), nil

}

/*
GetRequestsRequestID Get a symbol request by request identifier.
*/
func (a *Client) GetRequestsRequestID(params *GetRequestsRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequestsRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestsRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Requests Request Id",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/symbol/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestsRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRequestsRequestIDOK), nil

}

/*
GetRequestsRequestName Get a symbol request by request name.
*/
func (a *Client) GetRequestsRequestName(params *GetRequestsRequestNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequestsRequestNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestsRequestNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Requests Request Name",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/symbol/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestsRequestNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRequestsRequestNameOK), nil

}

/*
UpdateRequestsRequestID Update a symbol request by request identifier.
*/
func (a *Client) UpdateRequestsRequestID(params *UpdateRequestsRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRequestsRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRequestsRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Requests Request Id",
		Method:             "PATCH",
		PathPattern:        "/{organization}/_apis/symbol/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRequestsRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRequestsRequestIDOK), nil

}

/*
UpdateRequestsRequestName Update a symbol request by request name.
*/
func (a *Client) UpdateRequestsRequestName(params *UpdateRequestsRequestNameParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRequestsRequestNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRequestsRequestNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Requests Request Name",
		Method:             "PATCH",
		PathPattern:        "/{organization}/_apis/symbol/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRequestsRequestNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRequestsRequestNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
