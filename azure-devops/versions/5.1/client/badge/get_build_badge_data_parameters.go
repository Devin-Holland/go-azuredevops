// Code generated by go-swagger; DO NOT EDIT.

package badge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBuildBadgeDataParams creates a new GetBuildBadgeDataParams object
// with the default values initialized.
func NewGetBuildBadgeDataParams() *GetBuildBadgeDataParams {
	var ()
	return &GetBuildBadgeDataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBuildBadgeDataParamsWithTimeout creates a new GetBuildBadgeDataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBuildBadgeDataParamsWithTimeout(timeout time.Duration) *GetBuildBadgeDataParams {
	var ()
	return &GetBuildBadgeDataParams{

		timeout: timeout,
	}
}

// NewGetBuildBadgeDataParamsWithContext creates a new GetBuildBadgeDataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBuildBadgeDataParamsWithContext(ctx context.Context) *GetBuildBadgeDataParams {
	var ()
	return &GetBuildBadgeDataParams{

		Context: ctx,
	}
}

// NewGetBuildBadgeDataParamsWithHTTPClient creates a new GetBuildBadgeDataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBuildBadgeDataParamsWithHTTPClient(client *http.Client) *GetBuildBadgeDataParams {
	var ()
	return &GetBuildBadgeDataParams{
		HTTPClient: client,
	}
}

/*GetBuildBadgeDataParams contains all the parameters to send to the API endpoint
for the get build badge data operation typically these are written to a http.Request
*/
type GetBuildBadgeDataParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*BranchName
	  The branch name.

	*/
	BranchName *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*RepoID
	  The repository ID.

	*/
	RepoID *string
	/*RepoType
	  The repository type.

	*/
	RepoType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get build badge data params
func (o *GetBuildBadgeDataParams) WithTimeout(timeout time.Duration) *GetBuildBadgeDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get build badge data params
func (o *GetBuildBadgeDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get build badge data params
func (o *GetBuildBadgeDataParams) WithContext(ctx context.Context) *GetBuildBadgeDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get build badge data params
func (o *GetBuildBadgeDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get build badge data params
func (o *GetBuildBadgeDataParams) WithHTTPClient(client *http.Client) *GetBuildBadgeDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get build badge data params
func (o *GetBuildBadgeDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get build badge data params
func (o *GetBuildBadgeDataParams) WithAPIVersion(aPIVersion string) *GetBuildBadgeDataParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get build badge data params
func (o *GetBuildBadgeDataParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBranchName adds the branchName to the get build badge data params
func (o *GetBuildBadgeDataParams) WithBranchName(branchName *string) *GetBuildBadgeDataParams {
	o.SetBranchName(branchName)
	return o
}

// SetBranchName adds the branchName to the get build badge data params
func (o *GetBuildBadgeDataParams) SetBranchName(branchName *string) {
	o.BranchName = branchName
}

// WithOrganization adds the organization to the get build badge data params
func (o *GetBuildBadgeDataParams) WithOrganization(organization string) *GetBuildBadgeDataParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get build badge data params
func (o *GetBuildBadgeDataParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get build badge data params
func (o *GetBuildBadgeDataParams) WithProject(project string) *GetBuildBadgeDataParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get build badge data params
func (o *GetBuildBadgeDataParams) SetProject(project string) {
	o.Project = project
}

// WithRepoID adds the repoID to the get build badge data params
func (o *GetBuildBadgeDataParams) WithRepoID(repoID *string) *GetBuildBadgeDataParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the get build badge data params
func (o *GetBuildBadgeDataParams) SetRepoID(repoID *string) {
	o.RepoID = repoID
}

// WithRepoType adds the repoType to the get build badge data params
func (o *GetBuildBadgeDataParams) WithRepoType(repoType string) *GetBuildBadgeDataParams {
	o.SetRepoType(repoType)
	return o
}

// SetRepoType adds the repoType to the get build badge data params
func (o *GetBuildBadgeDataParams) SetRepoType(repoType string) {
	o.RepoType = repoType
}

// WriteToRequest writes these params to a swagger request
func (o *GetBuildBadgeDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.BranchName != nil {

		// query param branchName
		var qrBranchName string
		if o.BranchName != nil {
			qrBranchName = *o.BranchName
		}
		qBranchName := qrBranchName
		if qBranchName != "" {
			if err := r.SetQueryParam("branchName", qBranchName); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.RepoID != nil {

		// query param repoId
		var qrRepoID string
		if o.RepoID != nil {
			qrRepoID = *o.RepoID
		}
		qRepoID := qrRepoID
		if qRepoID != "" {
			if err := r.SetQueryParam("repoId", qRepoID); err != nil {
				return err
			}
		}

	}

	// path param repoType
	if err := r.SetPathParam("repoType", o.RepoType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
