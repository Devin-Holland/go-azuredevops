// Code generated by go-swagger; DO NOT EDIT.

package work_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// NewUpdateParams creates a new UpdateParams object
// with the default values initialized.
func NewUpdateParams() *UpdateParams {
	var ()
	return &UpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateParamsWithTimeout creates a new UpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateParamsWithTimeout(timeout time.Duration) *UpdateParams {
	var ()
	return &UpdateParams{

		timeout: timeout,
	}
}

// NewUpdateParamsWithContext creates a new UpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateParamsWithContext(ctx context.Context) *UpdateParams {
	var ()
	return &UpdateParams{

		Context: ctx,
	}
}

// NewUpdateParamsWithHTTPClient creates a new UpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateParamsWithHTTPClient(client *http.Client) *UpdateParams {
	var ()
	return &UpdateParams{
		HTTPClient: client,
	}
}

/*UpdateParams contains all the parameters to send to the API endpoint
for the update operation typically these are written to a http.Request
*/
type UpdateParams struct {

	/*NrDollarExpand
	  The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.

	*/
	DollarExpand *string
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.3' to use this version of the api.

	*/
	APIVersion string
	/*Body
	  The JSON Patch document representing the update

	*/
	Body *models.JSONPatchDocument
	/*BypassRules
	  Do not enforce the work item type rules on this update

	*/
	BypassRules *bool
	/*ID
	  The id of the work item to update

	*/
	ID int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*SuppressNotifications
	  Do not fire any notifications for this change

	*/
	SuppressNotifications *bool
	/*ValidateOnly
	  Indicate if you only want to validate the changes without saving the work item

	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update params
func (o *UpdateParams) WithTimeout(timeout time.Duration) *UpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update params
func (o *UpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update params
func (o *UpdateParams) WithContext(ctx context.Context) *UpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update params
func (o *UpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update params
func (o *UpdateParams) WithHTTPClient(client *http.Client) *UpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update params
func (o *UpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarExpand adds the dollarExpand to the update params
func (o *UpdateParams) WithDollarExpand(dollarExpand *string) *UpdateParams {
	o.SetDollarExpand(dollarExpand)
	return o
}

// SetDollarExpand adds the dollarExpand to the update params
func (o *UpdateParams) SetDollarExpand(dollarExpand *string) {
	o.DollarExpand = dollarExpand
}

// WithAPIVersion adds the aPIVersion to the update params
func (o *UpdateParams) WithAPIVersion(aPIVersion string) *UpdateParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the update params
func (o *UpdateParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the update params
func (o *UpdateParams) WithBody(body *models.JSONPatchDocument) *UpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update params
func (o *UpdateParams) SetBody(body *models.JSONPatchDocument) {
	o.Body = body
}

// WithBypassRules adds the bypassRules to the update params
func (o *UpdateParams) WithBypassRules(bypassRules *bool) *UpdateParams {
	o.SetBypassRules(bypassRules)
	return o
}

// SetBypassRules adds the bypassRules to the update params
func (o *UpdateParams) SetBypassRules(bypassRules *bool) {
	o.BypassRules = bypassRules
}

// WithID adds the id to the update params
func (o *UpdateParams) WithID(id int32) *UpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update params
func (o *UpdateParams) SetID(id int32) {
	o.ID = id
}

// WithOrganization adds the organization to the update params
func (o *UpdateParams) WithOrganization(organization string) *UpdateParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the update params
func (o *UpdateParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the update params
func (o *UpdateParams) WithProject(project string) *UpdateParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the update params
func (o *UpdateParams) SetProject(project string) {
	o.Project = project
}

// WithSuppressNotifications adds the suppressNotifications to the update params
func (o *UpdateParams) WithSuppressNotifications(suppressNotifications *bool) *UpdateParams {
	o.SetSuppressNotifications(suppressNotifications)
	return o
}

// SetSuppressNotifications adds the suppressNotifications to the update params
func (o *UpdateParams) SetSuppressNotifications(suppressNotifications *bool) {
	o.SuppressNotifications = suppressNotifications
}

// WithValidateOnly adds the validateOnly to the update params
func (o *UpdateParams) WithValidateOnly(validateOnly *bool) *UpdateParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the update params
func (o *UpdateParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarExpand != nil {

		// query param $expand
		var qrNrDollarExpand string
		if o.DollarExpand != nil {
			qrNrDollarExpand = *o.DollarExpand
		}
		qNrDollarExpand := qrNrDollarExpand
		if qNrDollarExpand != "" {
			if err := r.SetQueryParam("$expand", qNrDollarExpand); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.BypassRules != nil {

		// query param bypassRules
		var qrBypassRules bool
		if o.BypassRules != nil {
			qrBypassRules = *o.BypassRules
		}
		qBypassRules := swag.FormatBool(qrBypassRules)
		if qBypassRules != "" {
			if err := r.SetQueryParam("bypassRules", qBypassRules); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.SuppressNotifications != nil {

		// query param suppressNotifications
		var qrSuppressNotifications bool
		if o.SuppressNotifications != nil {
			qrSuppressNotifications = *o.SuppressNotifications
		}
		qSuppressNotifications := swag.FormatBool(qrSuppressNotifications)
		if qSuppressNotifications != "" {
			if err := r.SetQueryParam("suppressNotifications", qSuppressNotifications); err != nil {
				return err
			}
		}

	}

	if o.ValidateOnly != nil {

		// query param validateOnly
		var qrValidateOnly bool
		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {
			if err := r.SetQueryParam("validateOnly", qValidateOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
