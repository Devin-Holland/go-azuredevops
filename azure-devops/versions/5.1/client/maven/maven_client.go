// Code generated by go-swagger; DO NOT EDIT.

package maven

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new maven API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maven API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePackageVersion Delete a package version from the feed and move it to the feed's recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeletePackageVersion(params *DeletePackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageVersionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePackageVersion",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feed}/maven/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackageVersionAccepted), nil

}

/*
DeletePackageVersionFromRecycleBin Permanently delete a package from a feed's recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeletePackageVersionFromRecycleBin(params *DeletePackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePackageVersionFromRecycleBin",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feed}/maven/RecycleBin/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackageVersionFromRecycleBinOK), nil

}

/*
DownloadPackage Fulfills Maven package file download requests by either returning the URL of the requested package file or, in the case of Azure DevOps Server (OnPrem), returning the content as a stream.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DownloadPackage(params *DownloadPackageParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DownloadPackage",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/maven/{groupId}/{artifactId}/{version}/{fileName}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadPackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadPackageOK), nil

}

/*
GetPackageVersion Get information about a package version.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersion(params *GetPackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package Version",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feed}/maven/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionOK), nil

}

/*
GetPackageVersionFromRecycleBin Get information about a package version in the recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersionFromRecycleBin(params *GetPackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPackageVersionFromRecycleBin",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feed}/maven/RecycleBin/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionFromRecycleBinOK), nil

}

/*
RestorePackageVersionFromRecycleBin Restore a package version from the recycle bin to its associated feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) RestorePackageVersionFromRecycleBin(params *RestorePackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*RestorePackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestorePackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Restore Package Version From Recycle Bin",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feed}/maven/RecycleBin/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestorePackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestorePackageVersionFromRecycleBinOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
