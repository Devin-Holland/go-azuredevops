// Code generated by go-swagger; DO NOT EDIT.

package maven

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeletePackageVersionParams creates a new DeletePackageVersionParams object
// with the default values initialized.
func NewDeletePackageVersionParams() *DeletePackageVersionParams {
	var ()
	return &DeletePackageVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePackageVersionParamsWithTimeout creates a new DeletePackageVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePackageVersionParamsWithTimeout(timeout time.Duration) *DeletePackageVersionParams {
	var ()
	return &DeletePackageVersionParams{

		timeout: timeout,
	}
}

// NewDeletePackageVersionParamsWithContext creates a new DeletePackageVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePackageVersionParamsWithContext(ctx context.Context) *DeletePackageVersionParams {
	var ()
	return &DeletePackageVersionParams{

		Context: ctx,
	}
}

// NewDeletePackageVersionParamsWithHTTPClient creates a new DeletePackageVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePackageVersionParamsWithHTTPClient(client *http.Client) *DeletePackageVersionParams {
	var ()
	return &DeletePackageVersionParams{
		HTTPClient: client,
	}
}

/*DeletePackageVersionParams contains all the parameters to send to the API endpoint
for the delete package version operation typically these are written to a http.Request
*/
type DeletePackageVersionParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*ArtifactID
	  Artifact ID of the package.

	*/
	ArtifactID string
	/*Feed
	  Name or ID of the feed.

	*/
	Feed string
	/*GroupID
	  Group ID of the package.

	*/
	GroupID string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*Version
	  Version of the package.

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete package version params
func (o *DeletePackageVersionParams) WithTimeout(timeout time.Duration) *DeletePackageVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete package version params
func (o *DeletePackageVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete package version params
func (o *DeletePackageVersionParams) WithContext(ctx context.Context) *DeletePackageVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete package version params
func (o *DeletePackageVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete package version params
func (o *DeletePackageVersionParams) WithHTTPClient(client *http.Client) *DeletePackageVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete package version params
func (o *DeletePackageVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the delete package version params
func (o *DeletePackageVersionParams) WithAPIVersion(aPIVersion string) *DeletePackageVersionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the delete package version params
func (o *DeletePackageVersionParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithArtifactID adds the artifactID to the delete package version params
func (o *DeletePackageVersionParams) WithArtifactID(artifactID string) *DeletePackageVersionParams {
	o.SetArtifactID(artifactID)
	return o
}

// SetArtifactID adds the artifactId to the delete package version params
func (o *DeletePackageVersionParams) SetArtifactID(artifactID string) {
	o.ArtifactID = artifactID
}

// WithFeed adds the feed to the delete package version params
func (o *DeletePackageVersionParams) WithFeed(feed string) *DeletePackageVersionParams {
	o.SetFeed(feed)
	return o
}

// SetFeed adds the feed to the delete package version params
func (o *DeletePackageVersionParams) SetFeed(feed string) {
	o.Feed = feed
}

// WithGroupID adds the groupID to the delete package version params
func (o *DeletePackageVersionParams) WithGroupID(groupID string) *DeletePackageVersionParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the delete package version params
func (o *DeletePackageVersionParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithOrganization adds the organization to the delete package version params
func (o *DeletePackageVersionParams) WithOrganization(organization string) *DeletePackageVersionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the delete package version params
func (o *DeletePackageVersionParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the delete package version params
func (o *DeletePackageVersionParams) WithProject(project string) *DeletePackageVersionParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the delete package version params
func (o *DeletePackageVersionParams) SetProject(project string) {
	o.Project = project
}

// WithVersion adds the version to the delete package version params
func (o *DeletePackageVersionParams) WithVersion(version string) *DeletePackageVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete package version params
func (o *DeletePackageVersionParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePackageVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param artifactId
	if err := r.SetPathParam("artifactId", o.ArtifactID); err != nil {
		return err
	}

	// path param feed
	if err := r.SetPathParam("feed", o.Feed); err != nil {
		return err
	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
