// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Create Create a release.
*/
func (a *Client) Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/release/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOK), nil

}

/*
GetLogs Get logs for a release Id.
*/
func (a *Client) GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Logs",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/release/releases/{releaseId}/logs",
		ProducesMediaTypes: []string{"application/zip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogsOK), nil

}

/*
GetReleaseEnvironment Get a release environment.
*/
func (a *Client) GetReleaseEnvironment(params *GetReleaseEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Release Environment",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/Release/releases/{releaseId}/environments/{environmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReleaseEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReleaseEnvironmentOK), nil

}

/*
GetReleaseRevision Get release for a given revision number.
*/
func (a *Client) GetReleaseRevision(params *GetReleaseRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Release Revision",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/release/releases/{releaseId}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReleaseRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReleaseRevisionOK), nil

}

/*
GetTaskLog Gets the task log of a release as a plain text file.
*/
func (a *Client) GetTaskLog(params *GetTaskLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Task Log",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/deployPhases/{releaseDeployPhaseId}/tasks/{taskId}/logs",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskLogOK), nil

}

/*
UpdateRelease Update a complete release object.
*/
func (a *Client) UpdateRelease(params *UpdateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Release",
		Method:             "PUT",
		PathPattern:        "/{organization}/{project}/_apis/release/releases/{releaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReleaseOK), nil

}

/*
UpdateReleaseEnvironment Update the status of a release environment
*/
func (a *Client) UpdateReleaseEnvironment(params *UpdateReleaseEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Release Environment",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/Release/releases/{releaseId}/environments/{environmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReleaseEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReleaseEnvironmentOK), nil

}

/*
UpdateReleaseResource Update few properties of a release.
*/
func (a *Client) UpdateReleaseResource(params *UpdateReleaseResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Release Resource",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/release/releases/{releaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReleaseResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReleaseResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
