// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetReleaseRevisionParams creates a new GetReleaseRevisionParams object
// with the default values initialized.
func NewGetReleaseRevisionParams() *GetReleaseRevisionParams {
	var ()
	return &GetReleaseRevisionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReleaseRevisionParamsWithTimeout creates a new GetReleaseRevisionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReleaseRevisionParamsWithTimeout(timeout time.Duration) *GetReleaseRevisionParams {
	var ()
	return &GetReleaseRevisionParams{

		timeout: timeout,
	}
}

// NewGetReleaseRevisionParamsWithContext creates a new GetReleaseRevisionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetReleaseRevisionParamsWithContext(ctx context.Context) *GetReleaseRevisionParams {
	var ()
	return &GetReleaseRevisionParams{

		Context: ctx,
	}
}

// NewGetReleaseRevisionParamsWithHTTPClient creates a new GetReleaseRevisionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetReleaseRevisionParamsWithHTTPClient(client *http.Client) *GetReleaseRevisionParams {
	var ()
	return &GetReleaseRevisionParams{
		HTTPClient: client,
	}
}

/*GetReleaseRevisionParams contains all the parameters to send to the API endpoint
for the get release revision operation typically these are written to a http.Request
*/
type GetReleaseRevisionParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.8' to use this version of the api.

	*/
	APIVersion string
	/*DefinitionSnapshotRevision
	  Definition snapshot revision number.

	*/
	DefinitionSnapshotRevision int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ReleaseID
	  Id of the release.

	*/
	ReleaseID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get release revision params
func (o *GetReleaseRevisionParams) WithTimeout(timeout time.Duration) *GetReleaseRevisionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get release revision params
func (o *GetReleaseRevisionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get release revision params
func (o *GetReleaseRevisionParams) WithContext(ctx context.Context) *GetReleaseRevisionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get release revision params
func (o *GetReleaseRevisionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get release revision params
func (o *GetReleaseRevisionParams) WithHTTPClient(client *http.Client) *GetReleaseRevisionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get release revision params
func (o *GetReleaseRevisionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get release revision params
func (o *GetReleaseRevisionParams) WithAPIVersion(aPIVersion string) *GetReleaseRevisionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get release revision params
func (o *GetReleaseRevisionParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithDefinitionSnapshotRevision adds the definitionSnapshotRevision to the get release revision params
func (o *GetReleaseRevisionParams) WithDefinitionSnapshotRevision(definitionSnapshotRevision int32) *GetReleaseRevisionParams {
	o.SetDefinitionSnapshotRevision(definitionSnapshotRevision)
	return o
}

// SetDefinitionSnapshotRevision adds the definitionSnapshotRevision to the get release revision params
func (o *GetReleaseRevisionParams) SetDefinitionSnapshotRevision(definitionSnapshotRevision int32) {
	o.DefinitionSnapshotRevision = definitionSnapshotRevision
}

// WithOrganization adds the organization to the get release revision params
func (o *GetReleaseRevisionParams) WithOrganization(organization string) *GetReleaseRevisionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get release revision params
func (o *GetReleaseRevisionParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get release revision params
func (o *GetReleaseRevisionParams) WithProject(project string) *GetReleaseRevisionParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get release revision params
func (o *GetReleaseRevisionParams) SetProject(project string) {
	o.Project = project
}

// WithReleaseID adds the releaseID to the get release revision params
func (o *GetReleaseRevisionParams) WithReleaseID(releaseID int32) *GetReleaseRevisionParams {
	o.SetReleaseID(releaseID)
	return o
}

// SetReleaseID adds the releaseId to the get release revision params
func (o *GetReleaseRevisionParams) SetReleaseID(releaseID int32) {
	o.ReleaseID = releaseID
}

// WriteToRequest writes these params to a swagger request
func (o *GetReleaseRevisionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// query param definitionSnapshotRevision
	qrDefinitionSnapshotRevision := o.DefinitionSnapshotRevision
	qDefinitionSnapshotRevision := swag.FormatInt32(qrDefinitionSnapshotRevision)
	if qDefinitionSnapshotRevision != "" {
		if err := r.SetQueryParam("definitionSnapshotRevision", qDefinitionSnapshotRevision); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param releaseId
	if err := r.SetPathParam("releaseId", swag.FormatInt32(o.ReleaseID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
