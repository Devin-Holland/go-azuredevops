// Code generated by go-swagger; DO NOT EDIT.

package recycle_bin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new recycle bin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for recycle bin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetRecycleBinPackage Get information about a package and all its versions within the recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetRecycleBinPackage(params *GetRecycleBinPackageParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecycleBinPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecycleBinPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Recycle Bin Package",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecycleBinPackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecycleBinPackageOK), nil

}

/*
GetRecycleBinPackageVersion Get information about a package version within the recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetRecycleBinPackageVersion(params *GetRecycleBinPackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecycleBinPackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecycleBinPackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Recycle Bin Package Version",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions/{packageVersionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecycleBinPackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecycleBinPackageVersionOK), nil

}

/*
GetRecycleBinPackageVersions Get a list of package versions within the recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetRecycleBinPackageVersions(params *GetRecycleBinPackageVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecycleBinPackageVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecycleBinPackageVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Recycle Bin Package Versions",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages/{packageId}/Versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecycleBinPackageVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecycleBinPackageVersionsOK), nil

}

/*
GetRecycleBinPackages Query for packages within the recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetRecycleBinPackages(params *GetRecycleBinPackagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecycleBinPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecycleBinPackagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Recycle Bin Packages",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/RecycleBin/Packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecycleBinPackagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecycleBinPackagesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
