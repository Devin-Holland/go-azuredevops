// Code generated by go-swagger; DO NOT EDIT.

package recycle_bin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRecycleBinPackagesParams creates a new GetRecycleBinPackagesParams object
// with the default values initialized.
func NewGetRecycleBinPackagesParams() *GetRecycleBinPackagesParams {
	var ()
	return &GetRecycleBinPackagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRecycleBinPackagesParamsWithTimeout creates a new GetRecycleBinPackagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRecycleBinPackagesParamsWithTimeout(timeout time.Duration) *GetRecycleBinPackagesParams {
	var ()
	return &GetRecycleBinPackagesParams{

		timeout: timeout,
	}
}

// NewGetRecycleBinPackagesParamsWithContext creates a new GetRecycleBinPackagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRecycleBinPackagesParamsWithContext(ctx context.Context) *GetRecycleBinPackagesParams {
	var ()
	return &GetRecycleBinPackagesParams{

		Context: ctx,
	}
}

// NewGetRecycleBinPackagesParamsWithHTTPClient creates a new GetRecycleBinPackagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRecycleBinPackagesParamsWithHTTPClient(client *http.Client) *GetRecycleBinPackagesParams {
	var ()
	return &GetRecycleBinPackagesParams{
		HTTPClient: client,
	}
}

/*GetRecycleBinPackagesParams contains all the parameters to send to the API endpoint
for the get recycle bin packages operation typically these are written to a http.Request
*/
type GetRecycleBinPackagesParams struct {

	/*NrDollarSkip
	  Skip the first N packages.

	*/
	DollarSkip *int32
	/*NrDollarTop
	  Get the top N packages.

	*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*FeedID
	  Name or Id of the feed.

	*/
	FeedID string
	/*IncludeAllVersions
	  True to return all versions of the package in the response.  Default is false (latest version only).

	*/
	IncludeAllVersions *bool
	/*IncludeUrls
	  True to return REST Urls with the response.  Default is True.

	*/
	IncludeUrls *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PackageNameQuery
	  Filter to packages matching this name.

	*/
	PackageNameQuery *string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ProtocolType
	  Type of package (e.g. NuGet, npm, ...).

	*/
	ProtocolType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithTimeout(timeout time.Duration) *GetRecycleBinPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithContext(ctx context.Context) *GetRecycleBinPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithHTTPClient(client *http.Client) *GetRecycleBinPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarSkip adds the dollarSkip to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithDollarSkip(dollarSkip *int32) *GetRecycleBinPackagesParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithDollarTop(dollarTop *int32) *GetRecycleBinPackagesParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithAPIVersion(aPIVersion string) *GetRecycleBinPackagesParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithFeedID adds the feedID to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithFeedID(feedID string) *GetRecycleBinPackagesParams {
	o.SetFeedID(feedID)
	return o
}

// SetFeedID adds the feedId to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetFeedID(feedID string) {
	o.FeedID = feedID
}

// WithIncludeAllVersions adds the includeAllVersions to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithIncludeAllVersions(includeAllVersions *bool) *GetRecycleBinPackagesParams {
	o.SetIncludeAllVersions(includeAllVersions)
	return o
}

// SetIncludeAllVersions adds the includeAllVersions to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetIncludeAllVersions(includeAllVersions *bool) {
	o.IncludeAllVersions = includeAllVersions
}

// WithIncludeUrls adds the includeUrls to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithIncludeUrls(includeUrls *bool) *GetRecycleBinPackagesParams {
	o.SetIncludeUrls(includeUrls)
	return o
}

// SetIncludeUrls adds the includeUrls to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetIncludeUrls(includeUrls *bool) {
	o.IncludeUrls = includeUrls
}

// WithOrganization adds the organization to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithOrganization(organization string) *GetRecycleBinPackagesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPackageNameQuery adds the packageNameQuery to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithPackageNameQuery(packageNameQuery *string) *GetRecycleBinPackagesParams {
	o.SetPackageNameQuery(packageNameQuery)
	return o
}

// SetPackageNameQuery adds the packageNameQuery to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetPackageNameQuery(packageNameQuery *string) {
	o.PackageNameQuery = packageNameQuery
}

// WithProject adds the project to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithProject(project string) *GetRecycleBinPackagesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetProject(project string) {
	o.Project = project
}

// WithProtocolType adds the protocolType to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) WithProtocolType(protocolType *string) *GetRecycleBinPackagesParams {
	o.SetProtocolType(protocolType)
	return o
}

// SetProtocolType adds the protocolType to the get recycle bin packages params
func (o *GetRecycleBinPackagesParams) SetProtocolType(protocolType *string) {
	o.ProtocolType = protocolType
}

// WriteToRequest writes these params to a swagger request
func (o *GetRecycleBinPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarSkip != nil {

		// query param $skip
		var qrNrDollarSkip int32
		if o.DollarSkip != nil {
			qrNrDollarSkip = *o.DollarSkip
		}
		qNrDollarSkip := swag.FormatInt32(qrNrDollarSkip)
		if qNrDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qNrDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param feedId
	if err := r.SetPathParam("feedId", o.FeedID); err != nil {
		return err
	}

	if o.IncludeAllVersions != nil {

		// query param includeAllVersions
		var qrIncludeAllVersions bool
		if o.IncludeAllVersions != nil {
			qrIncludeAllVersions = *o.IncludeAllVersions
		}
		qIncludeAllVersions := swag.FormatBool(qrIncludeAllVersions)
		if qIncludeAllVersions != "" {
			if err := r.SetQueryParam("includeAllVersions", qIncludeAllVersions); err != nil {
				return err
			}
		}

	}

	if o.IncludeUrls != nil {

		// query param includeUrls
		var qrIncludeUrls bool
		if o.IncludeUrls != nil {
			qrIncludeUrls = *o.IncludeUrls
		}
		qIncludeUrls := swag.FormatBool(qrIncludeUrls)
		if qIncludeUrls != "" {
			if err := r.SetQueryParam("includeUrls", qIncludeUrls); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.PackageNameQuery != nil {

		// query param packageNameQuery
		var qrPackageNameQuery string
		if o.PackageNameQuery != nil {
			qrPackageNameQuery = *o.PackageNameQuery
		}
		qPackageNameQuery := qrPackageNameQuery
		if qPackageNameQuery != "" {
			if err := r.SetQueryParam("packageNameQuery", qPackageNameQuery); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.ProtocolType != nil {

		// query param protocolType
		var qrProtocolType string
		if o.ProtocolType != nil {
			qrProtocolType = *o.ProtocolType
		}
		qProtocolType := qrProtocolType
		if qProtocolType != "" {
			if err := r.SetQueryParam("protocolType", qProtocolType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
