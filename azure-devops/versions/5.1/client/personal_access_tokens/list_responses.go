// Code generated by go-swagger; DO NOT EDIT.

package personal_access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// ListReader is a Reader for the List structure.
type ListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOK creates a ListOK with default headers values
func NewListOK() *ListOK {
	return &ListOK{}
}

/*ListOK handles this case with default header values.

An an array containing all the session token objects corresponding to the user's PATs.
*/
type ListOK struct {
	Payload *models.TokenAdminPagedSessionTokens
}

func (o *ListOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/_apis/tokenadmin/personalaccesstokens/{subjectDescriptor}][%d] listOK  %+v", 200, o.Payload)
}

func (o *ListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenAdminPagedSessionTokens)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBadRequest creates a ListBadRequest with default headers values
func NewListBadRequest() *ListBadRequest {
	return &ListBadRequest{}
}

/*ListBadRequest handles this case with default header values.

The input is invalid, such as by containing an invalid subject descriptor, page size, or continuation token
*/
type ListBadRequest struct {
}

func (o *ListBadRequest) Error() string {
	return fmt.Sprintf("[GET /{organization}/_apis/tokenadmin/personalaccesstokens/{subjectDescriptor}][%d] listBadRequest ", 400)
}

func (o *ListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUnauthorized creates a ListUnauthorized with default headers values
func NewListUnauthorized() *ListUnauthorized {
	return &ListUnauthorized{}
}

/*ListUnauthorized handles this case with default header values.

If the caller does not have permission to administrate tokens
*/
type ListUnauthorized struct {
}

func (o *ListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/_apis/tokenadmin/personalaccesstokens/{subjectDescriptor}][%d] listUnauthorized ", 401)
}

func (o *ListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListNotFound creates a ListNotFound with default headers values
func NewListNotFound() *ListNotFound {
	return &ListNotFound{}
}

/*ListNotFound handles this case with default header values.

If the user with the given subject descriptor cannot be found.
*/
type ListNotFound struct {
}

func (o *ListNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/_apis/tokenadmin/personalaccesstokens/{subjectDescriptor}][%d] listNotFound ", 404)
}

func (o *ListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
