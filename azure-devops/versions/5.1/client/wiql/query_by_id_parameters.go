// Code generated by go-swagger; DO NOT EDIT.

package wiql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryByIDParams creates a new QueryByIDParams object
// with the default values initialized.
func NewQueryByIDParams() *QueryByIDParams {
	var ()
	return &QueryByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryByIDParamsWithTimeout creates a new QueryByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryByIDParamsWithTimeout(timeout time.Duration) *QueryByIDParams {
	var ()
	return &QueryByIDParams{

		timeout: timeout,
	}
}

// NewQueryByIDParamsWithContext creates a new QueryByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryByIDParamsWithContext(ctx context.Context) *QueryByIDParams {
	var ()
	return &QueryByIDParams{

		Context: ctx,
	}
}

// NewQueryByIDParamsWithHTTPClient creates a new QueryByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryByIDParamsWithHTTPClient(client *http.Client) *QueryByIDParams {
	var ()
	return &QueryByIDParams{
		HTTPClient: client,
	}
}

/*QueryByIDParams contains all the parameters to send to the API endpoint
for the query by Id operation typically these are written to a http.Request
*/
type QueryByIDParams struct {

	/*NrDollarTop
	  The max number of results to return.

	*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*ID
	  The query ID.

	*/
	ID strfmt.UUID
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*Team
	  Team ID or team name

	*/
	Team string
	/*TimePrecision
	  Whether or not to use time precision.

	*/
	TimePrecision *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query by Id params
func (o *QueryByIDParams) WithTimeout(timeout time.Duration) *QueryByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query by Id params
func (o *QueryByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query by Id params
func (o *QueryByIDParams) WithContext(ctx context.Context) *QueryByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query by Id params
func (o *QueryByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query by Id params
func (o *QueryByIDParams) WithHTTPClient(client *http.Client) *QueryByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query by Id params
func (o *QueryByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarTop adds the dollarTop to the query by Id params
func (o *QueryByIDParams) WithDollarTop(dollarTop *int32) *QueryByIDParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the query by Id params
func (o *QueryByIDParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the query by Id params
func (o *QueryByIDParams) WithAPIVersion(aPIVersion string) *QueryByIDParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the query by Id params
func (o *QueryByIDParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithID adds the id to the query by Id params
func (o *QueryByIDParams) WithID(id strfmt.UUID) *QueryByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the query by Id params
func (o *QueryByIDParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithOrganization adds the organization to the query by Id params
func (o *QueryByIDParams) WithOrganization(organization string) *QueryByIDParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the query by Id params
func (o *QueryByIDParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the query by Id params
func (o *QueryByIDParams) WithProject(project string) *QueryByIDParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the query by Id params
func (o *QueryByIDParams) SetProject(project string) {
	o.Project = project
}

// WithTeam adds the team to the query by Id params
func (o *QueryByIDParams) WithTeam(team string) *QueryByIDParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the query by Id params
func (o *QueryByIDParams) SetTeam(team string) {
	o.Team = team
}

// WithTimePrecision adds the timePrecision to the query by Id params
func (o *QueryByIDParams) WithTimePrecision(timePrecision *bool) *QueryByIDParams {
	o.SetTimePrecision(timePrecision)
	return o
}

// SetTimePrecision adds the timePrecision to the query by Id params
func (o *QueryByIDParams) SetTimePrecision(timePrecision *bool) {
	o.TimePrecision = timePrecision
}

// WriteToRequest writes these params to a swagger request
func (o *QueryByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if o.TimePrecision != nil {

		// query param timePrecision
		var qrTimePrecision bool
		if o.TimePrecision != nil {
			qrTimePrecision = *o.TimePrecision
		}
		qTimePrecision := swag.FormatBool(qrTimePrecision)
		if qTimePrecision != "" {
			if err := r.SetQueryParam("timePrecision", qTimePrecision); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
