// Code generated by go-swagger; DO NOT EDIT.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveMemberFromGroupParams creates a new RemoveMemberFromGroupParams object
// with the default values initialized.
func NewRemoveMemberFromGroupParams() *RemoveMemberFromGroupParams {
	var ()
	return &RemoveMemberFromGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveMemberFromGroupParamsWithTimeout creates a new RemoveMemberFromGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveMemberFromGroupParamsWithTimeout(timeout time.Duration) *RemoveMemberFromGroupParams {
	var ()
	return &RemoveMemberFromGroupParams{

		timeout: timeout,
	}
}

// NewRemoveMemberFromGroupParamsWithContext creates a new RemoveMemberFromGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveMemberFromGroupParamsWithContext(ctx context.Context) *RemoveMemberFromGroupParams {
	var ()
	return &RemoveMemberFromGroupParams{

		Context: ctx,
	}
}

// NewRemoveMemberFromGroupParamsWithHTTPClient creates a new RemoveMemberFromGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveMemberFromGroupParamsWithHTTPClient(client *http.Client) *RemoveMemberFromGroupParams {
	var ()
	return &RemoveMemberFromGroupParams{
		HTTPClient: client,
	}
}

/*RemoveMemberFromGroupParams contains all the parameters to send to the API endpoint
for the remove member from group operation typically these are written to a http.Request
*/
type RemoveMemberFromGroupParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*GroupID
	  Id of the group.

	*/
	GroupID strfmt.UUID
	/*MemberID
	  Id of the member to remove.

	*/
	MemberID strfmt.UUID
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithTimeout(timeout time.Duration) *RemoveMemberFromGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithContext(ctx context.Context) *RemoveMemberFromGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithHTTPClient(client *http.Client) *RemoveMemberFromGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithAPIVersion(aPIVersion string) *RemoveMemberFromGroupParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithGroupID adds the groupID to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithGroupID(groupID strfmt.UUID) *RemoveMemberFromGroupParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetGroupID(groupID strfmt.UUID) {
	o.GroupID = groupID
}

// WithMemberID adds the memberID to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithMemberID(memberID strfmt.UUID) *RemoveMemberFromGroupParams {
	o.SetMemberID(memberID)
	return o
}

// SetMemberID adds the memberId to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetMemberID(memberID strfmt.UUID) {
	o.MemberID = memberID
}

// WithOrganization adds the organization to the remove member from group params
func (o *RemoveMemberFromGroupParams) WithOrganization(organization string) *RemoveMemberFromGroupParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the remove member from group params
func (o *RemoveMemberFromGroupParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveMemberFromGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID.String()); err != nil {
		return err
	}

	// path param memberId
	if err := r.SetPathParam("memberId", o.MemberID.String()); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
