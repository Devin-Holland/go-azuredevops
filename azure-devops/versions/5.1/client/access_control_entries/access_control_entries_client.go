// Code generated by go-swagger; DO NOT EDIT.

package access_control_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new access control entries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access control entries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RemoveAccessControlEntries Remove the specified ACEs from the ACL belonging to the specified token.
*/
func (a *Client) RemoveAccessControlEntries(params *RemoveAccessControlEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAccessControlEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccessControlEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Access Control Entries",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/accesscontrolentries/{securityNamespaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAccessControlEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAccessControlEntriesOK), nil

}

/*
SetAccessControlEntries Add or update ACEs in the ACL for the provided token. The request body contains the target token, a list of [ACEs](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/access%20control%20entries/set%20access%20control%20entries?#accesscontrolentry) and a optional merge parameter. In the case of a collision (by identity descriptor) with an existing ACE in the ACL, the "merge" parameter determines the behavior. If set, the existing ACE has its allow and deny merged with the incoming ACE's allow and deny. If unset, the existing ACE is displaced.
*/
func (a *Client) SetAccessControlEntries(params *SetAccessControlEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*SetAccessControlEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccessControlEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Set Access Control Entries",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/accesscontrolentries/{securityNamespaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccessControlEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAccessControlEntriesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
