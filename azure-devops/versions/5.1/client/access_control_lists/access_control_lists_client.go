// Code generated by go-swagger; DO NOT EDIT.

package access_control_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new access control lists API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access control lists API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RemoveAccessControlLists Remove access control lists under the specfied security namespace.
*/
func (a *Client) RemoveAccessControlLists(params *RemoveAccessControlListsParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAccessControlListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccessControlListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Access Control Lists",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/accesscontrollists/{securityNamespaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAccessControlListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAccessControlListsOK), nil

}

/*
SetAccessControlLists Create or update one or more access control lists. All data that currently exists for the ACLs supplied will be overwritten.
*/
func (a *Client) SetAccessControlLists(params *SetAccessControlListsParams, authInfo runtime.ClientAuthInfoWriter) (*SetAccessControlListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccessControlListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Set Access Control Lists",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/accesscontrollists/{securityNamespaceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccessControlListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAccessControlListsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
