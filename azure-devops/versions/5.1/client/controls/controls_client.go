// Code generated by go-swagger; DO NOT EDIT.

package controls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new controls API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controls API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MoveControlToGroup Moves a control to a specified group.
*/
func (a *Client) MoveControlToGroup(params *MoveControlToGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MoveControlToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveControlToGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Move Control To Group",
		Method:             "PUT",
		PathPattern:        "/{organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveControlToGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveControlToGroupOK), nil

}

/*
RemoveControlFromGroup Removes a control from the work item form.
*/
func (a *Client) RemoveControlFromGroup(params *RemoveControlFromGroupParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveControlFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveControlFromGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Control From Group",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/layout/groups/{groupId}/controls/{controlId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveControlFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveControlFromGroupOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
