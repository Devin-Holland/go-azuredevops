// Code generated by go-swagger; DO NOT EDIT.

package test_plan_clone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// NewCloneTestPlanParams creates a new CloneTestPlanParams object
// with the default values initialized.
func NewCloneTestPlanParams() *CloneTestPlanParams {
	var ()
	return &CloneTestPlanParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCloneTestPlanParamsWithTimeout creates a new CloneTestPlanParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCloneTestPlanParamsWithTimeout(timeout time.Duration) *CloneTestPlanParams {
	var ()
	return &CloneTestPlanParams{

		timeout: timeout,
	}
}

// NewCloneTestPlanParamsWithContext creates a new CloneTestPlanParams object
// with the default values initialized, and the ability to set a context for a request
func NewCloneTestPlanParamsWithContext(ctx context.Context) *CloneTestPlanParams {
	var ()
	return &CloneTestPlanParams{

		Context: ctx,
	}
}

// NewCloneTestPlanParamsWithHTTPClient creates a new CloneTestPlanParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCloneTestPlanParamsWithHTTPClient(client *http.Client) *CloneTestPlanParams {
	var ()
	return &CloneTestPlanParams{
		HTTPClient: client,
	}
}

/*CloneTestPlanParams contains all the parameters to send to the API endpoint
for the clone test plan operation typically these are written to a http.Request
*/
type CloneTestPlanParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*Body
	  Plan Clone Request Body detail TestPlanCloneRequest

	*/
	Body *models.CloneTestPlanParams
	/*DeepClone
	  Clones all the associated test cases as well

	*/
	DeepClone *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the clone test plan params
func (o *CloneTestPlanParams) WithTimeout(timeout time.Duration) *CloneTestPlanParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the clone test plan params
func (o *CloneTestPlanParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the clone test plan params
func (o *CloneTestPlanParams) WithContext(ctx context.Context) *CloneTestPlanParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the clone test plan params
func (o *CloneTestPlanParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the clone test plan params
func (o *CloneTestPlanParams) WithHTTPClient(client *http.Client) *CloneTestPlanParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the clone test plan params
func (o *CloneTestPlanParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the clone test plan params
func (o *CloneTestPlanParams) WithAPIVersion(aPIVersion string) *CloneTestPlanParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the clone test plan params
func (o *CloneTestPlanParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the clone test plan params
func (o *CloneTestPlanParams) WithBody(body *models.CloneTestPlanParams) *CloneTestPlanParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the clone test plan params
func (o *CloneTestPlanParams) SetBody(body *models.CloneTestPlanParams) {
	o.Body = body
}

// WithDeepClone adds the deepClone to the clone test plan params
func (o *CloneTestPlanParams) WithDeepClone(deepClone *bool) *CloneTestPlanParams {
	o.SetDeepClone(deepClone)
	return o
}

// SetDeepClone adds the deepClone to the clone test plan params
func (o *CloneTestPlanParams) SetDeepClone(deepClone *bool) {
	o.DeepClone = deepClone
}

// WithOrganization adds the organization to the clone test plan params
func (o *CloneTestPlanParams) WithOrganization(organization string) *CloneTestPlanParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the clone test plan params
func (o *CloneTestPlanParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the clone test plan params
func (o *CloneTestPlanParams) WithProject(project string) *CloneTestPlanParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the clone test plan params
func (o *CloneTestPlanParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *CloneTestPlanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DeepClone != nil {

		// query param deepClone
		var qrDeepClone bool
		if o.DeepClone != nil {
			qrDeepClone = *o.DeepClone
		}
		qDeepClone := swag.FormatBool(qrDeepClone)
		if qDeepClone != "" {
			if err := r.SetQueryParam("deepClone", qDeepClone); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
