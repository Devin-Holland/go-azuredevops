// Code generated by go-swagger; DO NOT EDIT.

package retention_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new retention policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for retention policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteRetentionPolicy Delete the retention policy for a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeleteRetentionPolicy(params *DeleteRetentionPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRetentionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRetentionPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Retention Policy",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRetentionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRetentionPolicyOK), nil

}

/*
GetRetentionPolicy Get the retention policy for a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetRetentionPolicy(params *GetRetentionPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetRetentionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetentionPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Retention Policy",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRetentionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRetentionPolicyOK), nil

}

/*
SetRetentionPolicy Set the retention policy for a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) SetRetentionPolicy(params *SetRetentionPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*SetRetentionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRetentionPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Set Retention Policy",
		Method:             "PUT",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/retentionpolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRetentionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRetentionPolicyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
