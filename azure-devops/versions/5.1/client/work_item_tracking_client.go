// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"azure-devops/5.1/client/artifact_uri_query"
	"azure-devops/5.1/client/attachments"
	"azure-devops/5.1/client/classification_nodes"
	"azure-devops/5.1/client/comments"
	"azure-devops/5.1/client/comments_reactions"
	"azure-devops/5.1/client/queries"
	"azure-devops/5.1/client/recyclebin"
	"azure-devops/5.1/client/reporting_work_item_revisions"
	"azure-devops/5.1/client/templates"
	"azure-devops/5.1/client/wiql"
	"azure-devops/5.1/client/work_item_revisions_discussions"
	"azure-devops/5.1/client/work_items"
)

// Default work item tracking HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "dev.azure.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new work item tracking HTTP client.
func NewHTTPClient(formats strfmt.Registry) *WorkItemTracking {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new work item tracking HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *WorkItemTracking {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new work item tracking client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *WorkItemTracking {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(WorkItemTracking)
	cli.Transport = transport

	cli.ArtifactURIQuery = artifact_uri_query.New(transport, formats)

	cli.Attachments = attachments.New(transport, formats)

	cli.ClassificationNodes = classification_nodes.New(transport, formats)

	cli.Comments = comments.New(transport, formats)

	cli.CommentsReactions = comments_reactions.New(transport, formats)

	cli.Queries = queries.New(transport, formats)

	cli.Recyclebin = recyclebin.New(transport, formats)

	cli.ReportingWorkItemRevisions = reporting_work_item_revisions.New(transport, formats)

	cli.Templates = templates.New(transport, formats)

	cli.Wiql = wiql.New(transport, formats)

	cli.WorkItemRevisionsDiscussions = work_item_revisions_discussions.New(transport, formats)

	cli.WorkItems = work_items.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// WorkItemTracking is a client for work item tracking
type WorkItemTracking struct {
	ArtifactURIQuery *artifact_uri_query.Client

	Attachments *attachments.Client

	ClassificationNodes *classification_nodes.Client

	Comments *comments.Client

	CommentsReactions *comments_reactions.Client

	Queries *queries.Client

	Recyclebin *recyclebin.Client

	ReportingWorkItemRevisions *reporting_work_item_revisions.Client

	Templates *templates.Client

	Wiql *wiql.Client

	WorkItemRevisionsDiscussions *work_item_revisions_discussions.Client

	WorkItems *work_items.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *WorkItemTracking) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.ArtifactURIQuery.SetTransport(transport)

	c.Attachments.SetTransport(transport)

	c.ClassificationNodes.SetTransport(transport)

	c.Comments.SetTransport(transport)

	c.CommentsReactions.SetTransport(transport)

	c.Queries.SetTransport(transport)

	c.Recyclebin.SetTransport(transport)

	c.ReportingWorkItemRevisions.SetTransport(transport)

	c.Templates.SetTransport(transport)

	c.Wiql.SetTransport(transport)

	c.WorkItemRevisionsDiscussions.SetTransport(transport)

	c.WorkItems.SetTransport(transport)

}
