// Code generated by go-swagger; DO NOT EDIT.

package profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParams creates a new GetParams object
// with the default values initialized.
func NewGetParams() *GetParams {
	var ()
	return &GetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParamsWithTimeout creates a new GetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParamsWithTimeout(timeout time.Duration) *GetParams {
	var ()
	return &GetParams{

		timeout: timeout,
	}
}

// NewGetParamsWithContext creates a new GetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetParamsWithContext(ctx context.Context) *GetParams {
	var ()
	return &GetParams{

		Context: ctx,
	}
}

// NewGetParamsWithHTTPClient creates a new GetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetParamsWithHTTPClient(client *http.Client) *GetParams {
	var ()
	return &GetParams{
		HTTPClient: client,
	}
}

/*GetParams contains all the parameters to send to the API endpoint
for the get operation typically these are written to a http.Request
*/
type GetParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.3' to use this version of the api.

	*/
	APIVersion string
	/*CoreAttributes
	  A comma-delimited list of core profile attributes to return. Valid values are Email, Avatar, DisplayName, and ContactWithOffers.

	*/
	CoreAttributes *string
	/*Details
	  Return public profile information such as display name, email address, country, etc. If false, the withAttributes parameter is ignored.

	*/
	Details *bool
	/*ForceRefresh
	  Not used in this version of the API.

	*/
	ForceRefresh *bool
	/*ID
	  The ID of the target user profile within the same organization, or 'me' to get the profile of the current authenticated user.

	*/
	ID string
	/*Partition
	  The partition (named group) of attributes to return.

	*/
	Partition *string
	/*WithAttributes
	  If true, gets the attributes (named key-value pairs of arbitrary data) associated with the profile. The partition parameter must also have a value.

	*/
	WithAttributes *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get params
func (o *GetParams) WithTimeout(timeout time.Duration) *GetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get params
func (o *GetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get params
func (o *GetParams) WithContext(ctx context.Context) *GetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get params
func (o *GetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get params
func (o *GetParams) WithHTTPClient(client *http.Client) *GetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get params
func (o *GetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get params
func (o *GetParams) WithAPIVersion(aPIVersion string) *GetParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get params
func (o *GetParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithCoreAttributes adds the coreAttributes to the get params
func (o *GetParams) WithCoreAttributes(coreAttributes *string) *GetParams {
	o.SetCoreAttributes(coreAttributes)
	return o
}

// SetCoreAttributes adds the coreAttributes to the get params
func (o *GetParams) SetCoreAttributes(coreAttributes *string) {
	o.CoreAttributes = coreAttributes
}

// WithDetails adds the details to the get params
func (o *GetParams) WithDetails(details *bool) *GetParams {
	o.SetDetails(details)
	return o
}

// SetDetails adds the details to the get params
func (o *GetParams) SetDetails(details *bool) {
	o.Details = details
}

// WithForceRefresh adds the forceRefresh to the get params
func (o *GetParams) WithForceRefresh(forceRefresh *bool) *GetParams {
	o.SetForceRefresh(forceRefresh)
	return o
}

// SetForceRefresh adds the forceRefresh to the get params
func (o *GetParams) SetForceRefresh(forceRefresh *bool) {
	o.ForceRefresh = forceRefresh
}

// WithID adds the id to the get params
func (o *GetParams) WithID(id string) *GetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get params
func (o *GetParams) SetID(id string) {
	o.ID = id
}

// WithPartition adds the partition to the get params
func (o *GetParams) WithPartition(partition *string) *GetParams {
	o.SetPartition(partition)
	return o
}

// SetPartition adds the partition to the get params
func (o *GetParams) SetPartition(partition *string) {
	o.Partition = partition
}

// WithWithAttributes adds the withAttributes to the get params
func (o *GetParams) WithWithAttributes(withAttributes *bool) *GetParams {
	o.SetWithAttributes(withAttributes)
	return o
}

// SetWithAttributes adds the withAttributes to the get params
func (o *GetParams) SetWithAttributes(withAttributes *bool) {
	o.WithAttributes = withAttributes
}

// WriteToRequest writes these params to a swagger request
func (o *GetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.CoreAttributes != nil {

		// query param coreAttributes
		var qrCoreAttributes string
		if o.CoreAttributes != nil {
			qrCoreAttributes = *o.CoreAttributes
		}
		qCoreAttributes := qrCoreAttributes
		if qCoreAttributes != "" {
			if err := r.SetQueryParam("coreAttributes", qCoreAttributes); err != nil {
				return err
			}
		}

	}

	if o.Details != nil {

		// query param details
		var qrDetails bool
		if o.Details != nil {
			qrDetails = *o.Details
		}
		qDetails := swag.FormatBool(qrDetails)
		if qDetails != "" {
			if err := r.SetQueryParam("details", qDetails); err != nil {
				return err
			}
		}

	}

	if o.ForceRefresh != nil {

		// query param forceRefresh
		var qrForceRefresh bool
		if o.ForceRefresh != nil {
			qrForceRefresh = *o.ForceRefresh
		}
		qForceRefresh := swag.FormatBool(qrForceRefresh)
		if qForceRefresh != "" {
			if err := r.SetQueryParam("forceRefresh", qForceRefresh); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Partition != nil {

		// query param partition
		var qrPartition string
		if o.Partition != nil {
			qrPartition = *o.Partition
		}
		qPartition := qrPartition
		if qPartition != "" {
			if err := r.SetQueryParam("partition", qPartition); err != nil {
				return err
			}
		}

	}

	if o.WithAttributes != nil {

		// query param withAttributes
		var qrWithAttributes bool
		if o.WithAttributes != nil {
			qrWithAttributes = *o.WithAttributes
		}
		qWithAttributes := swag.FormatBool(qrWithAttributes)
		if qWithAttributes != "" {
			if err := r.SetQueryParam("withAttributes", qWithAttributes); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
