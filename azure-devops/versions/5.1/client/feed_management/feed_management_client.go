// Code generated by go-swagger; DO NOT EDIT.

package feed_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new feed management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feed management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateFeed Create a feed, a container for various package types.

Feeds can be created in a project if the project parameter is included in the request url.
If the project parameter is omitted, the feed will not be associated with a project and will be created at the organization level.
Creating project-scoped feeds is in prerelease, and may not yet be available in your organization.
*/
func (a *Client) CreateFeed(params *CreateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create Feed",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFeedOK), nil

}

/*
CreateFeedView Create a new view on the referenced feed.

The project parameter must be supplied if the feed was created in a project.
*/
func (a *Client) CreateFeedView(params *CreateFeedViewParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFeedViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create Feed View",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFeedViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFeedViewOK), nil

}

/*
DeleteFeed Remove a feed and all its packages. The action does not result in packages moving to the RecycleBin and is not reversible.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeleteFeed(params *DeleteFeedParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Feed",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFeedOK), nil

}

/*
DeleteFeedView Delete a feed view.

The project parameter must be supplied if the feed was created in a project.
*/
func (a *Client) DeleteFeedView(params *DeleteFeedViewParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeedViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Feed View",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeedViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFeedViewOK), nil

}

/*
GetFeed Get the settings for a specific feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetFeed(params *GetFeedParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedOK), nil

}

/*
GetFeedPermissions Get the permissions for a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetFeedPermissions(params *GetFeedPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed Permissions",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedPermissionsOK), nil

}

/*
GetFeedView Get a view by Id.

The project parameter must be supplied if the feed was created in a project.
*/
func (a *Client) GetFeedView(params *GetFeedViewParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed View",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedViewOK), nil

}

/*
GetFeedViews Get all views for a feed.

The project parameter must be supplied if the feed was created in a project.
*/
func (a *Client) GetFeedViews(params *GetFeedViewsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedViewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed Views",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedViewsOK), nil

}

/*
GetFeeds Get all feeds in an account where you have the provided role access.

If the project parameter is present, gets all feeds in the given project.
If omitted, gets all feeds in the organization.
*/
func (a *Client) GetFeeds(params *GetFeedsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feeds",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedsOK), nil

}

/*
SetFeedPermissions Update the permissions on a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) SetFeedPermissions(params *SetFeedPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*SetFeedPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFeedPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Set Feed Permissions",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetFeedPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetFeedPermissionsOK), nil

}

/*
UpdateFeed Change the attributes of a feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) UpdateFeed(params *UpdateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Feed",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFeedOK), nil

}

/*
UpdateFeedView Update a view.

The project parameter must be supplied if the feed was created in a project.
*/
func (a *Client) UpdateFeedView(params *UpdateFeedViewParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeedViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Feed View",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/views/{viewId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFeedViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFeedViewOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
