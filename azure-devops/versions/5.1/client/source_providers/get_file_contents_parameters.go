// Code generated by go-swagger; DO NOT EDIT.

package source_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFileContentsParams creates a new GetFileContentsParams object
// with the default values initialized.
func NewGetFileContentsParams() *GetFileContentsParams {
	var ()
	return &GetFileContentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileContentsParamsWithTimeout creates a new GetFileContentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFileContentsParamsWithTimeout(timeout time.Duration) *GetFileContentsParams {
	var ()
	return &GetFileContentsParams{

		timeout: timeout,
	}
}

// NewGetFileContentsParamsWithContext creates a new GetFileContentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFileContentsParamsWithContext(ctx context.Context) *GetFileContentsParams {
	var ()
	return &GetFileContentsParams{

		Context: ctx,
	}
}

// NewGetFileContentsParamsWithHTTPClient creates a new GetFileContentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFileContentsParamsWithHTTPClient(client *http.Client) *GetFileContentsParams {
	var ()
	return &GetFileContentsParams{
		HTTPClient: client,
	}
}

/*GetFileContentsParams contains all the parameters to send to the API endpoint
for the get file contents operation typically these are written to a http.Request
*/
type GetFileContentsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*CommitOrBranch
	  The identifier of the commit or branch from which a file's contents are retrieved.

	*/
	CommitOrBranch *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Path
	  The path to the file to retrieve, relative to the root of the repository.

	*/
	Path *string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ProviderName
	  The name of the source provider.

	*/
	ProviderName string
	/*Repository
	  If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.

	*/
	Repository *string
	/*ServiceEndpointID
	  If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.

	*/
	ServiceEndpointID *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get file contents params
func (o *GetFileContentsParams) WithTimeout(timeout time.Duration) *GetFileContentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file contents params
func (o *GetFileContentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file contents params
func (o *GetFileContentsParams) WithContext(ctx context.Context) *GetFileContentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file contents params
func (o *GetFileContentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file contents params
func (o *GetFileContentsParams) WithHTTPClient(client *http.Client) *GetFileContentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file contents params
func (o *GetFileContentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get file contents params
func (o *GetFileContentsParams) WithAPIVersion(aPIVersion string) *GetFileContentsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get file contents params
func (o *GetFileContentsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithCommitOrBranch adds the commitOrBranch to the get file contents params
func (o *GetFileContentsParams) WithCommitOrBranch(commitOrBranch *string) *GetFileContentsParams {
	o.SetCommitOrBranch(commitOrBranch)
	return o
}

// SetCommitOrBranch adds the commitOrBranch to the get file contents params
func (o *GetFileContentsParams) SetCommitOrBranch(commitOrBranch *string) {
	o.CommitOrBranch = commitOrBranch
}

// WithOrganization adds the organization to the get file contents params
func (o *GetFileContentsParams) WithOrganization(organization string) *GetFileContentsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get file contents params
func (o *GetFileContentsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPath adds the path to the get file contents params
func (o *GetFileContentsParams) WithPath(path *string) *GetFileContentsParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get file contents params
func (o *GetFileContentsParams) SetPath(path *string) {
	o.Path = path
}

// WithProject adds the project to the get file contents params
func (o *GetFileContentsParams) WithProject(project string) *GetFileContentsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get file contents params
func (o *GetFileContentsParams) SetProject(project string) {
	o.Project = project
}

// WithProviderName adds the providerName to the get file contents params
func (o *GetFileContentsParams) WithProviderName(providerName string) *GetFileContentsParams {
	o.SetProviderName(providerName)
	return o
}

// SetProviderName adds the providerName to the get file contents params
func (o *GetFileContentsParams) SetProviderName(providerName string) {
	o.ProviderName = providerName
}

// WithRepository adds the repository to the get file contents params
func (o *GetFileContentsParams) WithRepository(repository *string) *GetFileContentsParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get file contents params
func (o *GetFileContentsParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithServiceEndpointID adds the serviceEndpointID to the get file contents params
func (o *GetFileContentsParams) WithServiceEndpointID(serviceEndpointID *strfmt.UUID) *GetFileContentsParams {
	o.SetServiceEndpointID(serviceEndpointID)
	return o
}

// SetServiceEndpointID adds the serviceEndpointId to the get file contents params
func (o *GetFileContentsParams) SetServiceEndpointID(serviceEndpointID *strfmt.UUID) {
	o.ServiceEndpointID = serviceEndpointID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileContentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.CommitOrBranch != nil {

		// query param commitOrBranch
		var qrCommitOrBranch string
		if o.CommitOrBranch != nil {
			qrCommitOrBranch = *o.CommitOrBranch
		}
		qCommitOrBranch := qrCommitOrBranch
		if qCommitOrBranch != "" {
			if err := r.SetQueryParam("commitOrBranch", qCommitOrBranch); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param providerName
	if err := r.SetPathParam("providerName", o.ProviderName); err != nil {
		return err
	}

	if o.Repository != nil {

		// query param repository
		var qrRepository string
		if o.Repository != nil {
			qrRepository = *o.Repository
		}
		qRepository := qrRepository
		if qRepository != "" {
			if err := r.SetQueryParam("repository", qRepository); err != nil {
				return err
			}
		}

	}

	if o.ServiceEndpointID != nil {

		// query param serviceEndpointId
		var qrServiceEndpointID strfmt.UUID
		if o.ServiceEndpointID != nil {
			qrServiceEndpointID = *o.ServiceEndpointID
		}
		qServiceEndpointID := qrServiceEndpointID.String()
		if qServiceEndpointID != "" {
			if err := r.SetQueryParam("serviceEndpointId", qServiceEndpointID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
