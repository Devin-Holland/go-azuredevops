// Code generated by go-swagger; DO NOT EDIT.

package source_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new source providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for source providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFileContents Gets the contents of a file in the given source code repository.
*/
func (a *Client) GetFileContents(params *GetFileContentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFileContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get File Contents",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/filecontents",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFileContentsOK), nil

}

/*
GetPathContents Gets the contents of a directory in the given source code repository.
*/
func (a *Client) GetPathContents(params *GetPathContentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPathContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPathContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Path Contents",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/pathcontents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPathContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPathContentsOK), nil

}

/*
GetPullRequest Gets a pull request object from source provider.
*/
func (a *Client) GetPullRequest(params *GetPullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetPullRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Pull Request",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/pullrequests/{pullRequestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPullRequestOK), nil

}

/*
List Get a list of source providers and their capabilities.
*/
func (a *Client) List(params *ListParams, authInfo runtime.ClientAuthInfoWriter) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceproviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOK), nil

}

/*
ListBranches Gets a list of branches for the given source code repository.
*/
func (a *Client) ListBranches(params *ListBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*ListBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List Branches",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBranchesOK), nil

}

/*
ListRepositories Gets a list of source code repositories.
*/
func (a *Client) ListRepositories(params *ListRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List Repositories",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepositoriesOK), nil

}

/*
ListWebhooks Gets a list of webhooks installed in the given source code repository.
*/
func (a *Client) ListWebhooks(params *ListWebhooksParams, authInfo runtime.ClientAuthInfoWriter) (*ListWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWebhooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List Webhooks",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWebhooksOK), nil

}

/*
RestoreWebhooks Recreates the webhooks for the specified triggers in the given source code repository.
*/
func (a *Client) RestoreWebhooks(params *RestoreWebhooksParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreWebhooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Restore Webhooks",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/sourceProviders/{providerName}/webhooks",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestoreWebhooksOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
