// Code generated by go-swagger; DO NOT EDIT.

package test_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPointsListParams creates a new GetPointsListParams object
// with the default values initialized.
func NewGetPointsListParams() *GetPointsListParams {
	var ()
	return &GetPointsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPointsListParamsWithTimeout creates a new GetPointsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPointsListParamsWithTimeout(timeout time.Duration) *GetPointsListParams {
	var ()
	return &GetPointsListParams{

		timeout: timeout,
	}
}

// NewGetPointsListParamsWithContext creates a new GetPointsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPointsListParamsWithContext(ctx context.Context) *GetPointsListParams {
	var ()
	return &GetPointsListParams{

		Context: ctx,
	}
}

// NewGetPointsListParamsWithHTTPClient creates a new GetPointsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPointsListParamsWithHTTPClient(client *http.Client) *GetPointsListParams {
	var ()
	return &GetPointsListParams{
		HTTPClient: client,
	}
}

/*GetPointsListParams contains all the parameters to send to the API endpoint
for the get points list operation typically these are written to a http.Request
*/
type GetPointsListParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*ContinuationToken
	  If the list of test point returned is not complete, a continuation token to query next batch of test points is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test points.

	*/
	ContinuationToken *string
	/*IncludePointDetails
	  If set to false, returns only necessary information

	*/
	IncludePointDetails *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PlanID
	  ID of the test plan for which test points are requested.

	*/
	PlanID int32
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ReturnIdentityRef
	  If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.

	*/
	ReturnIdentityRef *bool
	/*SuiteID
	  ID of the test suite for which test points are requested

	*/
	SuiteID int32
	/*TestCaseID
	  Get Test Points for specific test case Ids.

	*/
	TestCaseID *string
	/*TestPointIds
	  ID of test points to fetch.

	*/
	TestPointIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get points list params
func (o *GetPointsListParams) WithTimeout(timeout time.Duration) *GetPointsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get points list params
func (o *GetPointsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get points list params
func (o *GetPointsListParams) WithContext(ctx context.Context) *GetPointsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get points list params
func (o *GetPointsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get points list params
func (o *GetPointsListParams) WithHTTPClient(client *http.Client) *GetPointsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get points list params
func (o *GetPointsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get points list params
func (o *GetPointsListParams) WithAPIVersion(aPIVersion string) *GetPointsListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get points list params
func (o *GetPointsListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithContinuationToken adds the continuationToken to the get points list params
func (o *GetPointsListParams) WithContinuationToken(continuationToken *string) *GetPointsListParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the get points list params
func (o *GetPointsListParams) SetContinuationToken(continuationToken *string) {
	o.ContinuationToken = continuationToken
}

// WithIncludePointDetails adds the includePointDetails to the get points list params
func (o *GetPointsListParams) WithIncludePointDetails(includePointDetails *bool) *GetPointsListParams {
	o.SetIncludePointDetails(includePointDetails)
	return o
}

// SetIncludePointDetails adds the includePointDetails to the get points list params
func (o *GetPointsListParams) SetIncludePointDetails(includePointDetails *bool) {
	o.IncludePointDetails = includePointDetails
}

// WithOrganization adds the organization to the get points list params
func (o *GetPointsListParams) WithOrganization(organization string) *GetPointsListParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get points list params
func (o *GetPointsListParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPlanID adds the planID to the get points list params
func (o *GetPointsListParams) WithPlanID(planID int32) *GetPointsListParams {
	o.SetPlanID(planID)
	return o
}

// SetPlanID adds the planId to the get points list params
func (o *GetPointsListParams) SetPlanID(planID int32) {
	o.PlanID = planID
}

// WithProject adds the project to the get points list params
func (o *GetPointsListParams) WithProject(project string) *GetPointsListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get points list params
func (o *GetPointsListParams) SetProject(project string) {
	o.Project = project
}

// WithReturnIdentityRef adds the returnIdentityRef to the get points list params
func (o *GetPointsListParams) WithReturnIdentityRef(returnIdentityRef *bool) *GetPointsListParams {
	o.SetReturnIdentityRef(returnIdentityRef)
	return o
}

// SetReturnIdentityRef adds the returnIdentityRef to the get points list params
func (o *GetPointsListParams) SetReturnIdentityRef(returnIdentityRef *bool) {
	o.ReturnIdentityRef = returnIdentityRef
}

// WithSuiteID adds the suiteID to the get points list params
func (o *GetPointsListParams) WithSuiteID(suiteID int32) *GetPointsListParams {
	o.SetSuiteID(suiteID)
	return o
}

// SetSuiteID adds the suiteId to the get points list params
func (o *GetPointsListParams) SetSuiteID(suiteID int32) {
	o.SuiteID = suiteID
}

// WithTestCaseID adds the testCaseID to the get points list params
func (o *GetPointsListParams) WithTestCaseID(testCaseID *string) *GetPointsListParams {
	o.SetTestCaseID(testCaseID)
	return o
}

// SetTestCaseID adds the testCaseId to the get points list params
func (o *GetPointsListParams) SetTestCaseID(testCaseID *string) {
	o.TestCaseID = testCaseID
}

// WithTestPointIds adds the testPointIds to the get points list params
func (o *GetPointsListParams) WithTestPointIds(testPointIds *string) *GetPointsListParams {
	o.SetTestPointIds(testPointIds)
	return o
}

// SetTestPointIds adds the testPointIds to the get points list params
func (o *GetPointsListParams) SetTestPointIds(testPointIds *string) {
	o.TestPointIds = testPointIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetPointsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken string
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.IncludePointDetails != nil {

		// query param includePointDetails
		var qrIncludePointDetails bool
		if o.IncludePointDetails != nil {
			qrIncludePointDetails = *o.IncludePointDetails
		}
		qIncludePointDetails := swag.FormatBool(qrIncludePointDetails)
		if qIncludePointDetails != "" {
			if err := r.SetQueryParam("includePointDetails", qIncludePointDetails); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param planId
	if err := r.SetPathParam("planId", swag.FormatInt32(o.PlanID)); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.ReturnIdentityRef != nil {

		// query param returnIdentityRef
		var qrReturnIdentityRef bool
		if o.ReturnIdentityRef != nil {
			qrReturnIdentityRef = *o.ReturnIdentityRef
		}
		qReturnIdentityRef := swag.FormatBool(qrReturnIdentityRef)
		if qReturnIdentityRef != "" {
			if err := r.SetQueryParam("returnIdentityRef", qReturnIdentityRef); err != nil {
				return err
			}
		}

	}

	// path param suiteId
	if err := r.SetPathParam("suiteId", swag.FormatInt32(o.SuiteID)); err != nil {
		return err
	}

	if o.TestCaseID != nil {

		// query param testCaseId
		var qrTestCaseID string
		if o.TestCaseID != nil {
			qrTestCaseID = *o.TestCaseID
		}
		qTestCaseID := qrTestCaseID
		if qTestCaseID != "" {
			if err := r.SetQueryParam("testCaseId", qTestCaseID); err != nil {
				return err
			}
		}

	}

	if o.TestPointIds != nil {

		// query param testPointIds
		var qrTestPointIds string
		if o.TestPointIds != nil {
			qrTestPointIds = *o.TestPointIds
		}
		qTestPointIds := qrTestPointIds
		if qTestPointIds != "" {
			if err := r.SetQueryParam("testPointIds", qTestPointIds); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
