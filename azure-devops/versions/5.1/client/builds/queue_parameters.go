// Code generated by go-swagger; DO NOT EDIT.

package builds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// NewQueueParams creates a new QueueParams object
// with the default values initialized.
func NewQueueParams() *QueueParams {
	var ()
	return &QueueParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueueParamsWithTimeout creates a new QueueParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueueParamsWithTimeout(timeout time.Duration) *QueueParams {
	var ()
	return &QueueParams{

		timeout: timeout,
	}
}

// NewQueueParamsWithContext creates a new QueueParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueueParamsWithContext(ctx context.Context) *QueueParams {
	var ()
	return &QueueParams{

		Context: ctx,
	}
}

// NewQueueParamsWithHTTPClient creates a new QueueParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueueParamsWithHTTPClient(client *http.Client) *QueueParams {
	var ()
	return &QueueParams{
		HTTPClient: client,
	}
}

/*QueueParams contains all the parameters to send to the API endpoint
for the queue operation typically these are written to a http.Request
*/
type QueueParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.5' to use this version of the api.

	*/
	APIVersion string
	/*Body*/
	Body *models.Build
	/*CheckInTicket*/
	CheckInTicket *string
	/*IgnoreWarnings*/
	IgnoreWarnings *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*SourceBuildID*/
	SourceBuildID *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the queue params
func (o *QueueParams) WithTimeout(timeout time.Duration) *QueueParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the queue params
func (o *QueueParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the queue params
func (o *QueueParams) WithContext(ctx context.Context) *QueueParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the queue params
func (o *QueueParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the queue params
func (o *QueueParams) WithHTTPClient(client *http.Client) *QueueParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the queue params
func (o *QueueParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the queue params
func (o *QueueParams) WithAPIVersion(aPIVersion string) *QueueParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the queue params
func (o *QueueParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the queue params
func (o *QueueParams) WithBody(body *models.Build) *QueueParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the queue params
func (o *QueueParams) SetBody(body *models.Build) {
	o.Body = body
}

// WithCheckInTicket adds the checkInTicket to the queue params
func (o *QueueParams) WithCheckInTicket(checkInTicket *string) *QueueParams {
	o.SetCheckInTicket(checkInTicket)
	return o
}

// SetCheckInTicket adds the checkInTicket to the queue params
func (o *QueueParams) SetCheckInTicket(checkInTicket *string) {
	o.CheckInTicket = checkInTicket
}

// WithIgnoreWarnings adds the ignoreWarnings to the queue params
func (o *QueueParams) WithIgnoreWarnings(ignoreWarnings *bool) *QueueParams {
	o.SetIgnoreWarnings(ignoreWarnings)
	return o
}

// SetIgnoreWarnings adds the ignoreWarnings to the queue params
func (o *QueueParams) SetIgnoreWarnings(ignoreWarnings *bool) {
	o.IgnoreWarnings = ignoreWarnings
}

// WithOrganization adds the organization to the queue params
func (o *QueueParams) WithOrganization(organization string) *QueueParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the queue params
func (o *QueueParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the queue params
func (o *QueueParams) WithProject(project string) *QueueParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the queue params
func (o *QueueParams) SetProject(project string) {
	o.Project = project
}

// WithSourceBuildID adds the sourceBuildID to the queue params
func (o *QueueParams) WithSourceBuildID(sourceBuildID *int32) *QueueParams {
	o.SetSourceBuildID(sourceBuildID)
	return o
}

// SetSourceBuildID adds the sourceBuildId to the queue params
func (o *QueueParams) SetSourceBuildID(sourceBuildID *int32) {
	o.SourceBuildID = sourceBuildID
}

// WriteToRequest writes these params to a swagger request
func (o *QueueParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.CheckInTicket != nil {

		// query param checkInTicket
		var qrCheckInTicket string
		if o.CheckInTicket != nil {
			qrCheckInTicket = *o.CheckInTicket
		}
		qCheckInTicket := qrCheckInTicket
		if qCheckInTicket != "" {
			if err := r.SetQueryParam("checkInTicket", qCheckInTicket); err != nil {
				return err
			}
		}

	}

	if o.IgnoreWarnings != nil {

		// query param ignoreWarnings
		var qrIgnoreWarnings bool
		if o.IgnoreWarnings != nil {
			qrIgnoreWarnings = *o.IgnoreWarnings
		}
		qIgnoreWarnings := swag.FormatBool(qrIgnoreWarnings)
		if qIgnoreWarnings != "" {
			if err := r.SetQueryParam("ignoreWarnings", qIgnoreWarnings); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.SourceBuildID != nil {

		// query param sourceBuildId
		var qrSourceBuildID int32
		if o.SourceBuildID != nil {
			qrSourceBuildID = *o.SourceBuildID
		}
		qSourceBuildID := swag.FormatInt32(qrSourceBuildID)
		if qSourceBuildID != "" {
			if err := r.SetQueryParam("sourceBuildId", qSourceBuildID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
