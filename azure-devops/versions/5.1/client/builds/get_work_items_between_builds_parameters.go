// Code generated by go-swagger; DO NOT EDIT.

package builds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetWorkItemsBetweenBuildsParams creates a new GetWorkItemsBetweenBuildsParams object
// with the default values initialized.
func NewGetWorkItemsBetweenBuildsParams() *GetWorkItemsBetweenBuildsParams {
	var ()
	return &GetWorkItemsBetweenBuildsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkItemsBetweenBuildsParamsWithTimeout creates a new GetWorkItemsBetweenBuildsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkItemsBetweenBuildsParamsWithTimeout(timeout time.Duration) *GetWorkItemsBetweenBuildsParams {
	var ()
	return &GetWorkItemsBetweenBuildsParams{

		timeout: timeout,
	}
}

// NewGetWorkItemsBetweenBuildsParamsWithContext creates a new GetWorkItemsBetweenBuildsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkItemsBetweenBuildsParamsWithContext(ctx context.Context) *GetWorkItemsBetweenBuildsParams {
	var ()
	return &GetWorkItemsBetweenBuildsParams{

		Context: ctx,
	}
}

// NewGetWorkItemsBetweenBuildsParamsWithHTTPClient creates a new GetWorkItemsBetweenBuildsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkItemsBetweenBuildsParamsWithHTTPClient(client *http.Client) *GetWorkItemsBetweenBuildsParams {
	var ()
	return &GetWorkItemsBetweenBuildsParams{
		HTTPClient: client,
	}
}

/*GetWorkItemsBetweenBuildsParams contains all the parameters to send to the API endpoint
for the get work items between builds operation typically these are written to a http.Request
*/
type GetWorkItemsBetweenBuildsParams struct {

	/*NrDollarTop
	  The maximum number of work items to return.

	*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*FromBuildID
	  The ID of the first build.

	*/
	FromBuildID int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ToBuildID
	  The ID of the last build.

	*/
	ToBuildID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithTimeout(timeout time.Duration) *GetWorkItemsBetweenBuildsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithContext(ctx context.Context) *GetWorkItemsBetweenBuildsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithHTTPClient(client *http.Client) *GetWorkItemsBetweenBuildsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarTop adds the dollarTop to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithDollarTop(dollarTop *int32) *GetWorkItemsBetweenBuildsParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithAPIVersion(aPIVersion string) *GetWorkItemsBetweenBuildsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithFromBuildID adds the fromBuildID to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithFromBuildID(fromBuildID int32) *GetWorkItemsBetweenBuildsParams {
	o.SetFromBuildID(fromBuildID)
	return o
}

// SetFromBuildID adds the fromBuildId to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetFromBuildID(fromBuildID int32) {
	o.FromBuildID = fromBuildID
}

// WithOrganization adds the organization to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithOrganization(organization string) *GetWorkItemsBetweenBuildsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithProject(project string) *GetWorkItemsBetweenBuildsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetProject(project string) {
	o.Project = project
}

// WithToBuildID adds the toBuildID to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) WithToBuildID(toBuildID int32) *GetWorkItemsBetweenBuildsParams {
	o.SetToBuildID(toBuildID)
	return o
}

// SetToBuildID adds the toBuildId to the get work items between builds params
func (o *GetWorkItemsBetweenBuildsParams) SetToBuildID(toBuildID int32) {
	o.ToBuildID = toBuildID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkItemsBetweenBuildsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// query param fromBuildId
	qrFromBuildID := o.FromBuildID
	qFromBuildID := swag.FormatInt32(qrFromBuildID)
	if qFromBuildID != "" {
		if err := r.SetQueryParam("fromBuildId", qFromBuildID); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// query param toBuildId
	qrToBuildID := o.ToBuildID
	qToBuildID := swag.FormatInt32(qrToBuildID)
	if qToBuildID != "" {
		if err := r.SetQueryParam("toBuildId", qToBuildID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
