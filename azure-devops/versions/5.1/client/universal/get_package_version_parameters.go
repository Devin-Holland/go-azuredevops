// Code generated by go-swagger; DO NOT EDIT.

package universal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPackageVersionParams creates a new GetPackageVersionParams object
// with the default values initialized.
func NewGetPackageVersionParams() *GetPackageVersionParams {
	var ()
	return &GetPackageVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPackageVersionParamsWithTimeout creates a new GetPackageVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPackageVersionParamsWithTimeout(timeout time.Duration) *GetPackageVersionParams {
	var ()
	return &GetPackageVersionParams{

		timeout: timeout,
	}
}

// NewGetPackageVersionParamsWithContext creates a new GetPackageVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPackageVersionParamsWithContext(ctx context.Context) *GetPackageVersionParams {
	var ()
	return &GetPackageVersionParams{

		Context: ctx,
	}
}

// NewGetPackageVersionParamsWithHTTPClient creates a new GetPackageVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPackageVersionParamsWithHTTPClient(client *http.Client) *GetPackageVersionParams {
	var ()
	return &GetPackageVersionParams{
		HTTPClient: client,
	}
}

/*GetPackageVersionParams contains all the parameters to send to the API endpoint
for the get package version operation typically these are written to a http.Request
*/
type GetPackageVersionParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*FeedID
	  Name or ID of the feed.

	*/
	FeedID string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PackageName
	  Name of the package.

	*/
	PackageName string
	/*PackageVersion
	  Version of the package.

	*/
	PackageVersion string
	/*ShowDeleted
	  True to show information for deleted versions

	*/
	ShowDeleted *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get package version params
func (o *GetPackageVersionParams) WithTimeout(timeout time.Duration) *GetPackageVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get package version params
func (o *GetPackageVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get package version params
func (o *GetPackageVersionParams) WithContext(ctx context.Context) *GetPackageVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get package version params
func (o *GetPackageVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get package version params
func (o *GetPackageVersionParams) WithHTTPClient(client *http.Client) *GetPackageVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get package version params
func (o *GetPackageVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get package version params
func (o *GetPackageVersionParams) WithAPIVersion(aPIVersion string) *GetPackageVersionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get package version params
func (o *GetPackageVersionParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithFeedID adds the feedID to the get package version params
func (o *GetPackageVersionParams) WithFeedID(feedID string) *GetPackageVersionParams {
	o.SetFeedID(feedID)
	return o
}

// SetFeedID adds the feedId to the get package version params
func (o *GetPackageVersionParams) SetFeedID(feedID string) {
	o.FeedID = feedID
}

// WithOrganization adds the organization to the get package version params
func (o *GetPackageVersionParams) WithOrganization(organization string) *GetPackageVersionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get package version params
func (o *GetPackageVersionParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPackageName adds the packageName to the get package version params
func (o *GetPackageVersionParams) WithPackageName(packageName string) *GetPackageVersionParams {
	o.SetPackageName(packageName)
	return o
}

// SetPackageName adds the packageName to the get package version params
func (o *GetPackageVersionParams) SetPackageName(packageName string) {
	o.PackageName = packageName
}

// WithPackageVersion adds the packageVersion to the get package version params
func (o *GetPackageVersionParams) WithPackageVersion(packageVersion string) *GetPackageVersionParams {
	o.SetPackageVersion(packageVersion)
	return o
}

// SetPackageVersion adds the packageVersion to the get package version params
func (o *GetPackageVersionParams) SetPackageVersion(packageVersion string) {
	o.PackageVersion = packageVersion
}

// WithShowDeleted adds the showDeleted to the get package version params
func (o *GetPackageVersionParams) WithShowDeleted(showDeleted *bool) *GetPackageVersionParams {
	o.SetShowDeleted(showDeleted)
	return o
}

// SetShowDeleted adds the showDeleted to the get package version params
func (o *GetPackageVersionParams) SetShowDeleted(showDeleted *bool) {
	o.ShowDeleted = showDeleted
}

// WriteToRequest writes these params to a swagger request
func (o *GetPackageVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param feedId
	if err := r.SetPathParam("feedId", o.FeedID); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param packageName
	if err := r.SetPathParam("packageName", o.PackageName); err != nil {
		return err
	}

	// path param packageVersion
	if err := r.SetPathParam("packageVersion", o.PackageVersion); err != nil {
		return err
	}

	if o.ShowDeleted != nil {

		// query param showDeleted
		var qrShowDeleted bool
		if o.ShowDeleted != nil {
			qrShowDeleted = *o.ShowDeleted
		}
		qShowDeleted := swag.FormatBool(qrShowDeleted)
		if qShowDeleted != "" {
			if err := r.SetQueryParam("showDeleted", qShowDeleted); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
