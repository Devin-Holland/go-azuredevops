// Code generated by go-swagger; DO NOT EDIT.

package suite_test_case

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new suite test case API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for suite test case API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Add Add test cases to a suite with specified configurations
*/
func (a *Client) Add(params *AddParams, authInfo runtime.ClientAuthInfoWriter) (*AddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Add",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOK), nil

}

/*
GetTestCase Get Test Cases For a Suite.
*/
func (a *Client) GetTestCase(params *GetTestCaseParams, authInfo runtime.ClientAuthInfoWriter) (*GetTestCaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestCaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Test Case",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestCaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTestCaseOK), nil

}

/*
GetTestCaseList Get Test Case List return those test cases which have all the configuration Ids as mentioned in the optional paramter. If configuration Ids is null, it return all the test cases
*/
func (a *Client) GetTestCaseList(params *GetTestCaseListParams, authInfo runtime.ClientAuthInfoWriter) (*GetTestCaseListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestCaseListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Test Case List",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestCaseListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTestCaseListOK), nil

}

/*
RemoveTestCasesFromSuite Removes test cases from a suite based on the list of test case Ids provided.
*/
func (a *Client) RemoveTestCasesFromSuite(params *RemoveTestCasesFromSuiteParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTestCasesFromSuiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTestCasesFromSuiteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Test Cases From Suite",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/testplan/Plans/{planId}/Suites/{suiteId}/TestCase/{testCaseIds}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTestCasesFromSuiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveTestCasesFromSuiteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
