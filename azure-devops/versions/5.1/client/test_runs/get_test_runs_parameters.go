// Code generated by go-swagger; DO NOT EDIT.

package test_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTestRunsParams creates a new GetTestRunsParams object
// with the default values initialized.
func NewGetTestRunsParams() *GetTestRunsParams {
	var ()
	return &GetTestRunsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTestRunsParamsWithTimeout creates a new GetTestRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTestRunsParamsWithTimeout(timeout time.Duration) *GetTestRunsParams {
	var ()
	return &GetTestRunsParams{

		timeout: timeout,
	}
}

// NewGetTestRunsParamsWithContext creates a new GetTestRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTestRunsParamsWithContext(ctx context.Context) *GetTestRunsParams {
	var ()
	return &GetTestRunsParams{

		Context: ctx,
	}
}

// NewGetTestRunsParamsWithHTTPClient creates a new GetTestRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTestRunsParamsWithHTTPClient(client *http.Client) *GetTestRunsParams {
	var ()
	return &GetTestRunsParams{
		HTTPClient: client,
	}
}

/*GetTestRunsParams contains all the parameters to send to the API endpoint
for the get test runs operation typically these are written to a http.Request
*/
type GetTestRunsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*Detailed
	  Include the detailed test run attributes.

	*/
	Detailed *bool
	/*FromDate
	  Filter by the test runs that have been modified after the fromDate timestamp.

	*/
	FromDate *string
	/*Name
	  Name for the test run. Names are not unique. Test runs with same name are assigned sequential rolling numbers.

	*/
	Name *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*RequestedBy
	  Filter by the user who requested the test run. Here requestedBy should be the display name of the user.

	*/
	RequestedBy *string
	/*RetentionState*/
	RetentionState *string
	/*RunType
	  Valid values include: null, one of TestRunType, or "*"

	*/
	RunType *string
	/*Runsourceidentifier*/
	Runsourceidentifier *string
	/*Status
	  Filter by the test run status.

	*/
	Status *string
	/*ToDate
	  Filter by the test runs that have been modified before the toDate timestamp.

	*/
	ToDate *string
	/*Top
	  The maximum number of test runs to return.

	*/
	Top *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get test runs params
func (o *GetTestRunsParams) WithTimeout(timeout time.Duration) *GetTestRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get test runs params
func (o *GetTestRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get test runs params
func (o *GetTestRunsParams) WithContext(ctx context.Context) *GetTestRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get test runs params
func (o *GetTestRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get test runs params
func (o *GetTestRunsParams) WithHTTPClient(client *http.Client) *GetTestRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get test runs params
func (o *GetTestRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get test runs params
func (o *GetTestRunsParams) WithAPIVersion(aPIVersion string) *GetTestRunsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get test runs params
func (o *GetTestRunsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithDetailed adds the detailed to the get test runs params
func (o *GetTestRunsParams) WithDetailed(detailed *bool) *GetTestRunsParams {
	o.SetDetailed(detailed)
	return o
}

// SetDetailed adds the detailed to the get test runs params
func (o *GetTestRunsParams) SetDetailed(detailed *bool) {
	o.Detailed = detailed
}

// WithFromDate adds the fromDate to the get test runs params
func (o *GetTestRunsParams) WithFromDate(fromDate *string) *GetTestRunsParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get test runs params
func (o *GetTestRunsParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithName adds the name to the get test runs params
func (o *GetTestRunsParams) WithName(name *string) *GetTestRunsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get test runs params
func (o *GetTestRunsParams) SetName(name *string) {
	o.Name = name
}

// WithOrganization adds the organization to the get test runs params
func (o *GetTestRunsParams) WithOrganization(organization string) *GetTestRunsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get test runs params
func (o *GetTestRunsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithRequestedBy adds the requestedBy to the get test runs params
func (o *GetTestRunsParams) WithRequestedBy(requestedBy *string) *GetTestRunsParams {
	o.SetRequestedBy(requestedBy)
	return o
}

// SetRequestedBy adds the requestedBy to the get test runs params
func (o *GetTestRunsParams) SetRequestedBy(requestedBy *string) {
	o.RequestedBy = requestedBy
}

// WithRetentionState adds the retentionState to the get test runs params
func (o *GetTestRunsParams) WithRetentionState(retentionState *string) *GetTestRunsParams {
	o.SetRetentionState(retentionState)
	return o
}

// SetRetentionState adds the retentionState to the get test runs params
func (o *GetTestRunsParams) SetRetentionState(retentionState *string) {
	o.RetentionState = retentionState
}

// WithRunType adds the runType to the get test runs params
func (o *GetTestRunsParams) WithRunType(runType *string) *GetTestRunsParams {
	o.SetRunType(runType)
	return o
}

// SetRunType adds the runType to the get test runs params
func (o *GetTestRunsParams) SetRunType(runType *string) {
	o.RunType = runType
}

// WithRunsourceidentifier adds the runsourceidentifier to the get test runs params
func (o *GetTestRunsParams) WithRunsourceidentifier(runsourceidentifier *string) *GetTestRunsParams {
	o.SetRunsourceidentifier(runsourceidentifier)
	return o
}

// SetRunsourceidentifier adds the runsourceidentifier to the get test runs params
func (o *GetTestRunsParams) SetRunsourceidentifier(runsourceidentifier *string) {
	o.Runsourceidentifier = runsourceidentifier
}

// WithStatus adds the status to the get test runs params
func (o *GetTestRunsParams) WithStatus(status *string) *GetTestRunsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get test runs params
func (o *GetTestRunsParams) SetStatus(status *string) {
	o.Status = status
}

// WithToDate adds the toDate to the get test runs params
func (o *GetTestRunsParams) WithToDate(toDate *string) *GetTestRunsParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get test runs params
func (o *GetTestRunsParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WithTop adds the top to the get test runs params
func (o *GetTestRunsParams) WithTop(top *int32) *GetTestRunsParams {
	o.SetTop(top)
	return o
}

// SetTop adds the top to the get test runs params
func (o *GetTestRunsParams) SetTop(top *int32) {
	o.Top = top
}

// WriteToRequest writes these params to a swagger request
func (o *GetTestRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Detailed != nil {

		// query param detailed
		var qrDetailed bool
		if o.Detailed != nil {
			qrDetailed = *o.Detailed
		}
		qDetailed := swag.FormatBool(qrDetailed)
		if qDetailed != "" {
			if err := r.SetQueryParam("detailed", qDetailed); err != nil {
				return err
			}
		}

	}

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate string
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.RequestedBy != nil {

		// query param requestedBy
		var qrRequestedBy string
		if o.RequestedBy != nil {
			qrRequestedBy = *o.RequestedBy
		}
		qRequestedBy := qrRequestedBy
		if qRequestedBy != "" {
			if err := r.SetQueryParam("requestedBy", qRequestedBy); err != nil {
				return err
			}
		}

	}

	if o.RetentionState != nil {

		// query param retentionState
		var qrRetentionState string
		if o.RetentionState != nil {
			qrRetentionState = *o.RetentionState
		}
		qRetentionState := qrRetentionState
		if qRetentionState != "" {
			if err := r.SetQueryParam("retentionState", qRetentionState); err != nil {
				return err
			}
		}

	}

	if o.RunType != nil {

		// query param runType
		var qrRunType string
		if o.RunType != nil {
			qrRunType = *o.RunType
		}
		qRunType := qrRunType
		if qRunType != "" {
			if err := r.SetQueryParam("runType", qRunType); err != nil {
				return err
			}
		}

	}

	if o.Runsourceidentifier != nil {

		// query param runsourceidentifier
		var qrRunsourceidentifier string
		if o.Runsourceidentifier != nil {
			qrRunsourceidentifier = *o.Runsourceidentifier
		}
		qRunsourceidentifier := qrRunsourceidentifier
		if qRunsourceidentifier != "" {
			if err := r.SetQueryParam("runsourceidentifier", qRunsourceidentifier); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate string
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	if o.Top != nil {

		// query param top
		var qrTop int32
		if o.Top != nil {
			qrTop = *o.Top
		}
		qTop := swag.FormatInt32(qrTop)
		if qTop != "" {
			if err := r.SetQueryParam("top", qTop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
