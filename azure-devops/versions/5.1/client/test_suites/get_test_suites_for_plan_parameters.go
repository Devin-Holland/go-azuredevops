// Code generated by go-swagger; DO NOT EDIT.

package test_suites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTestSuitesForPlanParams creates a new GetTestSuitesForPlanParams object
// with the default values initialized.
func NewGetTestSuitesForPlanParams() *GetTestSuitesForPlanParams {
	var ()
	return &GetTestSuitesForPlanParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTestSuitesForPlanParamsWithTimeout creates a new GetTestSuitesForPlanParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTestSuitesForPlanParamsWithTimeout(timeout time.Duration) *GetTestSuitesForPlanParams {
	var ()
	return &GetTestSuitesForPlanParams{

		timeout: timeout,
	}
}

// NewGetTestSuitesForPlanParamsWithContext creates a new GetTestSuitesForPlanParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTestSuitesForPlanParamsWithContext(ctx context.Context) *GetTestSuitesForPlanParams {
	var ()
	return &GetTestSuitesForPlanParams{

		Context: ctx,
	}
}

// NewGetTestSuitesForPlanParamsWithHTTPClient creates a new GetTestSuitesForPlanParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTestSuitesForPlanParamsWithHTTPClient(client *http.Client) *GetTestSuitesForPlanParams {
	var ()
	return &GetTestSuitesForPlanParams{
		HTTPClient: client,
	}
}

/*GetTestSuitesForPlanParams contains all the parameters to send to the API endpoint
for the get test suites for plan operation typically these are written to a http.Request
*/
type GetTestSuitesForPlanParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*AsTreeView
	  If the suites returned should be in a tree structure.

	*/
	AsTreeView *bool
	/*ContinuationToken
	  If the list of suites returned is not complete, a continuation token to query next batch of suites is included in the response header as "x-ms-continuationtoken". Omit this parameter to get the first batch of test suites.

	*/
	ContinuationToken *string
	/*Expand
	  Include the children suites and testers details.

	*/
	Expand *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PlanID
	  ID of the test plan for which suites are requested.

	*/
	PlanID int32
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithTimeout(timeout time.Duration) *GetTestSuitesForPlanParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithContext(ctx context.Context) *GetTestSuitesForPlanParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithHTTPClient(client *http.Client) *GetTestSuitesForPlanParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithAPIVersion(aPIVersion string) *GetTestSuitesForPlanParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithAsTreeView adds the asTreeView to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithAsTreeView(asTreeView *bool) *GetTestSuitesForPlanParams {
	o.SetAsTreeView(asTreeView)
	return o
}

// SetAsTreeView adds the asTreeView to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetAsTreeView(asTreeView *bool) {
	o.AsTreeView = asTreeView
}

// WithContinuationToken adds the continuationToken to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithContinuationToken(continuationToken *string) *GetTestSuitesForPlanParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetContinuationToken(continuationToken *string) {
	o.ContinuationToken = continuationToken
}

// WithExpand adds the expand to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithExpand(expand *string) *GetTestSuitesForPlanParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetExpand(expand *string) {
	o.Expand = expand
}

// WithOrganization adds the organization to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithOrganization(organization string) *GetTestSuitesForPlanParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPlanID adds the planID to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithPlanID(planID int32) *GetTestSuitesForPlanParams {
	o.SetPlanID(planID)
	return o
}

// SetPlanID adds the planId to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetPlanID(planID int32) {
	o.PlanID = planID
}

// WithProject adds the project to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) WithProject(project string) *GetTestSuitesForPlanParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get test suites for plan params
func (o *GetTestSuitesForPlanParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *GetTestSuitesForPlanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.AsTreeView != nil {

		// query param asTreeView
		var qrAsTreeView bool
		if o.AsTreeView != nil {
			qrAsTreeView = *o.AsTreeView
		}
		qAsTreeView := swag.FormatBool(qrAsTreeView)
		if qAsTreeView != "" {
			if err := r.SetQueryParam("asTreeView", qAsTreeView); err != nil {
				return err
			}
		}

	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken string
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.Expand != nil {

		// query param expand
		var qrExpand string
		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := qrExpand
		if qExpand != "" {
			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param planId
	if err := r.SetPathParam("planId", swag.FormatInt32(o.PlanID)); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
