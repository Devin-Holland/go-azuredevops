// Code generated by go-swagger; DO NOT EDIT.

package artifact_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPackagesParams creates a new GetPackagesParams object
// with the default values initialized.
func NewGetPackagesParams() *GetPackagesParams {
	var ()
	return &GetPackagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPackagesParamsWithTimeout creates a new GetPackagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPackagesParamsWithTimeout(timeout time.Duration) *GetPackagesParams {
	var ()
	return &GetPackagesParams{

		timeout: timeout,
	}
}

// NewGetPackagesParamsWithContext creates a new GetPackagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPackagesParamsWithContext(ctx context.Context) *GetPackagesParams {
	var ()
	return &GetPackagesParams{

		Context: ctx,
	}
}

// NewGetPackagesParamsWithHTTPClient creates a new GetPackagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPackagesParamsWithHTTPClient(client *http.Client) *GetPackagesParams {
	var ()
	return &GetPackagesParams{
		HTTPClient: client,
	}
}

/*GetPackagesParams contains all the parameters to send to the API endpoint
for the get packages operation typically these are written to a http.Request
*/
type GetPackagesParams struct {

	/*NrDollarSkip
	  Skip the first N packages (or package versions where getTopPackageVersions=true)

	*/
	DollarSkip *int32
	/*NrDollarTop
	  Get the top N packages (or package versions where getTopPackageVersions=true)

	*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*DirectUpstreamID
	  Filter results to return packages from a specific upstream.

	*/
	DirectUpstreamID *strfmt.UUID
	/*FeedID
	  Name or Id of the feed.

	*/
	FeedID string
	/*GetTopPackageVersions
	  Changes the behavior of $top and $skip to return all versions of each package up to $top. Must be used in conjunction with includeAllVersions=true

	*/
	GetTopPackageVersions *bool
	/*IncludeAllVersions
	  True to return all versions of the package in the response. Default is false (latest version only).

	*/
	IncludeAllVersions *bool
	/*IncludeDeleted
	  Return deleted or unpublished versions of packages in the response. Default is False.

	*/
	IncludeDeleted *bool
	/*IncludeDescription
	  Return the description for every version of each package in the response. Default is False.

	*/
	IncludeDescription *bool
	/*IncludeUrls
	  True to return REST Urls with the response. Default is True.

	*/
	IncludeUrls *bool
	/*IsCached
	  [Obsolete] Used for legacy scenarios and may be removed in future versions.

	*/
	IsCached *bool
	/*IsListed
	  Only applicable for NuGet packages, setting it for other package types will result in a 404. If false, delisted package versions will be returned. Use this to filter the response when includeAllVersions is set to true. Default is unset (do not return delisted packages).

	*/
	IsListed *bool
	/*IsRelease
	  Only applicable for Nuget packages. Use this to filter the response when includeAllVersions is set to true. Default is True (only return packages without prerelease versioning).

	*/
	IsRelease *bool
	/*NormalizedPackageName
	  [Obsolete] Used for legacy scenarios and may be removed in future versions.

	*/
	NormalizedPackageName *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PackageNameQuery
	  Filter to packages that contain the provided string. Characters in the string must conform to the package name constraints.

	*/
	PackageNameQuery *string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ProtocolType
	  One of the supported artifact package types.

	*/
	ProtocolType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get packages params
func (o *GetPackagesParams) WithTimeout(timeout time.Duration) *GetPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get packages params
func (o *GetPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get packages params
func (o *GetPackagesParams) WithContext(ctx context.Context) *GetPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get packages params
func (o *GetPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get packages params
func (o *GetPackagesParams) WithHTTPClient(client *http.Client) *GetPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get packages params
func (o *GetPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarSkip adds the dollarSkip to the get packages params
func (o *GetPackagesParams) WithDollarSkip(dollarSkip *int32) *GetPackagesParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get packages params
func (o *GetPackagesParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get packages params
func (o *GetPackagesParams) WithDollarTop(dollarTop *int32) *GetPackagesParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get packages params
func (o *GetPackagesParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get packages params
func (o *GetPackagesParams) WithAPIVersion(aPIVersion string) *GetPackagesParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get packages params
func (o *GetPackagesParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithDirectUpstreamID adds the directUpstreamID to the get packages params
func (o *GetPackagesParams) WithDirectUpstreamID(directUpstreamID *strfmt.UUID) *GetPackagesParams {
	o.SetDirectUpstreamID(directUpstreamID)
	return o
}

// SetDirectUpstreamID adds the directUpstreamId to the get packages params
func (o *GetPackagesParams) SetDirectUpstreamID(directUpstreamID *strfmt.UUID) {
	o.DirectUpstreamID = directUpstreamID
}

// WithFeedID adds the feedID to the get packages params
func (o *GetPackagesParams) WithFeedID(feedID string) *GetPackagesParams {
	o.SetFeedID(feedID)
	return o
}

// SetFeedID adds the feedId to the get packages params
func (o *GetPackagesParams) SetFeedID(feedID string) {
	o.FeedID = feedID
}

// WithGetTopPackageVersions adds the getTopPackageVersions to the get packages params
func (o *GetPackagesParams) WithGetTopPackageVersions(getTopPackageVersions *bool) *GetPackagesParams {
	o.SetGetTopPackageVersions(getTopPackageVersions)
	return o
}

// SetGetTopPackageVersions adds the getTopPackageVersions to the get packages params
func (o *GetPackagesParams) SetGetTopPackageVersions(getTopPackageVersions *bool) {
	o.GetTopPackageVersions = getTopPackageVersions
}

// WithIncludeAllVersions adds the includeAllVersions to the get packages params
func (o *GetPackagesParams) WithIncludeAllVersions(includeAllVersions *bool) *GetPackagesParams {
	o.SetIncludeAllVersions(includeAllVersions)
	return o
}

// SetIncludeAllVersions adds the includeAllVersions to the get packages params
func (o *GetPackagesParams) SetIncludeAllVersions(includeAllVersions *bool) {
	o.IncludeAllVersions = includeAllVersions
}

// WithIncludeDeleted adds the includeDeleted to the get packages params
func (o *GetPackagesParams) WithIncludeDeleted(includeDeleted *bool) *GetPackagesParams {
	o.SetIncludeDeleted(includeDeleted)
	return o
}

// SetIncludeDeleted adds the includeDeleted to the get packages params
func (o *GetPackagesParams) SetIncludeDeleted(includeDeleted *bool) {
	o.IncludeDeleted = includeDeleted
}

// WithIncludeDescription adds the includeDescription to the get packages params
func (o *GetPackagesParams) WithIncludeDescription(includeDescription *bool) *GetPackagesParams {
	o.SetIncludeDescription(includeDescription)
	return o
}

// SetIncludeDescription adds the includeDescription to the get packages params
func (o *GetPackagesParams) SetIncludeDescription(includeDescription *bool) {
	o.IncludeDescription = includeDescription
}

// WithIncludeUrls adds the includeUrls to the get packages params
func (o *GetPackagesParams) WithIncludeUrls(includeUrls *bool) *GetPackagesParams {
	o.SetIncludeUrls(includeUrls)
	return o
}

// SetIncludeUrls adds the includeUrls to the get packages params
func (o *GetPackagesParams) SetIncludeUrls(includeUrls *bool) {
	o.IncludeUrls = includeUrls
}

// WithIsCached adds the isCached to the get packages params
func (o *GetPackagesParams) WithIsCached(isCached *bool) *GetPackagesParams {
	o.SetIsCached(isCached)
	return o
}

// SetIsCached adds the isCached to the get packages params
func (o *GetPackagesParams) SetIsCached(isCached *bool) {
	o.IsCached = isCached
}

// WithIsListed adds the isListed to the get packages params
func (o *GetPackagesParams) WithIsListed(isListed *bool) *GetPackagesParams {
	o.SetIsListed(isListed)
	return o
}

// SetIsListed adds the isListed to the get packages params
func (o *GetPackagesParams) SetIsListed(isListed *bool) {
	o.IsListed = isListed
}

// WithIsRelease adds the isRelease to the get packages params
func (o *GetPackagesParams) WithIsRelease(isRelease *bool) *GetPackagesParams {
	o.SetIsRelease(isRelease)
	return o
}

// SetIsRelease adds the isRelease to the get packages params
func (o *GetPackagesParams) SetIsRelease(isRelease *bool) {
	o.IsRelease = isRelease
}

// WithNormalizedPackageName adds the normalizedPackageName to the get packages params
func (o *GetPackagesParams) WithNormalizedPackageName(normalizedPackageName *string) *GetPackagesParams {
	o.SetNormalizedPackageName(normalizedPackageName)
	return o
}

// SetNormalizedPackageName adds the normalizedPackageName to the get packages params
func (o *GetPackagesParams) SetNormalizedPackageName(normalizedPackageName *string) {
	o.NormalizedPackageName = normalizedPackageName
}

// WithOrganization adds the organization to the get packages params
func (o *GetPackagesParams) WithOrganization(organization string) *GetPackagesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get packages params
func (o *GetPackagesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPackageNameQuery adds the packageNameQuery to the get packages params
func (o *GetPackagesParams) WithPackageNameQuery(packageNameQuery *string) *GetPackagesParams {
	o.SetPackageNameQuery(packageNameQuery)
	return o
}

// SetPackageNameQuery adds the packageNameQuery to the get packages params
func (o *GetPackagesParams) SetPackageNameQuery(packageNameQuery *string) {
	o.PackageNameQuery = packageNameQuery
}

// WithProject adds the project to the get packages params
func (o *GetPackagesParams) WithProject(project string) *GetPackagesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get packages params
func (o *GetPackagesParams) SetProject(project string) {
	o.Project = project
}

// WithProtocolType adds the protocolType to the get packages params
func (o *GetPackagesParams) WithProtocolType(protocolType *string) *GetPackagesParams {
	o.SetProtocolType(protocolType)
	return o
}

// SetProtocolType adds the protocolType to the get packages params
func (o *GetPackagesParams) SetProtocolType(protocolType *string) {
	o.ProtocolType = protocolType
}

// WriteToRequest writes these params to a swagger request
func (o *GetPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarSkip != nil {

		// query param $skip
		var qrNrDollarSkip int32
		if o.DollarSkip != nil {
			qrNrDollarSkip = *o.DollarSkip
		}
		qNrDollarSkip := swag.FormatInt32(qrNrDollarSkip)
		if qNrDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qNrDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.DirectUpstreamID != nil {

		// query param directUpstreamId
		var qrDirectUpstreamID strfmt.UUID
		if o.DirectUpstreamID != nil {
			qrDirectUpstreamID = *o.DirectUpstreamID
		}
		qDirectUpstreamID := qrDirectUpstreamID.String()
		if qDirectUpstreamID != "" {
			if err := r.SetQueryParam("directUpstreamId", qDirectUpstreamID); err != nil {
				return err
			}
		}

	}

	// path param feedId
	if err := r.SetPathParam("feedId", o.FeedID); err != nil {
		return err
	}

	if o.GetTopPackageVersions != nil {

		// query param getTopPackageVersions
		var qrGetTopPackageVersions bool
		if o.GetTopPackageVersions != nil {
			qrGetTopPackageVersions = *o.GetTopPackageVersions
		}
		qGetTopPackageVersions := swag.FormatBool(qrGetTopPackageVersions)
		if qGetTopPackageVersions != "" {
			if err := r.SetQueryParam("getTopPackageVersions", qGetTopPackageVersions); err != nil {
				return err
			}
		}

	}

	if o.IncludeAllVersions != nil {

		// query param includeAllVersions
		var qrIncludeAllVersions bool
		if o.IncludeAllVersions != nil {
			qrIncludeAllVersions = *o.IncludeAllVersions
		}
		qIncludeAllVersions := swag.FormatBool(qrIncludeAllVersions)
		if qIncludeAllVersions != "" {
			if err := r.SetQueryParam("includeAllVersions", qIncludeAllVersions); err != nil {
				return err
			}
		}

	}

	if o.IncludeDeleted != nil {

		// query param includeDeleted
		var qrIncludeDeleted bool
		if o.IncludeDeleted != nil {
			qrIncludeDeleted = *o.IncludeDeleted
		}
		qIncludeDeleted := swag.FormatBool(qrIncludeDeleted)
		if qIncludeDeleted != "" {
			if err := r.SetQueryParam("includeDeleted", qIncludeDeleted); err != nil {
				return err
			}
		}

	}

	if o.IncludeDescription != nil {

		// query param includeDescription
		var qrIncludeDescription bool
		if o.IncludeDescription != nil {
			qrIncludeDescription = *o.IncludeDescription
		}
		qIncludeDescription := swag.FormatBool(qrIncludeDescription)
		if qIncludeDescription != "" {
			if err := r.SetQueryParam("includeDescription", qIncludeDescription); err != nil {
				return err
			}
		}

	}

	if o.IncludeUrls != nil {

		// query param includeUrls
		var qrIncludeUrls bool
		if o.IncludeUrls != nil {
			qrIncludeUrls = *o.IncludeUrls
		}
		qIncludeUrls := swag.FormatBool(qrIncludeUrls)
		if qIncludeUrls != "" {
			if err := r.SetQueryParam("includeUrls", qIncludeUrls); err != nil {
				return err
			}
		}

	}

	if o.IsCached != nil {

		// query param isCached
		var qrIsCached bool
		if o.IsCached != nil {
			qrIsCached = *o.IsCached
		}
		qIsCached := swag.FormatBool(qrIsCached)
		if qIsCached != "" {
			if err := r.SetQueryParam("isCached", qIsCached); err != nil {
				return err
			}
		}

	}

	if o.IsListed != nil {

		// query param isListed
		var qrIsListed bool
		if o.IsListed != nil {
			qrIsListed = *o.IsListed
		}
		qIsListed := swag.FormatBool(qrIsListed)
		if qIsListed != "" {
			if err := r.SetQueryParam("isListed", qIsListed); err != nil {
				return err
			}
		}

	}

	if o.IsRelease != nil {

		// query param isRelease
		var qrIsRelease bool
		if o.IsRelease != nil {
			qrIsRelease = *o.IsRelease
		}
		qIsRelease := swag.FormatBool(qrIsRelease)
		if qIsRelease != "" {
			if err := r.SetQueryParam("isRelease", qIsRelease); err != nil {
				return err
			}
		}

	}

	if o.NormalizedPackageName != nil {

		// query param normalizedPackageName
		var qrNormalizedPackageName string
		if o.NormalizedPackageName != nil {
			qrNormalizedPackageName = *o.NormalizedPackageName
		}
		qNormalizedPackageName := qrNormalizedPackageName
		if qNormalizedPackageName != "" {
			if err := r.SetQueryParam("normalizedPackageName", qNormalizedPackageName); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.PackageNameQuery != nil {

		// query param packageNameQuery
		var qrPackageNameQuery string
		if o.PackageNameQuery != nil {
			qrPackageNameQuery = *o.PackageNameQuery
		}
		qPackageNameQuery := qrPackageNameQuery
		if qPackageNameQuery != "" {
			if err := r.SetQueryParam("packageNameQuery", qPackageNameQuery); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.ProtocolType != nil {

		// query param protocolType
		var qrProtocolType string
		if o.ProtocolType != nil {
			qrProtocolType = *o.ProtocolType
		}
		qProtocolType := qrProtocolType
		if qProtocolType != "" {
			if err := r.SetQueryParam("protocolType", qProtocolType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
