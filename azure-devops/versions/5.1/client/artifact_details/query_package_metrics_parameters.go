// Code generated by go-swagger; DO NOT EDIT.

package artifact_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "azure-devops/5.1/models"
)

// NewQueryPackageMetricsParams creates a new QueryPackageMetricsParams object
// with the default values initialized.
func NewQueryPackageMetricsParams() *QueryPackageMetricsParams {
	var ()
	return &QueryPackageMetricsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryPackageMetricsParamsWithTimeout creates a new QueryPackageMetricsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryPackageMetricsParamsWithTimeout(timeout time.Duration) *QueryPackageMetricsParams {
	var ()
	return &QueryPackageMetricsParams{

		timeout: timeout,
	}
}

// NewQueryPackageMetricsParamsWithContext creates a new QueryPackageMetricsParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryPackageMetricsParamsWithContext(ctx context.Context) *QueryPackageMetricsParams {
	var ()
	return &QueryPackageMetricsParams{

		Context: ctx,
	}
}

// NewQueryPackageMetricsParamsWithHTTPClient creates a new QueryPackageMetricsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryPackageMetricsParamsWithHTTPClient(client *http.Client) *QueryPackageMetricsParams {
	var ()
	return &QueryPackageMetricsParams{
		HTTPClient: client,
	}
}

/*QueryPackageMetricsParams contains all the parameters to send to the API endpoint
for the query package metrics operation typically these are written to a http.Request
*/
type QueryPackageMetricsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*Body*/
	Body *models.PackageMetricsQuery
	/*FeedID*/
	FeedID string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query package metrics params
func (o *QueryPackageMetricsParams) WithTimeout(timeout time.Duration) *QueryPackageMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query package metrics params
func (o *QueryPackageMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query package metrics params
func (o *QueryPackageMetricsParams) WithContext(ctx context.Context) *QueryPackageMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query package metrics params
func (o *QueryPackageMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query package metrics params
func (o *QueryPackageMetricsParams) WithHTTPClient(client *http.Client) *QueryPackageMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query package metrics params
func (o *QueryPackageMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the query package metrics params
func (o *QueryPackageMetricsParams) WithAPIVersion(aPIVersion string) *QueryPackageMetricsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the query package metrics params
func (o *QueryPackageMetricsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the query package metrics params
func (o *QueryPackageMetricsParams) WithBody(body *models.PackageMetricsQuery) *QueryPackageMetricsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the query package metrics params
func (o *QueryPackageMetricsParams) SetBody(body *models.PackageMetricsQuery) {
	o.Body = body
}

// WithFeedID adds the feedID to the query package metrics params
func (o *QueryPackageMetricsParams) WithFeedID(feedID string) *QueryPackageMetricsParams {
	o.SetFeedID(feedID)
	return o
}

// SetFeedID adds the feedId to the query package metrics params
func (o *QueryPackageMetricsParams) SetFeedID(feedID string) {
	o.FeedID = feedID
}

// WithOrganization adds the organization to the query package metrics params
func (o *QueryPackageMetricsParams) WithOrganization(organization string) *QueryPackageMetricsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the query package metrics params
func (o *QueryPackageMetricsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the query package metrics params
func (o *QueryPackageMetricsParams) WithProject(project string) *QueryPackageMetricsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the query package metrics params
func (o *QueryPackageMetricsParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *QueryPackageMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param feedId
	if err := r.SetPathParam("feedId", o.FeedID); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
