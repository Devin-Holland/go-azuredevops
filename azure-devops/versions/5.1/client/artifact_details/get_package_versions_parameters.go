// Code generated by go-swagger; DO NOT EDIT.

package artifact_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPackageVersionsParams creates a new GetPackageVersionsParams object
// with the default values initialized.
func NewGetPackageVersionsParams() *GetPackageVersionsParams {
	var ()
	return &GetPackageVersionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPackageVersionsParamsWithTimeout creates a new GetPackageVersionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPackageVersionsParamsWithTimeout(timeout time.Duration) *GetPackageVersionsParams {
	var ()
	return &GetPackageVersionsParams{

		timeout: timeout,
	}
}

// NewGetPackageVersionsParamsWithContext creates a new GetPackageVersionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPackageVersionsParamsWithContext(ctx context.Context) *GetPackageVersionsParams {
	var ()
	return &GetPackageVersionsParams{

		Context: ctx,
	}
}

// NewGetPackageVersionsParamsWithHTTPClient creates a new GetPackageVersionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPackageVersionsParamsWithHTTPClient(client *http.Client) *GetPackageVersionsParams {
	var ()
	return &GetPackageVersionsParams{
		HTTPClient: client,
	}
}

/*GetPackageVersionsParams contains all the parameters to send to the API endpoint
for the get package versions operation typically these are written to a http.Request
*/
type GetPackageVersionsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*FeedID
	  Name or Id of the feed.

	*/
	FeedID string
	/*IncludeUrls
	  True to include urls for each version. Default is true.

	*/
	IncludeUrls *bool
	/*IsDeleted
	  If set specifies whether to return only deleted or non-deleted versions of packages in the response. Default is unset (return all versions).

	*/
	IsDeleted *bool
	/*IsListed
	  Only applicable for NuGet packages. If false, delisted package versions will be returned.

	*/
	IsListed *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PackageID
	  Id of the package (GUID Id, not name).

	*/
	PackageID string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get package versions params
func (o *GetPackageVersionsParams) WithTimeout(timeout time.Duration) *GetPackageVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get package versions params
func (o *GetPackageVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get package versions params
func (o *GetPackageVersionsParams) WithContext(ctx context.Context) *GetPackageVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get package versions params
func (o *GetPackageVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get package versions params
func (o *GetPackageVersionsParams) WithHTTPClient(client *http.Client) *GetPackageVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get package versions params
func (o *GetPackageVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get package versions params
func (o *GetPackageVersionsParams) WithAPIVersion(aPIVersion string) *GetPackageVersionsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get package versions params
func (o *GetPackageVersionsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithFeedID adds the feedID to the get package versions params
func (o *GetPackageVersionsParams) WithFeedID(feedID string) *GetPackageVersionsParams {
	o.SetFeedID(feedID)
	return o
}

// SetFeedID adds the feedId to the get package versions params
func (o *GetPackageVersionsParams) SetFeedID(feedID string) {
	o.FeedID = feedID
}

// WithIncludeUrls adds the includeUrls to the get package versions params
func (o *GetPackageVersionsParams) WithIncludeUrls(includeUrls *bool) *GetPackageVersionsParams {
	o.SetIncludeUrls(includeUrls)
	return o
}

// SetIncludeUrls adds the includeUrls to the get package versions params
func (o *GetPackageVersionsParams) SetIncludeUrls(includeUrls *bool) {
	o.IncludeUrls = includeUrls
}

// WithIsDeleted adds the isDeleted to the get package versions params
func (o *GetPackageVersionsParams) WithIsDeleted(isDeleted *bool) *GetPackageVersionsParams {
	o.SetIsDeleted(isDeleted)
	return o
}

// SetIsDeleted adds the isDeleted to the get package versions params
func (o *GetPackageVersionsParams) SetIsDeleted(isDeleted *bool) {
	o.IsDeleted = isDeleted
}

// WithIsListed adds the isListed to the get package versions params
func (o *GetPackageVersionsParams) WithIsListed(isListed *bool) *GetPackageVersionsParams {
	o.SetIsListed(isListed)
	return o
}

// SetIsListed adds the isListed to the get package versions params
func (o *GetPackageVersionsParams) SetIsListed(isListed *bool) {
	o.IsListed = isListed
}

// WithOrganization adds the organization to the get package versions params
func (o *GetPackageVersionsParams) WithOrganization(organization string) *GetPackageVersionsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get package versions params
func (o *GetPackageVersionsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPackageID adds the packageID to the get package versions params
func (o *GetPackageVersionsParams) WithPackageID(packageID string) *GetPackageVersionsParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the get package versions params
func (o *GetPackageVersionsParams) SetPackageID(packageID string) {
	o.PackageID = packageID
}

// WithProject adds the project to the get package versions params
func (o *GetPackageVersionsParams) WithProject(project string) *GetPackageVersionsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get package versions params
func (o *GetPackageVersionsParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *GetPackageVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param feedId
	if err := r.SetPathParam("feedId", o.FeedID); err != nil {
		return err
	}

	if o.IncludeUrls != nil {

		// query param includeUrls
		var qrIncludeUrls bool
		if o.IncludeUrls != nil {
			qrIncludeUrls = *o.IncludeUrls
		}
		qIncludeUrls := swag.FormatBool(qrIncludeUrls)
		if qIncludeUrls != "" {
			if err := r.SetQueryParam("includeUrls", qIncludeUrls); err != nil {
				return err
			}
		}

	}

	if o.IsDeleted != nil {

		// query param isDeleted
		var qrIsDeleted bool
		if o.IsDeleted != nil {
			qrIsDeleted = *o.IsDeleted
		}
		qIsDeleted := swag.FormatBool(qrIsDeleted)
		if qIsDeleted != "" {
			if err := r.SetQueryParam("isDeleted", qIsDeleted); err != nil {
				return err
			}
		}

	}

	if o.IsListed != nil {

		// query param isListed
		var qrIsListed bool
		if o.IsListed != nil {
			qrIsListed = *o.IsListed
		}
		qIsListed := swag.FormatBool(qrIsListed)
		if qIsListed != "" {
			if err := r.SetQueryParam("isListed", qIsListed); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param packageId
	if err := r.SetPathParam("packageId", o.PackageID); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
