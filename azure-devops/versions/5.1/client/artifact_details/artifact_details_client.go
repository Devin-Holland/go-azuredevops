// Code generated by go-swagger; DO NOT EDIT.

package artifact_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new artifact details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for artifact details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBadge Generate a SVG badge for the latest version of a package.  The generated SVG is typically used as the image in an HTML link which takes users to the feed containing the package to accelerate discovery and consumption.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetBadge(params *GetBadgeParams, authInfo runtime.ClientAuthInfoWriter) (*GetBadgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBadgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Badge",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/public/packaging/Feeds/{feedId}/Packages/{packageId}/badge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBadgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBadgeOK), nil

}

/*
GetPackage Get details about a specific package.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackage(params *GetPackageParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packages/{packageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageOK), nil

}

/*
GetPackageVersion Get details about a specific package version.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersion(params *GetPackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package Version",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions/{packageVersionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionOK), nil

}

/*
GetPackageVersions Get a list of package versions, optionally filtering by state.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersions(params *GetPackageVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package Versions",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionsOK), nil

}

/*
GetPackages Get details about all of the packages in the feed. Use the various filters to include or exclude information from the result set.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackages(params *GetPackagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Packages",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackagesOK), nil

}

/*
GetPackageVersionProvenance Gets provenance for a package version.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersionProvenance(params *GetPackageVersionProvenanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionProvenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionProvenanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPackageVersionProvenance",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/Versions/{packageVersionId}/provenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionProvenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionProvenanceOK), nil

}

/*
QueryPackageMetrics query package metrics API
*/
func (a *Client) QueryPackageMetrics(params *QueryPackageMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryPackageMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryPackageMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Query Package Metrics",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packagemetricsbatch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryPackageMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryPackageMetricsOK), nil

}

/*
QueryPackageVersionMetrics query package version metrics API
*/
func (a *Client) QueryPackageVersionMetrics(params *QueryPackageVersionMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryPackageVersionMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryPackageVersionMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Query Package Version Metrics",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/Packages/{packageId}/versionmetricsbatch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryPackageVersionMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryPackageVersionMetricsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
