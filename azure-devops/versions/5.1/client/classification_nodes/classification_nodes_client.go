// Code generated by go-swagger; DO NOT EDIT.

package classification_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new classification nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for classification nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateOrUpdate Create new or update an existing classification node.
*/
func (a *Client) CreateOrUpdate(params *CreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create Or Update",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrUpdateOK), nil

}

/*
GetRootNodes Gets root classification nodes under the project.
*/
func (a *Client) GetRootNodes(params *GetRootNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRootNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Root Nodes",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/wit/classificationnodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRootNodesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
