// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadChunkParams creates a new UploadChunkParams object
// with the default values initialized.
func NewUploadChunkParams() *UploadChunkParams {
	var ()
	return &UploadChunkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadChunkParamsWithTimeout creates a new UploadChunkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadChunkParamsWithTimeout(timeout time.Duration) *UploadChunkParams {
	var ()
	return &UploadChunkParams{

		timeout: timeout,
	}
}

// NewUploadChunkParamsWithContext creates a new UploadChunkParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadChunkParamsWithContext(ctx context.Context) *UploadChunkParams {
	var ()
	return &UploadChunkParams{

		Context: ctx,
	}
}

// NewUploadChunkParamsWithHTTPClient creates a new UploadChunkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadChunkParamsWithHTTPClient(client *http.Client) *UploadChunkParams {
	var ()
	return &UploadChunkParams{
		HTTPClient: client,
	}
}

/*UploadChunkParams contains all the parameters to send to the API endpoint
for the upload chunk operation typically these are written to a http.Request
*/
type UploadChunkParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.3' to use this version of the api.

	*/
	APIVersion string
	/*Body
	  Stream to upload

	*/
	Body string
	/*ContentRangeHeader
	  starting and ending byte positions for chunked file upload, format is "Content-Range": "bytes 0-10000/50000"

	*/
	ContentRangeHeader string
	/*FileName*/
	FileName *string
	/*ID
	  The id of the attachment

	*/
	ID strfmt.UUID
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload chunk params
func (o *UploadChunkParams) WithTimeout(timeout time.Duration) *UploadChunkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload chunk params
func (o *UploadChunkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload chunk params
func (o *UploadChunkParams) WithContext(ctx context.Context) *UploadChunkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload chunk params
func (o *UploadChunkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload chunk params
func (o *UploadChunkParams) WithHTTPClient(client *http.Client) *UploadChunkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload chunk params
func (o *UploadChunkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the upload chunk params
func (o *UploadChunkParams) WithAPIVersion(aPIVersion string) *UploadChunkParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the upload chunk params
func (o *UploadChunkParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the upload chunk params
func (o *UploadChunkParams) WithBody(body string) *UploadChunkParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload chunk params
func (o *UploadChunkParams) SetBody(body string) {
	o.Body = body
}

// WithContentRangeHeader adds the contentRangeHeader to the upload chunk params
func (o *UploadChunkParams) WithContentRangeHeader(contentRangeHeader string) *UploadChunkParams {
	o.SetContentRangeHeader(contentRangeHeader)
	return o
}

// SetContentRangeHeader adds the contentRangeHeader to the upload chunk params
func (o *UploadChunkParams) SetContentRangeHeader(contentRangeHeader string) {
	o.ContentRangeHeader = contentRangeHeader
}

// WithFileName adds the fileName to the upload chunk params
func (o *UploadChunkParams) WithFileName(fileName *string) *UploadChunkParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the upload chunk params
func (o *UploadChunkParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WithID adds the id to the upload chunk params
func (o *UploadChunkParams) WithID(id strfmt.UUID) *UploadChunkParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the upload chunk params
func (o *UploadChunkParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithOrganization adds the organization to the upload chunk params
func (o *UploadChunkParams) WithOrganization(organization string) *UploadChunkParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the upload chunk params
func (o *UploadChunkParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the upload chunk params
func (o *UploadChunkParams) WithProject(project string) *UploadChunkParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the upload chunk params
func (o *UploadChunkParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *UploadChunkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// header param contentRangeHeader
	if err := r.SetHeaderParam("contentRangeHeader", o.ContentRangeHeader); err != nil {
		return err
	}

	if o.FileName != nil {

		// query param fileName
		var qrFileName string
		if o.FileName != nil {
			qrFileName = *o.FileName
		}
		qFileName := qrFileName
		if qFileName != "" {
			if err := r.SetQueryParam("fileName", qFileName); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
