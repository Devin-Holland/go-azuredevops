// Code generated by go-swagger; DO NOT EDIT.

package reporting_work_item_revisions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadReportingRevisionsGetParams creates a new ReadReportingRevisionsGetParams object
// with the default values initialized.
func NewReadReportingRevisionsGetParams() *ReadReportingRevisionsGetParams {
	var ()
	return &ReadReportingRevisionsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadReportingRevisionsGetParamsWithTimeout creates a new ReadReportingRevisionsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadReportingRevisionsGetParamsWithTimeout(timeout time.Duration) *ReadReportingRevisionsGetParams {
	var ()
	return &ReadReportingRevisionsGetParams{

		timeout: timeout,
	}
}

// NewReadReportingRevisionsGetParamsWithContext creates a new ReadReportingRevisionsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadReportingRevisionsGetParamsWithContext(ctx context.Context) *ReadReportingRevisionsGetParams {
	var ()
	return &ReadReportingRevisionsGetParams{

		Context: ctx,
	}
}

// NewReadReportingRevisionsGetParamsWithHTTPClient creates a new ReadReportingRevisionsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadReportingRevisionsGetParamsWithHTTPClient(client *http.Client) *ReadReportingRevisionsGetParams {
	var ()
	return &ReadReportingRevisionsGetParams{
		HTTPClient: client,
	}
}

/*ReadReportingRevisionsGetParams contains all the parameters to send to the API endpoint
for the read reporting revisions get operation typically these are written to a http.Request
*/
type ReadReportingRevisionsGetParams struct {

	/*NrDollarExpand
	  Return all the fields in work item revisions, including long text fields which are not returned by default

	*/
	DollarExpand *string
	/*NrDollarMaxPageSize
	  The maximum number of results to return in this batch

	*/
	DollarMaxPageSize *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*ContinuationToken
	  Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.

	*/
	ContinuationToken *string
	/*Fields
	  A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.

	*/
	Fields *string
	/*IncludeDeleted
	  Specify if the deleted item should be returned.

	*/
	IncludeDeleted *bool
	/*IncludeDiscussionChangesOnly
	  Return only the those revisions of work items, where only history field was changed

	*/
	IncludeDiscussionChangesOnly *bool
	/*IncludeIdentityRef
	  Return an identity reference instead of a string value for identity fields.

	*/
	IncludeIdentityRef *bool
	/*IncludeLatestOnly
	  Return only the latest revisions of work items, skipping all historical revisions

	*/
	IncludeLatestOnly *bool
	/*IncludeTagRef
	  Specify if the tag objects should be returned for System.Tags field.

	*/
	IncludeTagRef *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*StartDateTime
	  Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.

	*/
	StartDateTime *strfmt.DateTime
	/*Types
	  A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.

	*/
	Types *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithTimeout(timeout time.Duration) *ReadReportingRevisionsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithContext(ctx context.Context) *ReadReportingRevisionsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithHTTPClient(client *http.Client) *ReadReportingRevisionsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarExpand adds the dollarExpand to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithDollarExpand(dollarExpand *string) *ReadReportingRevisionsGetParams {
	o.SetDollarExpand(dollarExpand)
	return o
}

// SetDollarExpand adds the dollarExpand to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetDollarExpand(dollarExpand *string) {
	o.DollarExpand = dollarExpand
}

// WithDollarMaxPageSize adds the dollarMaxPageSize to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithDollarMaxPageSize(dollarMaxPageSize *int32) *ReadReportingRevisionsGetParams {
	o.SetDollarMaxPageSize(dollarMaxPageSize)
	return o
}

// SetDollarMaxPageSize adds the dollarMaxPageSize to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetDollarMaxPageSize(dollarMaxPageSize *int32) {
	o.DollarMaxPageSize = dollarMaxPageSize
}

// WithAPIVersion adds the aPIVersion to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithAPIVersion(aPIVersion string) *ReadReportingRevisionsGetParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithContinuationToken adds the continuationToken to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithContinuationToken(continuationToken *string) *ReadReportingRevisionsGetParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetContinuationToken(continuationToken *string) {
	o.ContinuationToken = continuationToken
}

// WithFields adds the fields to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithFields(fields *string) *ReadReportingRevisionsGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithIncludeDeleted adds the includeDeleted to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithIncludeDeleted(includeDeleted *bool) *ReadReportingRevisionsGetParams {
	o.SetIncludeDeleted(includeDeleted)
	return o
}

// SetIncludeDeleted adds the includeDeleted to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetIncludeDeleted(includeDeleted *bool) {
	o.IncludeDeleted = includeDeleted
}

// WithIncludeDiscussionChangesOnly adds the includeDiscussionChangesOnly to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithIncludeDiscussionChangesOnly(includeDiscussionChangesOnly *bool) *ReadReportingRevisionsGetParams {
	o.SetIncludeDiscussionChangesOnly(includeDiscussionChangesOnly)
	return o
}

// SetIncludeDiscussionChangesOnly adds the includeDiscussionChangesOnly to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetIncludeDiscussionChangesOnly(includeDiscussionChangesOnly *bool) {
	o.IncludeDiscussionChangesOnly = includeDiscussionChangesOnly
}

// WithIncludeIdentityRef adds the includeIdentityRef to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithIncludeIdentityRef(includeIdentityRef *bool) *ReadReportingRevisionsGetParams {
	o.SetIncludeIdentityRef(includeIdentityRef)
	return o
}

// SetIncludeIdentityRef adds the includeIdentityRef to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetIncludeIdentityRef(includeIdentityRef *bool) {
	o.IncludeIdentityRef = includeIdentityRef
}

// WithIncludeLatestOnly adds the includeLatestOnly to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithIncludeLatestOnly(includeLatestOnly *bool) *ReadReportingRevisionsGetParams {
	o.SetIncludeLatestOnly(includeLatestOnly)
	return o
}

// SetIncludeLatestOnly adds the includeLatestOnly to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetIncludeLatestOnly(includeLatestOnly *bool) {
	o.IncludeLatestOnly = includeLatestOnly
}

// WithIncludeTagRef adds the includeTagRef to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithIncludeTagRef(includeTagRef *bool) *ReadReportingRevisionsGetParams {
	o.SetIncludeTagRef(includeTagRef)
	return o
}

// SetIncludeTagRef adds the includeTagRef to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetIncludeTagRef(includeTagRef *bool) {
	o.IncludeTagRef = includeTagRef
}

// WithOrganization adds the organization to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithOrganization(organization string) *ReadReportingRevisionsGetParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithProject(project string) *ReadReportingRevisionsGetParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetProject(project string) {
	o.Project = project
}

// WithStartDateTime adds the startDateTime to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithStartDateTime(startDateTime *strfmt.DateTime) *ReadReportingRevisionsGetParams {
	o.SetStartDateTime(startDateTime)
	return o
}

// SetStartDateTime adds the startDateTime to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetStartDateTime(startDateTime *strfmt.DateTime) {
	o.StartDateTime = startDateTime
}

// WithTypes adds the types to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) WithTypes(types *string) *ReadReportingRevisionsGetParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the read reporting revisions get params
func (o *ReadReportingRevisionsGetParams) SetTypes(types *string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *ReadReportingRevisionsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarExpand != nil {

		// query param $expand
		var qrNrDollarExpand string
		if o.DollarExpand != nil {
			qrNrDollarExpand = *o.DollarExpand
		}
		qNrDollarExpand := qrNrDollarExpand
		if qNrDollarExpand != "" {
			if err := r.SetQueryParam("$expand", qNrDollarExpand); err != nil {
				return err
			}
		}

	}

	if o.DollarMaxPageSize != nil {

		// query param $maxPageSize
		var qrNrDollarMaxPageSize int32
		if o.DollarMaxPageSize != nil {
			qrNrDollarMaxPageSize = *o.DollarMaxPageSize
		}
		qNrDollarMaxPageSize := swag.FormatInt32(qrNrDollarMaxPageSize)
		if qNrDollarMaxPageSize != "" {
			if err := r.SetQueryParam("$maxPageSize", qNrDollarMaxPageSize); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken string
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.IncludeDeleted != nil {

		// query param includeDeleted
		var qrIncludeDeleted bool
		if o.IncludeDeleted != nil {
			qrIncludeDeleted = *o.IncludeDeleted
		}
		qIncludeDeleted := swag.FormatBool(qrIncludeDeleted)
		if qIncludeDeleted != "" {
			if err := r.SetQueryParam("includeDeleted", qIncludeDeleted); err != nil {
				return err
			}
		}

	}

	if o.IncludeDiscussionChangesOnly != nil {

		// query param includeDiscussionChangesOnly
		var qrIncludeDiscussionChangesOnly bool
		if o.IncludeDiscussionChangesOnly != nil {
			qrIncludeDiscussionChangesOnly = *o.IncludeDiscussionChangesOnly
		}
		qIncludeDiscussionChangesOnly := swag.FormatBool(qrIncludeDiscussionChangesOnly)
		if qIncludeDiscussionChangesOnly != "" {
			if err := r.SetQueryParam("includeDiscussionChangesOnly", qIncludeDiscussionChangesOnly); err != nil {
				return err
			}
		}

	}

	if o.IncludeIdentityRef != nil {

		// query param includeIdentityRef
		var qrIncludeIdentityRef bool
		if o.IncludeIdentityRef != nil {
			qrIncludeIdentityRef = *o.IncludeIdentityRef
		}
		qIncludeIdentityRef := swag.FormatBool(qrIncludeIdentityRef)
		if qIncludeIdentityRef != "" {
			if err := r.SetQueryParam("includeIdentityRef", qIncludeIdentityRef); err != nil {
				return err
			}
		}

	}

	if o.IncludeLatestOnly != nil {

		// query param includeLatestOnly
		var qrIncludeLatestOnly bool
		if o.IncludeLatestOnly != nil {
			qrIncludeLatestOnly = *o.IncludeLatestOnly
		}
		qIncludeLatestOnly := swag.FormatBool(qrIncludeLatestOnly)
		if qIncludeLatestOnly != "" {
			if err := r.SetQueryParam("includeLatestOnly", qIncludeLatestOnly); err != nil {
				return err
			}
		}

	}

	if o.IncludeTagRef != nil {

		// query param includeTagRef
		var qrIncludeTagRef bool
		if o.IncludeTagRef != nil {
			qrIncludeTagRef = *o.IncludeTagRef
		}
		qIncludeTagRef := swag.FormatBool(qrIncludeTagRef)
		if qIncludeTagRef != "" {
			if err := r.SetQueryParam("includeTagRef", qIncludeTagRef); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.StartDateTime != nil {

		// query param startDateTime
		var qrStartDateTime strfmt.DateTime
		if o.StartDateTime != nil {
			qrStartDateTime = *o.StartDateTime
		}
		qStartDateTime := qrStartDateTime.String()
		if qStartDateTime != "" {
			if err := r.SetQueryParam("startDateTime", qStartDateTime); err != nil {
				return err
			}
		}

	}

	if o.Types != nil {

		// query param types
		var qrTypes string
		if o.Types != nil {
			qrTypes = *o.Types
		}
		qTypes := qrTypes
		if qTypes != "" {
			if err := r.SetQueryParam("types", qTypes); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
