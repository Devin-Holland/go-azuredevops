// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListParams creates a new ListParams object
// with the default values initialized.
func NewListParams() *ListParams {
	var ()
	return &ListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListParamsWithTimeout creates a new ListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListParamsWithTimeout(timeout time.Duration) *ListParams {
	var ()
	return &ListParams{

		timeout: timeout,
	}
}

// NewListParamsWithContext creates a new ListParams object
// with the default values initialized, and the ability to set a context for a request
func NewListParamsWithContext(ctx context.Context) *ListParams {
	var ()
	return &ListParams{

		Context: ctx,
	}
}

// NewListParamsWithHTTPClient creates a new ListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListParamsWithHTTPClient(client *http.Client) *ListParams {
	var ()
	return &ListParams{
		HTTPClient: client,
	}
}

/*ListParams contains all the parameters to send to the API endpoint
for the list operation typically these are written to a http.Request
*/
type ListParams struct {

	/*AllSessions
	  If false, returns test sessions for current user. Otherwise, it returns test sessions for all users

	*/
	AllSessions *bool
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*IncludeAllProperties
	  If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version.

	*/
	IncludeAllProperties *bool
	/*IncludeOnlyCompletedSessions
	  If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states

	*/
	IncludeOnlyCompletedSessions *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Period
	  Period in days from now, for which test sessions are fetched.

	*/
	Period *int32
	/*Project
	  Project ID or project name

	*/
	Project string
	/*Source
	  Source of the test session.

	*/
	Source *string
	/*Team
	  Team ID or team name

	*/
	Team string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list params
func (o *ListParams) WithTimeout(timeout time.Duration) *ListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list params
func (o *ListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list params
func (o *ListParams) WithContext(ctx context.Context) *ListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list params
func (o *ListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list params
func (o *ListParams) WithHTTPClient(client *http.Client) *ListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list params
func (o *ListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllSessions adds the allSessions to the list params
func (o *ListParams) WithAllSessions(allSessions *bool) *ListParams {
	o.SetAllSessions(allSessions)
	return o
}

// SetAllSessions adds the allSessions to the list params
func (o *ListParams) SetAllSessions(allSessions *bool) {
	o.AllSessions = allSessions
}

// WithAPIVersion adds the aPIVersion to the list params
func (o *ListParams) WithAPIVersion(aPIVersion string) *ListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the list params
func (o *ListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithIncludeAllProperties adds the includeAllProperties to the list params
func (o *ListParams) WithIncludeAllProperties(includeAllProperties *bool) *ListParams {
	o.SetIncludeAllProperties(includeAllProperties)
	return o
}

// SetIncludeAllProperties adds the includeAllProperties to the list params
func (o *ListParams) SetIncludeAllProperties(includeAllProperties *bool) {
	o.IncludeAllProperties = includeAllProperties
}

// WithIncludeOnlyCompletedSessions adds the includeOnlyCompletedSessions to the list params
func (o *ListParams) WithIncludeOnlyCompletedSessions(includeOnlyCompletedSessions *bool) *ListParams {
	o.SetIncludeOnlyCompletedSessions(includeOnlyCompletedSessions)
	return o
}

// SetIncludeOnlyCompletedSessions adds the includeOnlyCompletedSessions to the list params
func (o *ListParams) SetIncludeOnlyCompletedSessions(includeOnlyCompletedSessions *bool) {
	o.IncludeOnlyCompletedSessions = includeOnlyCompletedSessions
}

// WithOrganization adds the organization to the list params
func (o *ListParams) WithOrganization(organization string) *ListParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the list params
func (o *ListParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPeriod adds the period to the list params
func (o *ListParams) WithPeriod(period *int32) *ListParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the list params
func (o *ListParams) SetPeriod(period *int32) {
	o.Period = period
}

// WithProject adds the project to the list params
func (o *ListParams) WithProject(project string) *ListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the list params
func (o *ListParams) SetProject(project string) {
	o.Project = project
}

// WithSource adds the source to the list params
func (o *ListParams) WithSource(source *string) *ListParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the list params
func (o *ListParams) SetSource(source *string) {
	o.Source = source
}

// WithTeam adds the team to the list params
func (o *ListParams) WithTeam(team string) *ListParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the list params
func (o *ListParams) SetTeam(team string) {
	o.Team = team
}

// WriteToRequest writes these params to a swagger request
func (o *ListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllSessions != nil {

		// query param allSessions
		var qrAllSessions bool
		if o.AllSessions != nil {
			qrAllSessions = *o.AllSessions
		}
		qAllSessions := swag.FormatBool(qrAllSessions)
		if qAllSessions != "" {
			if err := r.SetQueryParam("allSessions", qAllSessions); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.IncludeAllProperties != nil {

		// query param includeAllProperties
		var qrIncludeAllProperties bool
		if o.IncludeAllProperties != nil {
			qrIncludeAllProperties = *o.IncludeAllProperties
		}
		qIncludeAllProperties := swag.FormatBool(qrIncludeAllProperties)
		if qIncludeAllProperties != "" {
			if err := r.SetQueryParam("includeAllProperties", qIncludeAllProperties); err != nil {
				return err
			}
		}

	}

	if o.IncludeOnlyCompletedSessions != nil {

		// query param includeOnlyCompletedSessions
		var qrIncludeOnlyCompletedSessions bool
		if o.IncludeOnlyCompletedSessions != nil {
			qrIncludeOnlyCompletedSessions = *o.IncludeOnlyCompletedSessions
		}
		qIncludeOnlyCompletedSessions := swag.FormatBool(qrIncludeOnlyCompletedSessions)
		if qIncludeOnlyCompletedSessions != "" {
			if err := r.SetQueryParam("includeOnlyCompletedSessions", qIncludeOnlyCompletedSessions); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.Period != nil {

		// query param period
		var qrPeriod int32
		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatInt32(qrPeriod)
		if qPeriod != "" {
			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.Source != nil {

		// query param source
		var qrSource string
		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {
			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
