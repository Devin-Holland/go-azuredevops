// Code generated by go-swagger; DO NOT EDIT.

package installed_extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUninstallExtensionByNameParams creates a new UninstallExtensionByNameParams object
// with the default values initialized.
func NewUninstallExtensionByNameParams() *UninstallExtensionByNameParams {
	var ()
	return &UninstallExtensionByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUninstallExtensionByNameParamsWithTimeout creates a new UninstallExtensionByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUninstallExtensionByNameParamsWithTimeout(timeout time.Duration) *UninstallExtensionByNameParams {
	var ()
	return &UninstallExtensionByNameParams{

		timeout: timeout,
	}
}

// NewUninstallExtensionByNameParamsWithContext creates a new UninstallExtensionByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewUninstallExtensionByNameParamsWithContext(ctx context.Context) *UninstallExtensionByNameParams {
	var ()
	return &UninstallExtensionByNameParams{

		Context: ctx,
	}
}

// NewUninstallExtensionByNameParamsWithHTTPClient creates a new UninstallExtensionByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUninstallExtensionByNameParamsWithHTTPClient(client *http.Client) *UninstallExtensionByNameParams {
	var ()
	return &UninstallExtensionByNameParams{
		HTTPClient: client,
	}
}

/*UninstallExtensionByNameParams contains all the parameters to send to the API endpoint
for the uninstall extension by name operation typically these are written to a http.Request
*/
type UninstallExtensionByNameParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*ExtensionName
	  Name of the extension. Example: "ops-tools".

	*/
	ExtensionName string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*PublisherName
	  Name of the publisher. Example: "fabrikam".

	*/
	PublisherName string
	/*Reason*/
	Reason *string
	/*ReasonCode*/
	ReasonCode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithTimeout(timeout time.Duration) *UninstallExtensionByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithContext(ctx context.Context) *UninstallExtensionByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithHTTPClient(client *http.Client) *UninstallExtensionByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithAPIVersion(aPIVersion string) *UninstallExtensionByNameParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithExtensionName adds the extensionName to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithExtensionName(extensionName string) *UninstallExtensionByNameParams {
	o.SetExtensionName(extensionName)
	return o
}

// SetExtensionName adds the extensionName to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetExtensionName(extensionName string) {
	o.ExtensionName = extensionName
}

// WithOrganization adds the organization to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithOrganization(organization string) *UninstallExtensionByNameParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPublisherName adds the publisherName to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithPublisherName(publisherName string) *UninstallExtensionByNameParams {
	o.SetPublisherName(publisherName)
	return o
}

// SetPublisherName adds the publisherName to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetPublisherName(publisherName string) {
	o.PublisherName = publisherName
}

// WithReason adds the reason to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithReason(reason *string) *UninstallExtensionByNameParams {
	o.SetReason(reason)
	return o
}

// SetReason adds the reason to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetReason(reason *string) {
	o.Reason = reason
}

// WithReasonCode adds the reasonCode to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) WithReasonCode(reasonCode *string) *UninstallExtensionByNameParams {
	o.SetReasonCode(reasonCode)
	return o
}

// SetReasonCode adds the reasonCode to the uninstall extension by name params
func (o *UninstallExtensionByNameParams) SetReasonCode(reasonCode *string) {
	o.ReasonCode = reasonCode
}

// WriteToRequest writes these params to a swagger request
func (o *UninstallExtensionByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param extensionName
	if err := r.SetPathParam("extensionName", o.ExtensionName); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param publisherName
	if err := r.SetPathParam("publisherName", o.PublisherName); err != nil {
		return err
	}

	if o.Reason != nil {

		// query param reason
		var qrReason string
		if o.Reason != nil {
			qrReason = *o.Reason
		}
		qReason := qrReason
		if qReason != "" {
			if err := r.SetQueryParam("reason", qReason); err != nil {
				return err
			}
		}

	}

	if o.ReasonCode != nil {

		// query param reasonCode
		var qrReasonCode string
		if o.ReasonCode != nil {
			qrReasonCode = *o.ReasonCode
		}
		qReasonCode := qrReasonCode
		if qReasonCode != "" {
			if err := r.SetQueryParam("reasonCode", qReasonCode); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
