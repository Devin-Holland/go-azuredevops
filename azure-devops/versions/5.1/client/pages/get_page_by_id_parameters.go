// Code generated by go-swagger; DO NOT EDIT.

package pages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPageByIDParams creates a new GetPageByIDParams object
// with the default values initialized.
func NewGetPageByIDParams() *GetPageByIDParams {
	var ()
	return &GetPageByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPageByIDParamsWithTimeout creates a new GetPageByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPageByIDParamsWithTimeout(timeout time.Duration) *GetPageByIDParams {
	var ()
	return &GetPageByIDParams{

		timeout: timeout,
	}
}

// NewGetPageByIDParamsWithContext creates a new GetPageByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPageByIDParamsWithContext(ctx context.Context) *GetPageByIDParams {
	var ()
	return &GetPageByIDParams{

		Context: ctx,
	}
}

// NewGetPageByIDParamsWithHTTPClient creates a new GetPageByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPageByIDParamsWithHTTPClient(client *http.Client) *GetPageByIDParams {
	var ()
	return &GetPageByIDParams{
		HTTPClient: client,
	}
}

/*GetPageByIDParams contains all the parameters to send to the API endpoint
for the get page by Id operation typically these are written to a http.Request
*/
type GetPageByIDParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*ID
	  Wiki page id.

	*/
	ID int32
	/*IncludeContent
	  True to include the content of the page in the response for Json content type. Defaults to false (Optional)

	*/
	IncludeContent *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*RecursionLevel
	  Recursion level for subpages retrieval. Defaults to `None` (Optional).

	*/
	RecursionLevel *string
	/*WikiIdentifier
	  Wiki Id or name.

	*/
	WikiIdentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get page by Id params
func (o *GetPageByIDParams) WithTimeout(timeout time.Duration) *GetPageByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get page by Id params
func (o *GetPageByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get page by Id params
func (o *GetPageByIDParams) WithContext(ctx context.Context) *GetPageByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get page by Id params
func (o *GetPageByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get page by Id params
func (o *GetPageByIDParams) WithHTTPClient(client *http.Client) *GetPageByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get page by Id params
func (o *GetPageByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get page by Id params
func (o *GetPageByIDParams) WithAPIVersion(aPIVersion string) *GetPageByIDParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get page by Id params
func (o *GetPageByIDParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithID adds the id to the get page by Id params
func (o *GetPageByIDParams) WithID(id int32) *GetPageByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get page by Id params
func (o *GetPageByIDParams) SetID(id int32) {
	o.ID = id
}

// WithIncludeContent adds the includeContent to the get page by Id params
func (o *GetPageByIDParams) WithIncludeContent(includeContent *bool) *GetPageByIDParams {
	o.SetIncludeContent(includeContent)
	return o
}

// SetIncludeContent adds the includeContent to the get page by Id params
func (o *GetPageByIDParams) SetIncludeContent(includeContent *bool) {
	o.IncludeContent = includeContent
}

// WithOrganization adds the organization to the get page by Id params
func (o *GetPageByIDParams) WithOrganization(organization string) *GetPageByIDParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get page by Id params
func (o *GetPageByIDParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get page by Id params
func (o *GetPageByIDParams) WithProject(project string) *GetPageByIDParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get page by Id params
func (o *GetPageByIDParams) SetProject(project string) {
	o.Project = project
}

// WithRecursionLevel adds the recursionLevel to the get page by Id params
func (o *GetPageByIDParams) WithRecursionLevel(recursionLevel *string) *GetPageByIDParams {
	o.SetRecursionLevel(recursionLevel)
	return o
}

// SetRecursionLevel adds the recursionLevel to the get page by Id params
func (o *GetPageByIDParams) SetRecursionLevel(recursionLevel *string) {
	o.RecursionLevel = recursionLevel
}

// WithWikiIdentifier adds the wikiIdentifier to the get page by Id params
func (o *GetPageByIDParams) WithWikiIdentifier(wikiIdentifier string) *GetPageByIDParams {
	o.SetWikiIdentifier(wikiIdentifier)
	return o
}

// SetWikiIdentifier adds the wikiIdentifier to the get page by Id params
func (o *GetPageByIDParams) SetWikiIdentifier(wikiIdentifier string) {
	o.WikiIdentifier = wikiIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *GetPageByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.IncludeContent != nil {

		// query param includeContent
		var qrIncludeContent bool
		if o.IncludeContent != nil {
			qrIncludeContent = *o.IncludeContent
		}
		qIncludeContent := swag.FormatBool(qrIncludeContent)
		if qIncludeContent != "" {
			if err := r.SetQueryParam("includeContent", qIncludeContent); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.RecursionLevel != nil {

		// query param recursionLevel
		var qrRecursionLevel string
		if o.RecursionLevel != nil {
			qrRecursionLevel = *o.RecursionLevel
		}
		qRecursionLevel := qrRecursionLevel
		if qRecursionLevel != "" {
			if err := r.SetQueryParam("recursionLevel", qRecursionLevel); err != nil {
				return err
			}
		}

	}

	// path param wikiIdentifier
	if err := r.SetPathParam("wikiIdentifier", o.WikiIdentifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
