// Code generated by go-swagger; DO NOT EDIT.

package pages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeletePageByIDParams creates a new DeletePageByIDParams object
// with the default values initialized.
func NewDeletePageByIDParams() *DeletePageByIDParams {
	var ()
	return &DeletePageByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePageByIDParamsWithTimeout creates a new DeletePageByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePageByIDParamsWithTimeout(timeout time.Duration) *DeletePageByIDParams {
	var ()
	return &DeletePageByIDParams{

		timeout: timeout,
	}
}

// NewDeletePageByIDParamsWithContext creates a new DeletePageByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePageByIDParamsWithContext(ctx context.Context) *DeletePageByIDParams {
	var ()
	return &DeletePageByIDParams{

		Context: ctx,
	}
}

// NewDeletePageByIDParamsWithHTTPClient creates a new DeletePageByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePageByIDParamsWithHTTPClient(client *http.Client) *DeletePageByIDParams {
	var ()
	return &DeletePageByIDParams{
		HTTPClient: client,
	}
}

/*DeletePageByIDParams contains all the parameters to send to the API endpoint
for the delete page by Id operation typically these are written to a http.Request
*/
type DeletePageByIDParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*Comment
	  Comment to be associated with this page delete.

	*/
	Comment *string
	/*ID
	  Wiki page id.

	*/
	ID int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*WikiIdentifier
	  Wiki Id or name.

	*/
	WikiIdentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete page by Id params
func (o *DeletePageByIDParams) WithTimeout(timeout time.Duration) *DeletePageByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete page by Id params
func (o *DeletePageByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete page by Id params
func (o *DeletePageByIDParams) WithContext(ctx context.Context) *DeletePageByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete page by Id params
func (o *DeletePageByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete page by Id params
func (o *DeletePageByIDParams) WithHTTPClient(client *http.Client) *DeletePageByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete page by Id params
func (o *DeletePageByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the delete page by Id params
func (o *DeletePageByIDParams) WithAPIVersion(aPIVersion string) *DeletePageByIDParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the delete page by Id params
func (o *DeletePageByIDParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithComment adds the comment to the delete page by Id params
func (o *DeletePageByIDParams) WithComment(comment *string) *DeletePageByIDParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the delete page by Id params
func (o *DeletePageByIDParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithID adds the id to the delete page by Id params
func (o *DeletePageByIDParams) WithID(id int32) *DeletePageByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete page by Id params
func (o *DeletePageByIDParams) SetID(id int32) {
	o.ID = id
}

// WithOrganization adds the organization to the delete page by Id params
func (o *DeletePageByIDParams) WithOrganization(organization string) *DeletePageByIDParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the delete page by Id params
func (o *DeletePageByIDParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the delete page by Id params
func (o *DeletePageByIDParams) WithProject(project string) *DeletePageByIDParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the delete page by Id params
func (o *DeletePageByIDParams) SetProject(project string) {
	o.Project = project
}

// WithWikiIdentifier adds the wikiIdentifier to the delete page by Id params
func (o *DeletePageByIDParams) WithWikiIdentifier(wikiIdentifier string) *DeletePageByIDParams {
	o.SetWikiIdentifier(wikiIdentifier)
	return o
}

// SetWikiIdentifier adds the wikiIdentifier to the delete page by Id params
func (o *DeletePageByIDParams) SetWikiIdentifier(wikiIdentifier string) {
	o.WikiIdentifier = wikiIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePageByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param wikiIdentifier
	if err := r.SetPathParam("wikiIdentifier", o.WikiIdentifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
