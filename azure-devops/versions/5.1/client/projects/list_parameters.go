// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListParams creates a new ListParams object
// with the default values initialized.
func NewListParams() *ListParams {
	var ()
	return &ListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListParamsWithTimeout creates a new ListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListParamsWithTimeout(timeout time.Duration) *ListParams {
	var ()
	return &ListParams{

		timeout: timeout,
	}
}

// NewListParamsWithContext creates a new ListParams object
// with the default values initialized, and the ability to set a context for a request
func NewListParamsWithContext(ctx context.Context) *ListParams {
	var ()
	return &ListParams{

		Context: ctx,
	}
}

// NewListParamsWithHTTPClient creates a new ListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListParamsWithHTTPClient(client *http.Client) *ListParams {
	var ()
	return &ListParams{
		HTTPClient: client,
	}
}

/*ListParams contains all the parameters to send to the API endpoint
for the list operation typically these are written to a http.Request
*/
type ListParams struct {

	/*NrDollarSkip*/
	DollarSkip *int32
	/*NrDollarTop*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.4' to use this version of the api.

	*/
	APIVersion string
	/*ContinuationToken*/
	ContinuationToken *string
	/*GetDefaultTeamImageURL*/
	GetDefaultTeamImageURL *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*StateFilter
	  Filter on team projects in a specific team project state (default: WellFormed).

	*/
	StateFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list params
func (o *ListParams) WithTimeout(timeout time.Duration) *ListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list params
func (o *ListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list params
func (o *ListParams) WithContext(ctx context.Context) *ListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list params
func (o *ListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list params
func (o *ListParams) WithHTTPClient(client *http.Client) *ListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list params
func (o *ListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarSkip adds the dollarSkip to the list params
func (o *ListParams) WithDollarSkip(dollarSkip *int32) *ListParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the list params
func (o *ListParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the list params
func (o *ListParams) WithDollarTop(dollarTop *int32) *ListParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the list params
func (o *ListParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the list params
func (o *ListParams) WithAPIVersion(aPIVersion string) *ListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the list params
func (o *ListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithContinuationToken adds the continuationToken to the list params
func (o *ListParams) WithContinuationToken(continuationToken *string) *ListParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the list params
func (o *ListParams) SetContinuationToken(continuationToken *string) {
	o.ContinuationToken = continuationToken
}

// WithGetDefaultTeamImageURL adds the getDefaultTeamImageURL to the list params
func (o *ListParams) WithGetDefaultTeamImageURL(getDefaultTeamImageURL *bool) *ListParams {
	o.SetGetDefaultTeamImageURL(getDefaultTeamImageURL)
	return o
}

// SetGetDefaultTeamImageURL adds the getDefaultTeamImageUrl to the list params
func (o *ListParams) SetGetDefaultTeamImageURL(getDefaultTeamImageURL *bool) {
	o.GetDefaultTeamImageURL = getDefaultTeamImageURL
}

// WithOrganization adds the organization to the list params
func (o *ListParams) WithOrganization(organization string) *ListParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the list params
func (o *ListParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithStateFilter adds the stateFilter to the list params
func (o *ListParams) WithStateFilter(stateFilter *string) *ListParams {
	o.SetStateFilter(stateFilter)
	return o
}

// SetStateFilter adds the stateFilter to the list params
func (o *ListParams) SetStateFilter(stateFilter *string) {
	o.StateFilter = stateFilter
}

// WriteToRequest writes these params to a swagger request
func (o *ListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarSkip != nil {

		// query param $skip
		var qrNrDollarSkip int32
		if o.DollarSkip != nil {
			qrNrDollarSkip = *o.DollarSkip
		}
		qNrDollarSkip := swag.FormatInt32(qrNrDollarSkip)
		if qNrDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qNrDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken string
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.GetDefaultTeamImageURL != nil {

		// query param getDefaultTeamImageUrl
		var qrGetDefaultTeamImageURL bool
		if o.GetDefaultTeamImageURL != nil {
			qrGetDefaultTeamImageURL = *o.GetDefaultTeamImageURL
		}
		qGetDefaultTeamImageURL := swag.FormatBool(qrGetDefaultTeamImageURL)
		if qGetDefaultTeamImageURL != "" {
			if err := r.SetQueryParam("getDefaultTeamImageUrl", qGetDefaultTeamImageURL); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.StateFilter != nil {

		// query param stateFilter
		var qrStateFilter string
		if o.StateFilter != nil {
			qrStateFilter = *o.StateFilter
		}
		qStateFilter := qrStateFilter
		if qStateFilter != "" {
			if err := r.SetQueryParam("stateFilter", qStateFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
