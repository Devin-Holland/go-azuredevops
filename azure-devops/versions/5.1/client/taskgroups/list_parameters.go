// Code generated by go-swagger; DO NOT EDIT.

package taskgroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListParams creates a new ListParams object
// with the default values initialized.
func NewListParams() *ListParams {
	var ()
	return &ListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListParamsWithTimeout creates a new ListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListParamsWithTimeout(timeout time.Duration) *ListParams {
	var ()
	return &ListParams{

		timeout: timeout,
	}
}

// NewListParamsWithContext creates a new ListParams object
// with the default values initialized, and the ability to set a context for a request
func NewListParamsWithContext(ctx context.Context) *ListParams {
	var ()
	return &ListParams{

		Context: ctx,
	}
}

// NewListParamsWithHTTPClient creates a new ListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListParamsWithHTTPClient(client *http.Client) *ListParams {
	var ()
	return &ListParams{
		HTTPClient: client,
	}
}

/*ListParams contains all the parameters to send to the API endpoint
for the list operation typically these are written to a http.Request
*/
type ListParams struct {

	/*NrDollarTop
	  Number of task groups to get.

	*/
	DollarTop *int32
	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*ContinuationToken
	  Gets the task groups after the continuation token provided.

	*/
	ContinuationToken *strfmt.DateTime
	/*Deleted
	  'true'to include deleted task groups. Default is 'false'.

	*/
	Deleted *bool
	/*Expanded
	  'true' to recursively expand task groups. Default is 'false'.

	*/
	Expanded *bool
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*QueryOrder
	  Gets the results in the defined order. Default is 'CreatedOnDescending'.

	*/
	QueryOrder *string
	/*TaskGroupID
	  Id of the task group.

	*/
	TaskGroupID strfmt.UUID
	/*TaskIDFilter
	  Guid of the taskId to filter.

	*/
	TaskIDFilter *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list params
func (o *ListParams) WithTimeout(timeout time.Duration) *ListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list params
func (o *ListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list params
func (o *ListParams) WithContext(ctx context.Context) *ListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list params
func (o *ListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list params
func (o *ListParams) WithHTTPClient(client *http.Client) *ListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list params
func (o *ListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarTop adds the dollarTop to the list params
func (o *ListParams) WithDollarTop(dollarTop *int32) *ListParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the list params
func (o *ListParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the list params
func (o *ListParams) WithAPIVersion(aPIVersion string) *ListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the list params
func (o *ListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithContinuationToken adds the continuationToken to the list params
func (o *ListParams) WithContinuationToken(continuationToken *strfmt.DateTime) *ListParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the list params
func (o *ListParams) SetContinuationToken(continuationToken *strfmt.DateTime) {
	o.ContinuationToken = continuationToken
}

// WithDeleted adds the deleted to the list params
func (o *ListParams) WithDeleted(deleted *bool) *ListParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the list params
func (o *ListParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithExpanded adds the expanded to the list params
func (o *ListParams) WithExpanded(expanded *bool) *ListParams {
	o.SetExpanded(expanded)
	return o
}

// SetExpanded adds the expanded to the list params
func (o *ListParams) SetExpanded(expanded *bool) {
	o.Expanded = expanded
}

// WithOrganization adds the organization to the list params
func (o *ListParams) WithOrganization(organization string) *ListParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the list params
func (o *ListParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the list params
func (o *ListParams) WithProject(project string) *ListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the list params
func (o *ListParams) SetProject(project string) {
	o.Project = project
}

// WithQueryOrder adds the queryOrder to the list params
func (o *ListParams) WithQueryOrder(queryOrder *string) *ListParams {
	o.SetQueryOrder(queryOrder)
	return o
}

// SetQueryOrder adds the queryOrder to the list params
func (o *ListParams) SetQueryOrder(queryOrder *string) {
	o.QueryOrder = queryOrder
}

// WithTaskGroupID adds the taskGroupID to the list params
func (o *ListParams) WithTaskGroupID(taskGroupID strfmt.UUID) *ListParams {
	o.SetTaskGroupID(taskGroupID)
	return o
}

// SetTaskGroupID adds the taskGroupId to the list params
func (o *ListParams) SetTaskGroupID(taskGroupID strfmt.UUID) {
	o.TaskGroupID = taskGroupID
}

// WithTaskIDFilter adds the taskIDFilter to the list params
func (o *ListParams) WithTaskIDFilter(taskIDFilter *strfmt.UUID) *ListParams {
	o.SetTaskIDFilter(taskIDFilter)
	return o
}

// SetTaskIDFilter adds the taskIdFilter to the list params
func (o *ListParams) SetTaskIDFilter(taskIDFilter *strfmt.UUID) {
	o.TaskIDFilter = taskIDFilter
}

// WriteToRequest writes these params to a swagger request
func (o *ListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken strfmt.DateTime
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken.String()
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Expanded != nil {

		// query param expanded
		var qrExpanded bool
		if o.Expanded != nil {
			qrExpanded = *o.Expanded
		}
		qExpanded := swag.FormatBool(qrExpanded)
		if qExpanded != "" {
			if err := r.SetQueryParam("expanded", qExpanded); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.QueryOrder != nil {

		// query param queryOrder
		var qrQueryOrder string
		if o.QueryOrder != nil {
			qrQueryOrder = *o.QueryOrder
		}
		qQueryOrder := qrQueryOrder
		if qQueryOrder != "" {
			if err := r.SetQueryParam("queryOrder", qQueryOrder); err != nil {
				return err
			}
		}

	}

	// path param taskGroupId
	if err := r.SetPathParam("taskGroupId", o.TaskGroupID.String()); err != nil {
		return err
	}

	if o.TaskIDFilter != nil {

		// query param taskIdFilter
		var qrTaskIDFilter strfmt.UUID
		if o.TaskIDFilter != nil {
			qrTaskIDFilter = *o.TaskIDFilter
		}
		qTaskIDFilter := qrTaskIDFilter.String()
		if qTaskIDFilter != "" {
			if err := r.SetQueryParam("taskIdFilter", qTaskIDFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
