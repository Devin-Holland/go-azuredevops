// Code generated by go-swagger; DO NOT EDIT.

package comments_reactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams creates a new PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams object
// with the default values initialized.
func NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams() *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	var ()
	return &PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithTimeout creates a new PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithTimeout(timeout time.Duration) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	var ()
	return &PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams{

		timeout: timeout,
	}
}

// NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithContext creates a new PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithContext(ctx context.Context) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	var ()
	return &PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams{

		Context: ctx,
	}
}

// NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithHTTPClient creates a new PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParamsWithHTTPClient(client *http.Client) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	var ()
	return &PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams{
		HTTPClient: client,
	}
}

/*PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams contains all the parameters to send to the API endpoint
for the put organization project apis wit work items work item ID comments comment ID reactions reaction type operation typically these are written to a http.Request
*/
type PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*CommentID
	  Comment ID

	*/
	CommentID int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ReactionType
	  Type of the reaction

	*/
	ReactionType string
	/*WorkItemID
	  WorkItem ID

	*/
	WorkItemID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithTimeout(timeout time.Duration) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithContext(ctx context.Context) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithHTTPClient(client *http.Client) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithAPIVersion(aPIVersion string) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithCommentID adds the commentID to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithCommentID(commentID int32) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetCommentID(commentID)
	return o
}

// SetCommentID adds the commentId to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetCommentID(commentID int32) {
	o.CommentID = commentID
}

// WithOrganization adds the organization to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithOrganization(organization string) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithProject(project string) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetProject(project string) {
	o.Project = project
}

// WithReactionType adds the reactionType to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithReactionType(reactionType string) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetReactionType(reactionType)
	return o
}

// SetReactionType adds the reactionType to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetReactionType(reactionType string) {
	o.ReactionType = reactionType
}

// WithWorkItemID adds the workItemID to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WithWorkItemID(workItemID int32) *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams {
	o.SetWorkItemID(workItemID)
	return o
}

// SetWorkItemID adds the workItemId to the put organization project apis wit work items work item ID comments comment ID reactions reaction type params
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) SetWorkItemID(workItemID int32) {
	o.WorkItemID = workItemID
}

// WriteToRequest writes these params to a swagger request
func (o *PutOrganizationProjectApisWitWorkItemsWorkItemIDCommentsCommentIDReactionsReactionTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param commentId
	if err := r.SetPathParam("commentId", swag.FormatInt32(o.CommentID)); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param reactionType
	if err := r.SetPathParam("reactionType", o.ReactionType); err != nil {
		return err
	}

	// path param workItemId
	if err := r.SetPathParam("workItemId", swag.FormatInt32(o.WorkItemID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
