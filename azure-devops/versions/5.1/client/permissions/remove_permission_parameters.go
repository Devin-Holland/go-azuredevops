// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemovePermissionParams creates a new RemovePermissionParams object
// with the default values initialized.
func NewRemovePermissionParams() *RemovePermissionParams {
	var ()
	return &RemovePermissionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemovePermissionParamsWithTimeout creates a new RemovePermissionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemovePermissionParamsWithTimeout(timeout time.Duration) *RemovePermissionParams {
	var ()
	return &RemovePermissionParams{

		timeout: timeout,
	}
}

// NewRemovePermissionParamsWithContext creates a new RemovePermissionParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemovePermissionParamsWithContext(ctx context.Context) *RemovePermissionParams {
	var ()
	return &RemovePermissionParams{

		Context: ctx,
	}
}

// NewRemovePermissionParamsWithHTTPClient creates a new RemovePermissionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemovePermissionParamsWithHTTPClient(client *http.Client) *RemovePermissionParams {
	var ()
	return &RemovePermissionParams{
		HTTPClient: client,
	}
}

/*RemovePermissionParams contains all the parameters to send to the API endpoint
for the remove permission operation typically these are written to a http.Request
*/
type RemovePermissionParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*Descriptor
	  Identity descriptor of the user to remove permissions for.

	*/
	Descriptor string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Permissions
	  Permissions to remove.

	*/
	Permissions int32
	/*SecurityNamespaceID
	  Security namespace identifier.

	*/
	SecurityNamespaceID strfmt.UUID
	/*Token
	  Security token to remove permissions for.

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove permission params
func (o *RemovePermissionParams) WithTimeout(timeout time.Duration) *RemovePermissionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove permission params
func (o *RemovePermissionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove permission params
func (o *RemovePermissionParams) WithContext(ctx context.Context) *RemovePermissionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove permission params
func (o *RemovePermissionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove permission params
func (o *RemovePermissionParams) WithHTTPClient(client *http.Client) *RemovePermissionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove permission params
func (o *RemovePermissionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the remove permission params
func (o *RemovePermissionParams) WithAPIVersion(aPIVersion string) *RemovePermissionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the remove permission params
func (o *RemovePermissionParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithDescriptor adds the descriptor to the remove permission params
func (o *RemovePermissionParams) WithDescriptor(descriptor string) *RemovePermissionParams {
	o.SetDescriptor(descriptor)
	return o
}

// SetDescriptor adds the descriptor to the remove permission params
func (o *RemovePermissionParams) SetDescriptor(descriptor string) {
	o.Descriptor = descriptor
}

// WithOrganization adds the organization to the remove permission params
func (o *RemovePermissionParams) WithOrganization(organization string) *RemovePermissionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the remove permission params
func (o *RemovePermissionParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPermissions adds the permissions to the remove permission params
func (o *RemovePermissionParams) WithPermissions(permissions int32) *RemovePermissionParams {
	o.SetPermissions(permissions)
	return o
}

// SetPermissions adds the permissions to the remove permission params
func (o *RemovePermissionParams) SetPermissions(permissions int32) {
	o.Permissions = permissions
}

// WithSecurityNamespaceID adds the securityNamespaceID to the remove permission params
func (o *RemovePermissionParams) WithSecurityNamespaceID(securityNamespaceID strfmt.UUID) *RemovePermissionParams {
	o.SetSecurityNamespaceID(securityNamespaceID)
	return o
}

// SetSecurityNamespaceID adds the securityNamespaceId to the remove permission params
func (o *RemovePermissionParams) SetSecurityNamespaceID(securityNamespaceID strfmt.UUID) {
	o.SecurityNamespaceID = securityNamespaceID
}

// WithToken adds the token to the remove permission params
func (o *RemovePermissionParams) WithToken(token *string) *RemovePermissionParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the remove permission params
func (o *RemovePermissionParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *RemovePermissionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// query param descriptor
	qrDescriptor := o.Descriptor
	qDescriptor := qrDescriptor
	if qDescriptor != "" {
		if err := r.SetQueryParam("descriptor", qDescriptor); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param permissions
	if err := r.SetPathParam("permissions", swag.FormatInt32(o.Permissions)); err != nil {
		return err
	}

	// path param securityNamespaceId
	if err := r.SetPathParam("securityNamespaceId", o.SecurityNamespaceID.String()); err != nil {
		return err
	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
