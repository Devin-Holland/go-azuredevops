// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HasPermissions Evaluates whether the caller has the specified permissions on the specified set of security tokens.
*/
func (a *Client) HasPermissions(params *HasPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*HasPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHasPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Has Permissions",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/permissions/{securityNamespaceId}/{permissions}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HasPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HasPermissionsOK), nil

}

/*
HasPermissionsBatch Evaluates multiple permissions for the calling user.  Note: This method does not aggregate the results, nor does it short-circuit if one of the permissions evaluates to false.
*/
func (a *Client) HasPermissionsBatch(params *HasPermissionsBatchParams, authInfo runtime.ClientAuthInfoWriter) (*HasPermissionsBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHasPermissionsBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Has Permissions Batch",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/security/permissionevaluationbatch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HasPermissionsBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HasPermissionsBatchOK), nil

}

/*
RemovePermission Removes the specified permissions on a security token for a user or group.
*/
func (a *Client) RemovePermission(params *RemovePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*RemovePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemovePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove Permission",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/permissions/{securityNamespaceId}/{permissions}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemovePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemovePermissionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
