// Code generated by go-swagger; DO NOT EDIT.

package code_coverage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBuildCodeCoverageParams creates a new GetBuildCodeCoverageParams object
// with the default values initialized.
func NewGetBuildCodeCoverageParams() *GetBuildCodeCoverageParams {
	var ()
	return &GetBuildCodeCoverageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBuildCodeCoverageParamsWithTimeout creates a new GetBuildCodeCoverageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBuildCodeCoverageParamsWithTimeout(timeout time.Duration) *GetBuildCodeCoverageParams {
	var ()
	return &GetBuildCodeCoverageParams{

		timeout: timeout,
	}
}

// NewGetBuildCodeCoverageParamsWithContext creates a new GetBuildCodeCoverageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBuildCodeCoverageParamsWithContext(ctx context.Context) *GetBuildCodeCoverageParams {
	var ()
	return &GetBuildCodeCoverageParams{

		Context: ctx,
	}
}

// NewGetBuildCodeCoverageParamsWithHTTPClient creates a new GetBuildCodeCoverageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBuildCodeCoverageParamsWithHTTPClient(client *http.Client) *GetBuildCodeCoverageParams {
	var ()
	return &GetBuildCodeCoverageParams{
		HTTPClient: client,
	}
}

/*GetBuildCodeCoverageParams contains all the parameters to send to the API endpoint
for the get build code coverage operation typically these are written to a http.Request
*/
type GetBuildCodeCoverageParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*BuildID
	  ID of the build for which code coverage data needs to be fetched.

	*/
	BuildID int32
	/*Flags
	  Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.

	*/
	Flags int32
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithTimeout(timeout time.Duration) *GetBuildCodeCoverageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithContext(ctx context.Context) *GetBuildCodeCoverageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithHTTPClient(client *http.Client) *GetBuildCodeCoverageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithAPIVersion(aPIVersion string) *GetBuildCodeCoverageParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBuildID adds the buildID to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithBuildID(buildID int32) *GetBuildCodeCoverageParams {
	o.SetBuildID(buildID)
	return o
}

// SetBuildID adds the buildId to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetBuildID(buildID int32) {
	o.BuildID = buildID
}

// WithFlags adds the flags to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithFlags(flags int32) *GetBuildCodeCoverageParams {
	o.SetFlags(flags)
	return o
}

// SetFlags adds the flags to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetFlags(flags int32) {
	o.Flags = flags
}

// WithOrganization adds the organization to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithOrganization(organization string) *GetBuildCodeCoverageParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get build code coverage params
func (o *GetBuildCodeCoverageParams) WithProject(project string) *GetBuildCodeCoverageParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get build code coverage params
func (o *GetBuildCodeCoverageParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *GetBuildCodeCoverageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// query param buildId
	qrBuildID := o.BuildID
	qBuildID := swag.FormatInt32(qrBuildID)
	if qBuildID != "" {
		if err := r.SetQueryParam("buildId", qBuildID); err != nil {
			return err
		}
	}

	// query param flags
	qrFlags := o.Flags
	qFlags := swag.FormatInt32(qrFlags)
	if qFlags != "" {
		if err := r.SetQueryParam("flags", qFlags); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
