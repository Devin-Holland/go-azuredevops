// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryParams creates a new QueryParams object
// with the default values initialized.
func NewQueryParams() *QueryParams {
	var ()
	return &QueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryParamsWithTimeout creates a new QueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryParamsWithTimeout(timeout time.Duration) *QueryParams {
	var ()
	return &QueryParams{

		timeout: timeout,
	}
}

// NewQueryParamsWithContext creates a new QueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryParamsWithContext(ctx context.Context) *QueryParams {
	var ()
	return &QueryParams{

		Context: ctx,
	}
}

// NewQueryParamsWithHTTPClient creates a new QueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryParamsWithHTTPClient(client *http.Client) *QueryParams {
	var ()
	return &QueryParams{
		HTTPClient: client,
	}
}

/*QueryParams contains all the parameters to send to the API endpoint
for the query operation typically these are written to a http.Request
*/
type QueryParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*BatchSize
	  Max number of results to return. Optional

	*/
	BatchSize *int32
	/*ContinuationToken
	  Token used for returning next set of results from previous query. Optional

	*/
	ContinuationToken *string
	/*EndTime
	  End time of download window. Optional

	*/
	EndTime *strfmt.DateTime
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*SkipAggregation
	  Skips aggregating events and leaves them as individual entries instead. By default events are aggregated. Event types that are aggregated: AuditLog.AccessLog.

	*/
	SkipAggregation *bool
	/*StartTime
	  Start time of download window. Optional

	*/
	StartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query params
func (o *QueryParams) WithTimeout(timeout time.Duration) *QueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query params
func (o *QueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query params
func (o *QueryParams) WithContext(ctx context.Context) *QueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query params
func (o *QueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query params
func (o *QueryParams) WithHTTPClient(client *http.Client) *QueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query params
func (o *QueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the query params
func (o *QueryParams) WithAPIVersion(aPIVersion string) *QueryParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the query params
func (o *QueryParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBatchSize adds the batchSize to the query params
func (o *QueryParams) WithBatchSize(batchSize *int32) *QueryParams {
	o.SetBatchSize(batchSize)
	return o
}

// SetBatchSize adds the batchSize to the query params
func (o *QueryParams) SetBatchSize(batchSize *int32) {
	o.BatchSize = batchSize
}

// WithContinuationToken adds the continuationToken to the query params
func (o *QueryParams) WithContinuationToken(continuationToken *string) *QueryParams {
	o.SetContinuationToken(continuationToken)
	return o
}

// SetContinuationToken adds the continuationToken to the query params
func (o *QueryParams) SetContinuationToken(continuationToken *string) {
	o.ContinuationToken = continuationToken
}

// WithEndTime adds the endTime to the query params
func (o *QueryParams) WithEndTime(endTime *strfmt.DateTime) *QueryParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the query params
func (o *QueryParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithOrganization adds the organization to the query params
func (o *QueryParams) WithOrganization(organization string) *QueryParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the query params
func (o *QueryParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithSkipAggregation adds the skipAggregation to the query params
func (o *QueryParams) WithSkipAggregation(skipAggregation *bool) *QueryParams {
	o.SetSkipAggregation(skipAggregation)
	return o
}

// SetSkipAggregation adds the skipAggregation to the query params
func (o *QueryParams) SetSkipAggregation(skipAggregation *bool) {
	o.SkipAggregation = skipAggregation
}

// WithStartTime adds the startTime to the query params
func (o *QueryParams) WithStartTime(startTime *strfmt.DateTime) *QueryParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the query params
func (o *QueryParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *QueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.BatchSize != nil {

		// query param batchSize
		var qrBatchSize int32
		if o.BatchSize != nil {
			qrBatchSize = *o.BatchSize
		}
		qBatchSize := swag.FormatInt32(qrBatchSize)
		if qBatchSize != "" {
			if err := r.SetQueryParam("batchSize", qBatchSize); err != nil {
				return err
			}
		}

	}

	if o.ContinuationToken != nil {

		// query param continuationToken
		var qrContinuationToken string
		if o.ContinuationToken != nil {
			qrContinuationToken = *o.ContinuationToken
		}
		qContinuationToken := qrContinuationToken
		if qContinuationToken != "" {
			if err := r.SetQueryParam("continuationToken", qContinuationToken); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {
			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.SkipAggregation != nil {

		// query param skipAggregation
		var qrSkipAggregation bool
		if o.SkipAggregation != nil {
			qrSkipAggregation = *o.SkipAggregation
		}
		qSkipAggregation := swag.FormatBool(qrSkipAggregation)
		if qSkipAggregation != "" {
			if err := r.SetQueryParam("skipAggregation", qSkipAggregation); err != nil {
				return err
			}
		}

	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime
		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {
			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
