// Code generated by go-swagger; DO NOT EDIT.

package user_entitlements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user entitlements API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user entitlements API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Add Add a user, assign license and extensions and make them a member of a project group in an account.
*/
func (a *Client) Add(params *AddParams, authInfo runtime.ClientAuthInfoWriter) (*AddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Add",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/userentitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOK), nil

}

/*
Delete Delete a user from the account.

The delete operation includes unassigning Extensions and Licenses and removing the user from all project memberships.
The user would continue to have access to the account if she is member of an AAD group, that is added directly to the account.
*/
func (a *Client) Delete(params *DeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete",
		Method:             "DELETE",
		PathPattern:        "/{organization}/_apis/userentitlements/{userId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOK), nil

}

/*
GetUserEntitlement Get User Entitlement for a user.
*/
func (a *Client) GetUserEntitlement(params *GetUserEntitlementParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserEntitlementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserEntitlementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get User Entitlement",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/userentitlements/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserEntitlementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserEntitlementOK), nil

}

/*
GetUserEntitlements Get a paged set of user entitlements matching the filter criteria. If no filter is is passed, a page from all the account users is returned.
*/
func (a *Client) GetUserEntitlements(params *GetUserEntitlementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserEntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserEntitlementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get User Entitlements",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/userentitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserEntitlementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserEntitlementsOK), nil

}

/*
UpdateUserEntitlement Edit the entitlements (License, Extensions, Projects, Teams etc) for a user.
*/
func (a *Client) UpdateUserEntitlement(params *UpdateUserEntitlementParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserEntitlementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserEntitlementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update User Entitlement",
		Method:             "PATCH",
		PathPattern:        "/{organization}/_apis/userentitlements/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserEntitlementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserEntitlementOK), nil

}

/*
UpdateUserEntitlements Edit the entitlements (License, Extensions, Projects, Teams etc) for one or more users.
*/
func (a *Client) UpdateUserEntitlements(params *UpdateUserEntitlementsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserEntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserEntitlementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update User Entitlements",
		Method:             "PATCH",
		PathPattern:        "/{organization}/_apis/userentitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserEntitlementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserEntitlementsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
