// Code generated by go-swagger; DO NOT EDIT.

package user_entitlements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUserEntitlementsParams creates a new GetUserEntitlementsParams object
// with the default values initialized.
func NewGetUserEntitlementsParams() *GetUserEntitlementsParams {
	var ()
	return &GetUserEntitlementsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserEntitlementsParamsWithTimeout creates a new GetUserEntitlementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserEntitlementsParamsWithTimeout(timeout time.Duration) *GetUserEntitlementsParams {
	var ()
	return &GetUserEntitlementsParams{

		timeout: timeout,
	}
}

// NewGetUserEntitlementsParamsWithContext creates a new GetUserEntitlementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserEntitlementsParamsWithContext(ctx context.Context) *GetUserEntitlementsParams {
	var ()
	return &GetUserEntitlementsParams{

		Context: ctx,
	}
}

// NewGetUserEntitlementsParamsWithHTTPClient creates a new GetUserEntitlementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserEntitlementsParamsWithHTTPClient(client *http.Client) *GetUserEntitlementsParams {
	var ()
	return &GetUserEntitlementsParams{
		HTTPClient: client,
	}
}

/*GetUserEntitlementsParams contains all the parameters to send to the API endpoint
for the get user entitlements operation typically these are written to a http.Request
*/
type GetUserEntitlementsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.2' to use this version of the api.

	*/
	APIVersion string
	/*Filter
	  Comma (",") separated list of properties and their values to filter on. Currently, the API only supports filtering by ExtensionId. An example parameter would be filter=extensionId eq search.

	*/
	Filter *string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Skip
	  Offset: Number of records to skip. Default value is 0

	*/
	Skip *int32
	/*SortOption
	  PropertyName and Order (separated by a space ( )) to sort on (e.g. LastAccessDate Desc)

	*/
	SortOption *string
	/*Top
	  Maximum number of the user entitlements to return. Max value is 10000. Default value is 100

	*/
	Top *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user entitlements params
func (o *GetUserEntitlementsParams) WithTimeout(timeout time.Duration) *GetUserEntitlementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user entitlements params
func (o *GetUserEntitlementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user entitlements params
func (o *GetUserEntitlementsParams) WithContext(ctx context.Context) *GetUserEntitlementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user entitlements params
func (o *GetUserEntitlementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user entitlements params
func (o *GetUserEntitlementsParams) WithHTTPClient(client *http.Client) *GetUserEntitlementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user entitlements params
func (o *GetUserEntitlementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get user entitlements params
func (o *GetUserEntitlementsParams) WithAPIVersion(aPIVersion string) *GetUserEntitlementsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get user entitlements params
func (o *GetUserEntitlementsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithFilter adds the filter to the get user entitlements params
func (o *GetUserEntitlementsParams) WithFilter(filter *string) *GetUserEntitlementsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get user entitlements params
func (o *GetUserEntitlementsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithOrganization adds the organization to the get user entitlements params
func (o *GetUserEntitlementsParams) WithOrganization(organization string) *GetUserEntitlementsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get user entitlements params
func (o *GetUserEntitlementsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithSkip adds the skip to the get user entitlements params
func (o *GetUserEntitlementsParams) WithSkip(skip *int32) *GetUserEntitlementsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get user entitlements params
func (o *GetUserEntitlementsParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithSortOption adds the sortOption to the get user entitlements params
func (o *GetUserEntitlementsParams) WithSortOption(sortOption *string) *GetUserEntitlementsParams {
	o.SetSortOption(sortOption)
	return o
}

// SetSortOption adds the sortOption to the get user entitlements params
func (o *GetUserEntitlementsParams) SetSortOption(sortOption *string) {
	o.SortOption = sortOption
}

// WithTop adds the top to the get user entitlements params
func (o *GetUserEntitlementsParams) WithTop(top *int32) *GetUserEntitlementsParams {
	o.SetTop(top)
	return o
}

// SetTop adds the top to the get user entitlements params
func (o *GetUserEntitlementsParams) SetTop(top *int32) {
	o.Top = top
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserEntitlementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.SortOption != nil {

		// query param sortOption
		var qrSortOption string
		if o.SortOption != nil {
			qrSortOption = *o.SortOption
		}
		qSortOption := qrSortOption
		if qSortOption != "" {
			if err := r.SetQueryParam("sortOption", qSortOption); err != nil {
				return err
			}
		}

	}

	if o.Top != nil {

		// query param top
		var qrTop int32
		if o.Top != nil {
			qrTop = *o.Top
		}
		qTop := swag.FormatInt32(qrTop)
		if qTop != "" {
			if err := r.SetQueryParam("top", qTop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
