// Code generated by go-swagger; DO NOT EDIT.

package widgets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new widgets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for widgets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Create Create a widget on the specified dashboard.
*/
func (a *Client) Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOK), nil

}

/*
Delete Delete the specified widget.
*/
func (a *Client) Delete(params *DeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOK), nil

}

/*
GetWidget Get the current state of the specified widget.
*/
func (a *Client) GetWidget(params *GetWidgetParams, authInfo runtime.ClientAuthInfoWriter) (*GetWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Widget",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetOK), nil

}

/*
GetWidgets Get widgets contained on the specified dashboard.
*/
func (a *Client) GetWidgets(params *GetWidgetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWidgetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Widgets",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetsOK), nil

}

/*
ReplaceWidget Override the  state of the specified widget.
*/
func (a *Client) ReplaceWidget(params *ReplaceWidgetParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceWidgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace Widget",
		Method:             "PUT",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceWidgetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceWidgetOK), nil

}

/*
ReplaceWidgets Replace the widgets on specified dashboard with the supplied widgets.
*/
func (a *Client) ReplaceWidgets(params *ReplaceWidgetsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceWidgetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceWidgetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace Widgets",
		Method:             "PUT",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceWidgetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceWidgetsOK), nil

}

/*
UpdateWidget Perform a partial update of the specified widget.
*/
func (a *Client) UpdateWidget(params *UpdateWidgetParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWidgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Widget",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets/{widgetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWidgetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWidgetOK), nil

}

/*
UpdateWidgets Update the supplied widgets on the dashboard using supplied state. State of existing Widgets not passed in the widget list is preserved.
*/
func (a *Client) UpdateWidgets(params *UpdateWidgetsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWidgetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWidgetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Widgets",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/{team}/_apis/dashboard/dashboards/{dashboardId}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWidgetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWidgetsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
