// Code generated by go-swagger; DO NOT EDIT.

package change_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new change tracking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for change tracking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFeedChange Query a feed to determine its current state.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetFeedChange(params *GetFeedChangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed Change",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feedchanges/{feedId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedChangeOK), nil

}

/*
GetFeedChanges Query to determine which feeds have changed since the last call, tracked through the provided continuationToken. Only changes to a feed itself are returned and impact the continuationToken, not additions or alterations to packages within the feeds.

If the project parameter is present, gets all feed changes in the given project.
If omitted, gets all feed changes in the organization.
*/
func (a *Client) GetFeedChanges(params *GetFeedChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Feed Changes",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feedchanges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeedChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedChangesOK), nil

}

/*
GetPackageChanges Get a batch of package changes made to a feed.  The changes returned are 'most recent change' so if an Add is followed by an Update before you begin enumerating, you'll only see one change in the batch.  While consuming batches using the continuation token, you may see changes to the same package version multiple times if they are happening as you enumerate.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageChanges(params *GetPackageChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package Changes",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/Feeds/{feedId}/packagechanges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageChangesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
