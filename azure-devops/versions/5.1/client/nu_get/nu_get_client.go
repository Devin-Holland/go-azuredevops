// Code generated by go-swagger; DO NOT EDIT.

package nu_get

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nu get API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nu get API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePackageVersion Send a package version from the feed to its paired recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeletePackageVersion(params *DeletePackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Package Version",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackageVersionOK), nil

}

/*
DeletePackageVersionFromRecycleBin Delete a package version from a feed's recycle bin.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DeletePackageVersionFromRecycleBin(params *DeletePackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete Package Version From Recycle Bin",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/RecycleBin/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackageVersionFromRecycleBinOK), nil

}

/*
DownloadPackage Download a package version directly.  This API is intended for manual UI download options, not for programmatic access and scripting.  You may be heavily throttled if accessing this api for scripting purposes.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) DownloadPackage(params *DownloadPackageParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Download Package",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/packages/{packageName}/versions/{packageVersion}/content",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadPackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadPackageOK), nil

}

/*
GetPackageVersion Get information about a package version.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersion(params *GetPackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Package Version",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionOK), nil

}

/*
GetPackageVersionFromRecycleBin View a package version's deletion/recycled status

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) GetPackageVersionFromRecycleBin(params *GetPackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPackageVersionFromRecycleBin",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/RecycleBin/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageVersionFromRecycleBinOK), nil

}

/*
RestorePackageVersionFromRecycleBin Restore a package version from a feed's recycle bin back into the active feed.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) RestorePackageVersionFromRecycleBin(params *RestorePackageVersionFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter) (*RestorePackageVersionFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestorePackageVersionFromRecycleBinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Restore Package Version From Recycle Bin",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/RecycleBin/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestorePackageVersionFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestorePackageVersionFromRecycleBinOK), nil

}

/*
UpdatePackageVersion Set mutable state on a package version.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) UpdatePackageVersion(params *UpdatePackageVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePackageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackageVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Package Version",
		Method:             "PATCH",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/packages/{packageName}/versions/{packageVersion}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePackageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePackageVersionOK), nil

}

/*
UpdatePackageVersions Update several packages from a single feed in a single request. The updates to the packages do not happen atomically.

The project parameter must be supplied if the feed was created in a project.
If the feed is not associated with any project, omit the project parameter from the request.
*/
func (a *Client) UpdatePackageVersions(params *UpdatePackageVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePackageVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackageVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update Package Versions",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/_apis/packaging/feeds/{feedId}/nuget/packagesbatch",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePackageVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePackageVersionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
