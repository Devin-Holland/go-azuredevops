// Code generated by go-swagger; DO NOT EDIT.

package iterations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iterations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iterations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Delete Delete a team's iteration by iterationId
*/
func (a *Client) Delete(params *DeleteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete",
		Method:             "DELETE",
		PathPattern:        "/{organization}/{project}/{team}/_apis/work/teamsettings/iterations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOK), nil

}

/*
GetIterationWorkItems Get work items for iteration
*/
func (a *Client) GetIterationWorkItems(params *GetIterationWorkItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIterationWorkItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIterationWorkItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Iteration Work Items",
		Method:             "GET",
		PathPattern:        "/{organization}/{project}/{team}/_apis/work/teamsettings/iterations/{iterationId}/workitems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIterationWorkItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIterationWorkItemsOK), nil

}

/*
PostTeamIteration Add an iteration to the team
*/
func (a *Client) PostTeamIteration(params *PostTeamIterationParams, authInfo runtime.ClientAuthInfoWriter) (*PostTeamIterationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamIterationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Post Team Iteration",
		Method:             "POST",
		PathPattern:        "/{organization}/{project}/{team}/_apis/work/teamsettings/iterations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamIterationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamIterationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
