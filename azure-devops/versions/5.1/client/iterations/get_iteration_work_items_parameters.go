// Code generated by go-swagger; DO NOT EDIT.

package iterations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIterationWorkItemsParams creates a new GetIterationWorkItemsParams object
// with the default values initialized.
func NewGetIterationWorkItemsParams() *GetIterationWorkItemsParams {
	var ()
	return &GetIterationWorkItemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIterationWorkItemsParamsWithTimeout creates a new GetIterationWorkItemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIterationWorkItemsParamsWithTimeout(timeout time.Duration) *GetIterationWorkItemsParams {
	var ()
	return &GetIterationWorkItemsParams{

		timeout: timeout,
	}
}

// NewGetIterationWorkItemsParamsWithContext creates a new GetIterationWorkItemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIterationWorkItemsParamsWithContext(ctx context.Context) *GetIterationWorkItemsParams {
	var ()
	return &GetIterationWorkItemsParams{

		Context: ctx,
	}
}

// NewGetIterationWorkItemsParamsWithHTTPClient creates a new GetIterationWorkItemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIterationWorkItemsParamsWithHTTPClient(client *http.Client) *GetIterationWorkItemsParams {
	var ()
	return &GetIterationWorkItemsParams{
		HTTPClient: client,
	}
}

/*GetIterationWorkItemsParams contains all the parameters to send to the API endpoint
for the get iteration work items operation typically these are written to a http.Request
*/
type GetIterationWorkItemsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*IterationID
	  ID of the iteration

	*/
	IterationID strfmt.UUID
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*Team
	  Team ID or team name

	*/
	Team string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithTimeout(timeout time.Duration) *GetIterationWorkItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithContext(ctx context.Context) *GetIterationWorkItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithHTTPClient(client *http.Client) *GetIterationWorkItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithAPIVersion(aPIVersion string) *GetIterationWorkItemsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithIterationID adds the iterationID to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithIterationID(iterationID strfmt.UUID) *GetIterationWorkItemsParams {
	o.SetIterationID(iterationID)
	return o
}

// SetIterationID adds the iterationId to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetIterationID(iterationID strfmt.UUID) {
	o.IterationID = iterationID
}

// WithOrganization adds the organization to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithOrganization(organization string) *GetIterationWorkItemsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithProject(project string) *GetIterationWorkItemsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetProject(project string) {
	o.Project = project
}

// WithTeam adds the team to the get iteration work items params
func (o *GetIterationWorkItemsParams) WithTeam(team string) *GetIterationWorkItemsParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the get iteration work items params
func (o *GetIterationWorkItemsParams) SetTeam(team string) {
	o.Team = team
}

// WriteToRequest writes these params to a swagger request
func (o *GetIterationWorkItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param iterationId
	if err := r.SetPathParam("iterationId", o.IterationID.String()); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
