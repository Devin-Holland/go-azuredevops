// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProjectMetricsParams creates a new GetProjectMetricsParams object
// with the default values initialized.
func NewGetProjectMetricsParams() *GetProjectMetricsParams {
	var ()
	return &GetProjectMetricsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProjectMetricsParamsWithTimeout creates a new GetProjectMetricsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProjectMetricsParamsWithTimeout(timeout time.Duration) *GetProjectMetricsParams {
	var ()
	return &GetProjectMetricsParams{

		timeout: timeout,
	}
}

// NewGetProjectMetricsParamsWithContext creates a new GetProjectMetricsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProjectMetricsParamsWithContext(ctx context.Context) *GetProjectMetricsParams {
	var ()
	return &GetProjectMetricsParams{

		Context: ctx,
	}
}

// NewGetProjectMetricsParamsWithHTTPClient creates a new GetProjectMetricsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProjectMetricsParamsWithHTTPClient(client *http.Client) *GetProjectMetricsParams {
	var ()
	return &GetProjectMetricsParams{
		HTTPClient: client,
	}
}

/*GetProjectMetricsParams contains all the parameters to send to the API endpoint
for the get project metrics operation typically these are written to a http.Request
*/
type GetProjectMetricsParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*MetricAggregationType
	  The aggregation type to use (hourly, daily).

	*/
	MetricAggregationType string
	/*MinMetricsTime
	  The date from which to calculate metrics.

	*/
	MinMetricsTime *strfmt.DateTime
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get project metrics params
func (o *GetProjectMetricsParams) WithTimeout(timeout time.Duration) *GetProjectMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get project metrics params
func (o *GetProjectMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get project metrics params
func (o *GetProjectMetricsParams) WithContext(ctx context.Context) *GetProjectMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get project metrics params
func (o *GetProjectMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get project metrics params
func (o *GetProjectMetricsParams) WithHTTPClient(client *http.Client) *GetProjectMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get project metrics params
func (o *GetProjectMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get project metrics params
func (o *GetProjectMetricsParams) WithAPIVersion(aPIVersion string) *GetProjectMetricsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get project metrics params
func (o *GetProjectMetricsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithMetricAggregationType adds the metricAggregationType to the get project metrics params
func (o *GetProjectMetricsParams) WithMetricAggregationType(metricAggregationType string) *GetProjectMetricsParams {
	o.SetMetricAggregationType(metricAggregationType)
	return o
}

// SetMetricAggregationType adds the metricAggregationType to the get project metrics params
func (o *GetProjectMetricsParams) SetMetricAggregationType(metricAggregationType string) {
	o.MetricAggregationType = metricAggregationType
}

// WithMinMetricsTime adds the minMetricsTime to the get project metrics params
func (o *GetProjectMetricsParams) WithMinMetricsTime(minMetricsTime *strfmt.DateTime) *GetProjectMetricsParams {
	o.SetMinMetricsTime(minMetricsTime)
	return o
}

// SetMinMetricsTime adds the minMetricsTime to the get project metrics params
func (o *GetProjectMetricsParams) SetMinMetricsTime(minMetricsTime *strfmt.DateTime) {
	o.MinMetricsTime = minMetricsTime
}

// WithOrganization adds the organization to the get project metrics params
func (o *GetProjectMetricsParams) WithOrganization(organization string) *GetProjectMetricsParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get project metrics params
func (o *GetProjectMetricsParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get project metrics params
func (o *GetProjectMetricsParams) WithProject(project string) *GetProjectMetricsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get project metrics params
func (o *GetProjectMetricsParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *GetProjectMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param metricAggregationType
	if err := r.SetPathParam("metricAggregationType", o.MetricAggregationType); err != nil {
		return err
	}

	if o.MinMetricsTime != nil {

		// query param minMetricsTime
		var qrMinMetricsTime strfmt.DateTime
		if o.MinMetricsTime != nil {
			qrMinMetricsTime = *o.MinMetricsTime
		}
		qMinMetricsTime := qrMinMetricsTime.String()
		if qMinMetricsTime != "" {
			if err := r.SetQueryParam("minMetricsTime", qMinMetricsTime); err != nil {
				return err
			}
		}

	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
