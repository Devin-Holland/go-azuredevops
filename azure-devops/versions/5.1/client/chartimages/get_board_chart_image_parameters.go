// Code generated by go-swagger; DO NOT EDIT.

package chartimages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBoardChartImageParams creates a new GetBoardChartImageParams object
// with the default values initialized.
func NewGetBoardChartImageParams() *GetBoardChartImageParams {
	var ()
	return &GetBoardChartImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBoardChartImageParamsWithTimeout creates a new GetBoardChartImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBoardChartImageParamsWithTimeout(timeout time.Duration) *GetBoardChartImageParams {
	var ()
	return &GetBoardChartImageParams{

		timeout: timeout,
	}
}

// NewGetBoardChartImageParamsWithContext creates a new GetBoardChartImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBoardChartImageParamsWithContext(ctx context.Context) *GetBoardChartImageParams {
	var ()
	return &GetBoardChartImageParams{

		Context: ctx,
	}
}

// NewGetBoardChartImageParamsWithHTTPClient creates a new GetBoardChartImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBoardChartImageParamsWithHTTPClient(client *http.Client) *GetBoardChartImageParams {
	var ()
	return &GetBoardChartImageParams{
		HTTPClient: client,
	}
}

/*GetBoardChartImageParams contains all the parameters to send to the API endpoint
for the get board chart image operation typically these are written to a http.Request
*/
type GetBoardChartImageParams struct {

	/*APIVersion
	  Version of the API to use.  This should be set to '5.1-preview.1' to use this version of the api.

	*/
	APIVersion string
	/*Board
	  Identifier for board, either board's backlog level name (e.g. "Issues") or Id.

	*/
	Board string
	/*Height
	  The height of the chart in pixels. Must be greater than 0.

	*/
	Height *int32
	/*Name
	  The chart name. e.g. CumulativeFlow.

	*/
	Name string
	/*Organization
	  The name of the Azure DevOps organization.

	*/
	Organization string
	/*Project
	  Project ID or project name

	*/
	Project string
	/*ShowDetails
	  Whether or not the chart should include detailed information (e.g. axis labels, titles, trend lines, etc.).

	*/
	ShowDetails *bool
	/*Team
	  Team ID or team name

	*/
	Team string
	/*Title
	  The title of the chart. Can only be dislayed if ShowLabels is true.

	*/
	Title *string
	/*Width
	  The width of the chart in pixels. Must be greater than 0.

	*/
	Width *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get board chart image params
func (o *GetBoardChartImageParams) WithTimeout(timeout time.Duration) *GetBoardChartImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get board chart image params
func (o *GetBoardChartImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get board chart image params
func (o *GetBoardChartImageParams) WithContext(ctx context.Context) *GetBoardChartImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get board chart image params
func (o *GetBoardChartImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get board chart image params
func (o *GetBoardChartImageParams) WithHTTPClient(client *http.Client) *GetBoardChartImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get board chart image params
func (o *GetBoardChartImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get board chart image params
func (o *GetBoardChartImageParams) WithAPIVersion(aPIVersion string) *GetBoardChartImageParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get board chart image params
func (o *GetBoardChartImageParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBoard adds the board to the get board chart image params
func (o *GetBoardChartImageParams) WithBoard(board string) *GetBoardChartImageParams {
	o.SetBoard(board)
	return o
}

// SetBoard adds the board to the get board chart image params
func (o *GetBoardChartImageParams) SetBoard(board string) {
	o.Board = board
}

// WithHeight adds the height to the get board chart image params
func (o *GetBoardChartImageParams) WithHeight(height *int32) *GetBoardChartImageParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the get board chart image params
func (o *GetBoardChartImageParams) SetHeight(height *int32) {
	o.Height = height
}

// WithName adds the name to the get board chart image params
func (o *GetBoardChartImageParams) WithName(name string) *GetBoardChartImageParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get board chart image params
func (o *GetBoardChartImageParams) SetName(name string) {
	o.Name = name
}

// WithOrganization adds the organization to the get board chart image params
func (o *GetBoardChartImageParams) WithOrganization(organization string) *GetBoardChartImageParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get board chart image params
func (o *GetBoardChartImageParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get board chart image params
func (o *GetBoardChartImageParams) WithProject(project string) *GetBoardChartImageParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get board chart image params
func (o *GetBoardChartImageParams) SetProject(project string) {
	o.Project = project
}

// WithShowDetails adds the showDetails to the get board chart image params
func (o *GetBoardChartImageParams) WithShowDetails(showDetails *bool) *GetBoardChartImageParams {
	o.SetShowDetails(showDetails)
	return o
}

// SetShowDetails adds the showDetails to the get board chart image params
func (o *GetBoardChartImageParams) SetShowDetails(showDetails *bool) {
	o.ShowDetails = showDetails
}

// WithTeam adds the team to the get board chart image params
func (o *GetBoardChartImageParams) WithTeam(team string) *GetBoardChartImageParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the get board chart image params
func (o *GetBoardChartImageParams) SetTeam(team string) {
	o.Team = team
}

// WithTitle adds the title to the get board chart image params
func (o *GetBoardChartImageParams) WithTitle(title *string) *GetBoardChartImageParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the get board chart image params
func (o *GetBoardChartImageParams) SetTitle(title *string) {
	o.Title = title
}

// WithWidth adds the width to the get board chart image params
func (o *GetBoardChartImageParams) WithWidth(width *int32) *GetBoardChartImageParams {
	o.SetWidth(width)
	return o
}

// SetWidth adds the width to the get board chart image params
func (o *GetBoardChartImageParams) SetWidth(width *int32) {
	o.Width = width
}

// WriteToRequest writes these params to a swagger request
func (o *GetBoardChartImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param board
	if err := r.SetPathParam("board", o.Board); err != nil {
		return err
	}

	if o.Height != nil {

		// query param height
		var qrHeight int32
		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := swag.FormatInt32(qrHeight)
		if qHeight != "" {
			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if o.ShowDetails != nil {

		// query param showDetails
		var qrShowDetails bool
		if o.ShowDetails != nil {
			qrShowDetails = *o.ShowDetails
		}
		qShowDetails := swag.FormatBool(qrShowDetails)
		if qShowDetails != "" {
			if err := r.SetQueryParam("showDetails", qShowDetails); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.Width != nil {

		// query param width
		var qrWidth int32
		if o.Width != nil {
			qrWidth = *o.Width
		}
		qWidth := swag.FormatInt32(qrWidth)
		if qWidth != "" {
			if err := r.SetQueryParam("width", qWidth); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
