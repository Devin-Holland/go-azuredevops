// Code generated by go-swagger; DO NOT EDIT.

package publishers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new publishers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for publishers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEventType Get a specific event type.
*/
func (a *Client) GetEventType(params *GetEventTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get Event Type",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/hooks/publishers/{publisherId}/eventtypes/{eventTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventTypeOK), nil

}

/*
ListEventTypes Get the event types for a specific publisher.
*/
func (a *Client) ListEventTypes(params *ListEventTypesParams, authInfo runtime.ClientAuthInfoWriter) (*ListEventTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List Event Types",
		Method:             "GET",
		PathPattern:        "/{organization}/_apis/hooks/publishers/{publisherId}/eventtypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListEventTypesOK), nil

}

/*
QueryInputValues query input values API
*/
func (a *Client) QueryInputValues(params *QueryInputValuesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryInputValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryInputValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Query Input Values",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/hooks/publishers/{publisherId}/inputValuesQuery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryInputValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryInputValuesOK), nil

}

/*
QueryPublishers Query for service hook publishers.
*/
func (a *Client) QueryPublishers(params *QueryPublishersParams, authInfo runtime.ClientAuthInfoWriter) (*QueryPublishersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryPublishersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Query Publishers",
		Method:             "POST",
		PathPattern:        "/{organization}/_apis/hooks/publishersquery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryPublishersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryPublishersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
