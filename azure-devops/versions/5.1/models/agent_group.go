// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentGroup agent group
// swagger:model AgentGroup
type AgentGroup struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation time
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creationTime,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// machine access data
	MachineAccessData []*AgentGroupAccessData `json:"machineAccessData"`

	// machine configuration
	MachineConfiguration *WebAPIUserLoadTestMachineInput `json:"machineConfiguration,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this agent group
func (m *AgentGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineAccessData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentGroup) validateCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgentGroup) validateMachineAccessData(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineAccessData) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineAccessData); i++ {
		if swag.IsZero(m.MachineAccessData[i]) { // not required
			continue
		}

		if m.MachineAccessData[i] != nil {
			if err := m.MachineAccessData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machineAccessData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentGroup) validateMachineConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineConfiguration) { // not required
		return nil
	}

	if m.MachineConfiguration != nil {
		if err := m.MachineConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineConfiguration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentGroup) UnmarshalBinary(b []byte) error {
	var res AgentGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
