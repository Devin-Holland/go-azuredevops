// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphScopeCreationContext This type is the subset of fields that can be provided by the user to create a Vsts scope. Scope creation is currently limited to internal back-compat scenarios. End users that attempt to create a scope with this API will fail.
// swagger:model GraphScopeCreationContext
type GraphScopeCreationContext struct {

	// Set this field to override the default description of this scope's admin group.
	AdminGroupDescription string `json:"adminGroupDescription,omitempty"`

	// All scopes have an Administrator Group that controls access to the contents of the scope. Set this field to use a non-default group name for that administrators group.
	AdminGroupName string `json:"adminGroupName,omitempty"`

	// Set this optional field if this scope is created on behalf of a user other than the user making the request. This should be the Id of the user that is not the requester.
	// Format: uuid
	CreatorID strfmt.UUID `json:"creatorId,omitempty"`

	// The scope must be provided with a unique name within the parent scope. This means the created scope can have a parent or child with the same name, but no siblings with the same name.
	Name string `json:"name,omitempty"`

	// The type of scope being created.
	// Enum: [generic serviceHost teamProject]
	ScopeType interface{} `json:"scopeType,omitempty"`

	// An optional ID that uniquely represents the scope within it's parent scope. If this parameter is not provided, Vsts will generate on automatically.
	// Format: uuid
	StorageKey strfmt.UUID `json:"storageKey,omitempty"`
}

// Validate validates this graph scope creation context
func (m *GraphScopeCreationContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphScopeCreationContext) validateCreatorID(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatorID) { // not required
		return nil
	}

	if err := validate.FormatOf("creatorId", "body", "uuid", m.CreatorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GraphScopeCreationContext) validateStorageKey(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageKey) { // not required
		return nil
	}

	if err := validate.FormatOf("storageKey", "body", "uuid", m.StorageKey.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphScopeCreationContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphScopeCreationContext) UnmarshalBinary(b []byte) error {
	var res GraphScopeCreationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
