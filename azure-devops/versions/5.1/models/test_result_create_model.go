// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestResultCreateModel test result create model
// swagger:model TestResultCreateModel
type TestResultCreateModel struct {

	// area
	Area *ShallowReference `json:"area,omitempty"`

	// associated work items
	AssociatedWorkItems []int32 `json:"associatedWorkItems"`

	// automated test Id
	AutomatedTestID string `json:"automatedTestId,omitempty"`

	// automated test name
	AutomatedTestName string `json:"automatedTestName,omitempty"`

	// automated test storage
	AutomatedTestStorage string `json:"automatedTestStorage,omitempty"`

	// automated test type
	AutomatedTestType string `json:"automatedTestType,omitempty"`

	// automated test type Id
	AutomatedTestTypeID string `json:"automatedTestTypeId,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// completed date
	CompletedDate string `json:"completedDate,omitempty"`

	// computer name
	ComputerName string `json:"computerName,omitempty"`

	// configuration
	Configuration *ShallowReference `json:"configuration,omitempty"`

	// custom fields
	CustomFields []*CustomTestField `json:"customFields"`

	// duration in ms
	DurationInMs string `json:"durationInMs,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// failure type
	FailureType string `json:"failureType,omitempty"`

	// outcome
	Outcome string `json:"outcome,omitempty"`

	// owner
	Owner *IdentityRef `json:"owner,omitempty"`

	// resolution state
	ResolutionState string `json:"resolutionState,omitempty"`

	// run by
	RunBy *IdentityRef `json:"runBy,omitempty"`

	// stack trace
	StackTrace string `json:"stackTrace,omitempty"`

	// started date
	StartedDate string `json:"startedDate,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// test case
	TestCase *ShallowReference `json:"testCase,omitempty"`

	// test case priority
	TestCasePriority string `json:"testCasePriority,omitempty"`

	// test case title
	TestCaseTitle string `json:"testCaseTitle,omitempty"`

	// test point
	TestPoint *ShallowReference `json:"testPoint,omitempty"`
}

// Validate validates this test result create model
func (m *TestResultCreateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestResultCreateModel) validateArea(formats strfmt.Registry) error {

	if swag.IsZero(m.Area) { // not required
		return nil
	}

	if m.Area != nil {
		if err := m.Area.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("area")
			}
			return err
		}
	}

	return nil
}

func (m *TestResultCreateModel) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *TestResultCreateModel) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestResultCreateModel) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TestResultCreateModel) validateRunBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RunBy) { // not required
		return nil
	}

	if m.RunBy != nil {
		if err := m.RunBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runBy")
			}
			return err
		}
	}

	return nil
}

func (m *TestResultCreateModel) validateTestCase(formats strfmt.Registry) error {

	if swag.IsZero(m.TestCase) { // not required
		return nil
	}

	if m.TestCase != nil {
		if err := m.TestCase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testCase")
			}
			return err
		}
	}

	return nil
}

func (m *TestResultCreateModel) validateTestPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.TestPoint) { // not required
		return nil
	}

	if m.TestPoint != nil {
		if err := m.TestPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testPoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestResultCreateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestResultCreateModel) UnmarshalBinary(b []byte) error {
	var res TestResultCreateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
