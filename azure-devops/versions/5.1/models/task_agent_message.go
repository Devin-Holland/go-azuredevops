// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskAgentMessage Provides a contract for receiving messages from the task orchestrator.
// swagger:model TaskAgentMessage
type TaskAgentMessage struct {

	// Gets or sets the body of the message. If the <c>IV</c> property is provided the body will need to be decrypted using the <c>TaskAgentSession.EncryptionKey</c> value in addition to the <c>IV</c>.
	Body string `json:"body,omitempty"`

	// Gets or sets the intialization vector used to encrypt this message.
	Iv []strfmt.Base64 `json:"iv"`

	// Gets or sets the message identifier.
	MessageID int64 `json:"messageId,omitempty"`

	// Gets or sets the message type, describing the data contract found in <c>TaskAgentMessage.Body</c>.
	MessageType string `json:"messageType,omitempty"`
}

// Validate validates this task agent message
func (m *TaskAgentMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentMessage) validateIv(formats strfmt.Registry) error {

	if swag.IsZero(m.Iv) { // not required
		return nil
	}

	for i := 0; i < len(m.Iv); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentMessage) UnmarshalBinary(b []byte) error {
	var res TaskAgentMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
