// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildDeployment build deployment
// swagger:model BuildDeployment
type BuildDeployment struct {

	// deployment
	Deployment *BuildSummary `json:"deployment,omitempty"`

	// source build
	SourceBuild *XamlBuildReference `json:"sourceBuild,omitempty"`
}

// Validate validates this build deployment
func (m *BuildDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceBuild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildDeployment) validateDeployment(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployment) { // not required
		return nil
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDeployment) validateSourceBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceBuild) { // not required
		return nil
	}

	if m.SourceBuild != nil {
		if err := m.SourceBuild.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceBuild")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildDeployment) UnmarshalBinary(b []byte) error {
	var res BuildDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
