// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeedUpdate Update a feed definition with these new values.
// swagger:model FeedUpdate
type FeedUpdate struct {

	// If set, the feed will allow upload of packages that exist on the upstream
	AllowUpstreamNameConflict bool `json:"allowUpstreamNameConflict,omitempty"`

	// If set, this feed supports generation of package badges.
	BadgesEnabled bool `json:"badgesEnabled,omitempty"`

	// The view that the feed administrator has indicated is the default experience for readers.
	// Format: uuid
	DefaultViewID strfmt.UUID `json:"defaultViewId,omitempty"`

	// A description for the feed.  Descriptions must not exceed 255 characters.
	Description string `json:"description,omitempty"`

	// If set, feed will hide all deleted/unpublished versions
	HideDeletedPackageVersions bool `json:"hideDeletedPackageVersions,omitempty"`

	// A GUID that uniquely identifies this feed.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// A name for the feed. feed names must follow these rules: <list type="bullet"><item><description> Must not exceed 64 characters </description></item><item><description> Must not contain whitespaces </description></item><item><description> Must not start with an underscore or a period </description></item><item><description> Must not end with a period </description></item><item><description> Must not contain any of the following illegal characters: <![CDATA[ @, ~, ;, {, }, \, +, =, <, >, |, /, \\, ?, :, &, $, *, \", #, [, ] ]]></description></item></list>
	Name string `json:"name,omitempty"`

	// OBSOLETE: If set, the feed can proxy packages from an upstream feed
	UpstreamEnabled bool `json:"upstreamEnabled,omitempty"`

	// A list of sources that this feed will fetch packages from.  An empty list indicates that this feed will not search any additional sources for packages.
	UpstreamSources []*UpstreamSource `json:"upstreamSources"`
}

// Validate validates this feed update
func (m *FeedUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultViewID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedUpdate) validateDefaultViewID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultViewID) { // not required
		return nil
	}

	if err := validate.FormatOf("defaultViewId", "body", "uuid", m.DefaultViewID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FeedUpdate) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FeedUpdate) validateUpstreamSources(formats strfmt.Registry) error {

	if swag.IsZero(m.UpstreamSources) { // not required
		return nil
	}

	for i := 0; i < len(m.UpstreamSources); i++ {
		if swag.IsZero(m.UpstreamSources[i]) { // not required
			continue
		}

		if m.UpstreamSources[i] != nil {
			if err := m.UpstreamSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upstreamSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedUpdate) UnmarshalBinary(b []byte) error {
	var res FeedUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
