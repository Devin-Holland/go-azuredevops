// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentUpdate Details about an agent update.
// swagger:model TaskAgentUpdate
type TaskAgentUpdate struct {

	// Current state of this agent update.
	CurrentState string `json:"currentState,omitempty"`

	// Reason for this update.
	Reason *TaskAgentUpdateReason `json:"reason,omitempty"`

	// Date on which this update was requested.
	// Format: date-time
	RequestTime strfmt.DateTime `json:"requestTime,omitempty"`

	// Identity which requested this update.
	RequestedBy *IdentityRef `json:"requestedBy,omitempty"`

	// Source agent version of the update.
	SourceVersion *PackageVersion `json:"sourceVersion,omitempty"`

	// Target agent version of the update.
	TargetVersion *PackageVersion `json:"targetVersion,omitempty"`
}

// Validate validates this task agent update
func (m *TaskAgentUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentUpdate) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentUpdate) validateRequestTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("requestTime", "body", "date-time", m.RequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentUpdate) validateRequestedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedBy) { // not required
		return nil
	}

	if m.RequestedBy != nil {
		if err := m.RequestedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentUpdate) validateSourceVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceVersion) { // not required
		return nil
	}

	if m.SourceVersion != nil {
		if err := m.SourceVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceVersion")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentUpdate) validateTargetVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetVersion) { // not required
		return nil
	}

	if m.TargetVersion != nil {
		if err := m.TargetVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentUpdate) UnmarshalBinary(b []byte) error {
	var res TaskAgentUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
