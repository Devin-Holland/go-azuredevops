// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContainerImageTrigger container image trigger
// swagger:model ContainerImageTrigger
type ContainerImageTrigger struct {
	ReleaseTriggerBase

	// Alias of the trigger.
	Alias string `json:"alias,omitempty"`

	// List tag filters applied while trigger.
	TagFilters []*TagFilter `json:"tagFilters"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContainerImageTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseTriggerBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseTriggerBase = aO0

	// now for regular properties
	var propsContainerImageTrigger struct {
		Alias string `json:"alias,omitempty"`

		TagFilters []*TagFilter `json:"tagFilters"`
	}
	if err := swag.ReadJSON(raw, &propsContainerImageTrigger); err != nil {
		return err
	}
	m.Alias = propsContainerImageTrigger.Alias

	m.TagFilters = propsContainerImageTrigger.TagFilters

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContainerImageTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseTriggerBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsContainerImageTrigger struct {
		Alias string `json:"alias,omitempty"`

		TagFilters []*TagFilter `json:"tagFilters"`
	}
	propsContainerImageTrigger.Alias = m.Alias

	propsContainerImageTrigger.TagFilters = m.TagFilters

	jsonDataPropsContainerImageTrigger, errContainerImageTrigger := swag.WriteJSON(propsContainerImageTrigger)
	if errContainerImageTrigger != nil {
		return nil, errContainerImageTrigger
	}
	_parts = append(_parts, jsonDataPropsContainerImageTrigger)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this container image trigger
func (m *ContainerImageTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseTriggerBase
	if err := m.ReleaseTriggerBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerImageTrigger) validateTagFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.TagFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.TagFilters); i++ {
		if swag.IsZero(m.TagFilters[i]) { // not required
			continue
		}

		if m.TagFilters[i] != nil {
			if err := m.TagFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerImageTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerImageTrigger) UnmarshalBinary(b []byte) error {
	var res ContainerImageTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
