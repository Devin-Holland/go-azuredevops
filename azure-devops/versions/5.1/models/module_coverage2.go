// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModuleCoverage2 module coverage2
// swagger:model ModuleCoverage2
type ModuleCoverage2 struct {

	// block count
	BlockCount int32 `json:"blockCount,omitempty"`

	// block data
	BlockData []strfmt.Base64 `json:"blockData"`

	// block data length
	BlockDataLength int32 `json:"blockDataLength,omitempty"`

	// blocks covered
	BlocksCovered int32 `json:"blocksCovered,omitempty"`

	// blocks not covered
	BlocksNotCovered int32 `json:"blocksNotCovered,omitempty"`

	// coverage file Url
	CoverageFileURL string `json:"coverageFileUrl,omitempty"`

	// coverage Id
	CoverageID int32 `json:"coverageId,omitempty"`

	// lines covered
	LinesCovered int32 `json:"linesCovered,omitempty"`

	// lines not covered
	LinesNotCovered int32 `json:"linesNotCovered,omitempty"`

	// lines partially covered
	LinesPartiallyCovered int32 `json:"linesPartiallyCovered,omitempty"`

	// module Id
	ModuleID int32 `json:"moduleId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// signature
	// Format: uuid
	Signature strfmt.UUID `json:"signature,omitempty"`

	// signature age
	SignatureAge int32 `json:"signatureAge,omitempty"`
}

// Validate validates this module coverage2
func (m *ModuleCoverage2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleCoverage2) validateBlockData(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockData) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockData); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *ModuleCoverage2) validateSignature(formats strfmt.Registry) error {

	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if err := validate.FormatOf("signature", "body", "uuid", m.Signature.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleCoverage2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleCoverage2) UnmarshalBinary(b []byte) error {
	var res ModuleCoverage2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
