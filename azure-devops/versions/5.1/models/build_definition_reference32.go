// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildDefinitionReference32 For back-compat with extensions that use the old Steps format instead of Process and Phases
// swagger:model BuildDefinitionReference3_2
type BuildDefinitionReference32 struct {
	DefinitionReference

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// The author of the definition.
	AuthoredBy *IdentityRef `json:"authoredBy,omitempty"`

	// A reference to the definition that this definition is a draft of, if this is a draft definition.
	DraftOf *DefinitionReference `json:"draftOf,omitempty"`

	// The list of drafts associated with this definition, if this is not a draft definition.
	Drafts []*DefinitionReference `json:"drafts"`

	// metrics
	Metrics []*BuildMetric `json:"metrics"`

	// The quality of the definition document (draft, etc.)
	// Enum: [definition draft]
	Quality interface{} `json:"quality,omitempty"`

	// The default queue for builds run against this definition.
	Queue *AgentPoolQueue `json:"queue,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BuildDefinitionReference32) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DefinitionReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DefinitionReference = aO0

	// now for regular properties
	var propsBuildDefinitionReference32 struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		AuthoredBy *IdentityRef `json:"authoredBy,omitempty"`

		DraftOf *DefinitionReference `json:"draftOf,omitempty"`

		Drafts []*DefinitionReference `json:"drafts"`

		Metrics []*BuildMetric `json:"metrics"`

		Quality interface{} `json:"quality,omitempty"`

		Queue *AgentPoolQueue `json:"queue,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsBuildDefinitionReference32); err != nil {
		return err
	}
	m.Links = propsBuildDefinitionReference32.Links

	m.AuthoredBy = propsBuildDefinitionReference32.AuthoredBy

	m.DraftOf = propsBuildDefinitionReference32.DraftOf

	m.Drafts = propsBuildDefinitionReference32.Drafts

	m.Metrics = propsBuildDefinitionReference32.Metrics

	m.Quality = propsBuildDefinitionReference32.Quality

	m.Queue = propsBuildDefinitionReference32.Queue

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BuildDefinitionReference32) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DefinitionReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBuildDefinitionReference32 struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		AuthoredBy *IdentityRef `json:"authoredBy,omitempty"`

		DraftOf *DefinitionReference `json:"draftOf,omitempty"`

		Drafts []*DefinitionReference `json:"drafts"`

		Metrics []*BuildMetric `json:"metrics"`

		Quality interface{} `json:"quality,omitempty"`

		Queue *AgentPoolQueue `json:"queue,omitempty"`
	}
	propsBuildDefinitionReference32.Links = m.Links

	propsBuildDefinitionReference32.AuthoredBy = m.AuthoredBy

	propsBuildDefinitionReference32.DraftOf = m.DraftOf

	propsBuildDefinitionReference32.Drafts = m.Drafts

	propsBuildDefinitionReference32.Metrics = m.Metrics

	propsBuildDefinitionReference32.Quality = m.Quality

	propsBuildDefinitionReference32.Queue = m.Queue

	jsonDataPropsBuildDefinitionReference32, errBuildDefinitionReference32 := swag.WriteJSON(propsBuildDefinitionReference32)
	if errBuildDefinitionReference32 != nil {
		return nil, errBuildDefinitionReference32
	}
	_parts = append(_parts, jsonDataPropsBuildDefinitionReference32)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this build definition reference3 2
func (m *BuildDefinitionReference32) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DefinitionReference
	if err := m.DefinitionReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthoredBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDraftOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrafts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildDefinitionReference32) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinitionReference32) validateAuthoredBy(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthoredBy) { // not required
		return nil
	}

	if m.AuthoredBy != nil {
		if err := m.AuthoredBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authoredBy")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinitionReference32) validateDraftOf(formats strfmt.Registry) error {

	if swag.IsZero(m.DraftOf) { // not required
		return nil
	}

	if m.DraftOf != nil {
		if err := m.DraftOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("draftOf")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinitionReference32) validateDrafts(formats strfmt.Registry) error {

	if swag.IsZero(m.Drafts) { // not required
		return nil
	}

	for i := 0; i < len(m.Drafts); i++ {
		if swag.IsZero(m.Drafts[i]) { // not required
			continue
		}

		if m.Drafts[i] != nil {
			if err := m.Drafts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drafts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinitionReference32) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinitionReference32) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildDefinitionReference32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildDefinitionReference32) UnmarshalBinary(b []byte) error {
	var res BuildDefinitionReference32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
