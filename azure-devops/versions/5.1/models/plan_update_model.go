// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PlanUpdateModel A model class used for creating and updating test plans.
// swagger:model PlanUpdateModel
type PlanUpdateModel struct {

	// Area path to which the test plan belongs. This should be set to area path of the team that works on this test plan.
	Area *ShallowReference `json:"area,omitempty"`

	// Build ID of the build whose quality is tested by the tests in this test plan. For automated testing, this build ID is used to find the test binaries that contain automated test methods.
	Build *ShallowReference `json:"build,omitempty"`

	// The Build Definition that generates a build associated with this test plan.
	BuildDefinition *ShallowReference `json:"buildDefinition,omitempty"`

	// IDs of configurations to be applied when new test suites and test cases are added to the test plan.
	ConfigurationIds []int32 `json:"configurationIds"`

	// Description of the test plan.
	Description string `json:"description,omitempty"`

	// End date for the test plan.
	EndDate string `json:"endDate,omitempty"`

	// Iteration path assigned to the test plan. This indicates when the target iteration by which the testing in this plan is supposed to be complete and the product is ready to be released.
	Iteration string `json:"iteration,omitempty"`

	// Name of the test plan.
	Name string `json:"name,omitempty"`

	// Owner of the test plan.
	Owner *IdentityRef `json:"owner,omitempty"`

	// Release Environment to be used to deploy the build and run automated tests from this test plan.
	ReleaseEnvironmentDefinition *ReleaseEnvironmentDefinitionReference `json:"releaseEnvironmentDefinition,omitempty"`

	// Start date for the test plan.
	StartDate string `json:"startDate,omitempty"`

	// State of the test plan.
	State string `json:"state,omitempty"`

	// Test Outcome settings
	TestOutcomeSettings *TestOutcomeSettings `json:"testOutcomeSettings,omitempty"`
}

// Validate validates this plan update model
func (m *PlanUpdateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEnvironmentDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestOutcomeSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanUpdateModel) validateArea(formats strfmt.Registry) error {

	if swag.IsZero(m.Area) { // not required
		return nil
	}

	if m.Area != nil {
		if err := m.Area.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("area")
			}
			return err
		}
	}

	return nil
}

func (m *PlanUpdateModel) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *PlanUpdateModel) validateBuildDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildDefinition) { // not required
		return nil
	}

	if m.BuildDefinition != nil {
		if err := m.BuildDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *PlanUpdateModel) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *PlanUpdateModel) validateReleaseEnvironmentDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEnvironmentDefinition) { // not required
		return nil
	}

	if m.ReleaseEnvironmentDefinition != nil {
		if err := m.ReleaseEnvironmentDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseEnvironmentDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *PlanUpdateModel) validateTestOutcomeSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TestOutcomeSettings) { // not required
		return nil
	}

	if m.TestOutcomeSettings != nil {
		if err := m.TestOutcomeSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testOutcomeSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanUpdateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanUpdateModel) UnmarshalBinary(b []byte) error {
	var res PlanUpdateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
