// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GraphSubject Top-level graph entity
// swagger:model GraphSubject
type GraphSubject struct {
	GraphSubjectBase

	// [Internal Use Only] The legacy descriptor is here in case you need to access old version IMS using identity descriptor.
	LegacyDescriptor string `json:"legacyDescriptor,omitempty"`

	// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
	Origin string `json:"origin,omitempty"`

	// The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.
	OriginID string `json:"originId,omitempty"`

	// This field identifies the type of the graph subject (ex: Group, Scope, User).
	SubjectKind string `json:"subjectKind,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GraphSubject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphSubjectBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphSubjectBase = aO0

	// now for regular properties
	var propsGraphSubject struct {
		LegacyDescriptor string `json:"legacyDescriptor,omitempty"`

		Origin string `json:"origin,omitempty"`

		OriginID string `json:"originId,omitempty"`

		SubjectKind string `json:"subjectKind,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsGraphSubject); err != nil {
		return err
	}
	m.LegacyDescriptor = propsGraphSubject.LegacyDescriptor

	m.Origin = propsGraphSubject.Origin

	m.OriginID = propsGraphSubject.OriginID

	m.SubjectKind = propsGraphSubject.SubjectKind

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GraphSubject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GraphSubjectBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsGraphSubject struct {
		LegacyDescriptor string `json:"legacyDescriptor,omitempty"`

		Origin string `json:"origin,omitempty"`

		OriginID string `json:"originId,omitempty"`

		SubjectKind string `json:"subjectKind,omitempty"`
	}
	propsGraphSubject.LegacyDescriptor = m.LegacyDescriptor

	propsGraphSubject.Origin = m.Origin

	propsGraphSubject.OriginID = m.OriginID

	propsGraphSubject.SubjectKind = m.SubjectKind

	jsonDataPropsGraphSubject, errGraphSubject := swag.WriteJSON(propsGraphSubject)
	if errGraphSubject != nil {
		return nil, errGraphSubject
	}
	_parts = append(_parts, jsonDataPropsGraphSubject)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this graph subject
func (m *GraphSubject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphSubjectBase
	if err := m.GraphSubjectBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *GraphSubject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphSubject) UnmarshalBinary(b []byte) error {
	var res GraphSubject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
