// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseReference Reference to a release.
// swagger:model ReleaseReference
type ReleaseReference struct {

	// Number of Release Attempt.
	Attempt int32 `json:"attempt,omitempty"`

	// Release Creation Date.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Release definition ID.
	DefinitionID int32 `json:"definitionId,omitempty"`

	// Environment creation Date.
	// Format: date-time
	EnvironmentCreationDate strfmt.DateTime `json:"environmentCreationDate,omitempty"`

	// Release environment definition ID.
	EnvironmentDefinitionID int32 `json:"environmentDefinitionId,omitempty"`

	// Release environment definition name.
	EnvironmentDefinitionName string `json:"environmentDefinitionName,omitempty"`

	// Release environment ID.
	EnvironmentID int32 `json:"environmentId,omitempty"`

	// Release environment name.
	EnvironmentName string `json:"environmentName,omitempty"`

	// Release ID.
	ID int32 `json:"id,omitempty"`

	// Release name.
	Name string `json:"name,omitempty"`
}

// Validate validates this release reference
func (m *ReleaseReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseReference) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseReference) validateEnvironmentCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentCreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("environmentCreationDate", "body", "date-time", m.EnvironmentCreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseReference) UnmarshalBinary(b []byte) error {
	var res ReleaseReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
