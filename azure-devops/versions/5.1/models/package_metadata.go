// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageMetadata Represents a downloadable package.
// swagger:model PackageMetadata
type PackageMetadata struct {

	// The date the package was created
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// A direct link to download the package.
	DownloadURL string `json:"downloadUrl,omitempty"`

	// The UI uses this to display instructions, i.e. "unzip MyAgent.zip"
	Filename string `json:"filename,omitempty"`

	// MD5 hash as a base64 string
	HashValue string `json:"hashValue,omitempty"`

	// A link to documentation
	InfoURL string `json:"infoUrl,omitempty"`

	// The platform (win7, linux, etc.)
	Platform string `json:"platform,omitempty"`

	// The type of package (e.g. "agent")
	Type string `json:"type,omitempty"`

	// The package version.
	Version *PackageVersion `json:"version,omitempty"`
}

// Validate validates this package metadata
func (m *PackageMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageMetadata) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageMetadata) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageMetadata) UnmarshalBinary(b []byte) error {
	var res PackageMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
