// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRunMessage test run message
// swagger:model TestRunMessage
type TestRunMessage struct {

	// agent Id
	AgentID string `json:"agentId,omitempty"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// logged date
	// Format: date-time
	LoggedDate strfmt.DateTime `json:"loggedDate,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// message Id
	MessageID string `json:"messageId,omitempty"`

	// message source
	// Enum: [setupScript cleanupScript validation other autCounterCollection]
	MessageSource interface{} `json:"messageSource,omitempty"`

	// message type
	// Enum: [info output error warning critical]
	MessageType interface{} `json:"messageType,omitempty"`

	// test run Id
	TestRunID string `json:"testRunId,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this test run message
func (m *TestRunMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoggedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunMessage) validateLoggedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LoggedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("loggedDate", "body", "date-time", m.LoggedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestRunMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRunMessage) UnmarshalBinary(b []byte) error {
	var res TestRunMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
