// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestResultReset2 test result reset2
// swagger:model TestResultReset2
type TestResultReset2 struct {

	// audit identity
	// Format: uuid
	AuditIdentity strfmt.UUID `json:"auditIdentity,omitempty"`

	// date modified
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// test result Id
	TestResultID int32 `json:"testResultId,omitempty"`

	// test result r v
	TestResultRV []strfmt.Base64 `json:"testResultRV"`

	// test run Id
	TestRunID int32 `json:"testRunId,omitempty"`
}

// Validate validates this test result reset2
func (m *TestResultReset2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestResultRV(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestResultReset2) validateAuditIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditIdentity) { // not required
		return nil
	}

	if err := validate.FormatOf("auditIdentity", "body", "uuid", m.AuditIdentity.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResultReset2) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResultReset2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResultReset2) validateTestResultRV(formats strfmt.Registry) error {

	if swag.IsZero(m.TestResultRV) { // not required
		return nil
	}

	for i := 0; i < len(m.TestResultRV); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestResultReset2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestResultReset2) UnmarshalBinary(b []byte) error {
	var res TestResultReset2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
