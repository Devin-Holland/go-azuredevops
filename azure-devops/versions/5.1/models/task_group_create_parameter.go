// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskGroupCreateParameter task group create parameter
// swagger:model TaskGroupCreateParameter
type TaskGroupCreateParameter struct {

	// Sets author name of the task group.
	Author string `json:"author,omitempty"`

	// Sets category of the task group.
	Category string `json:"category,omitempty"`

	// Sets description of the task group.
	Description string `json:"description,omitempty"`

	// Sets friendly name of the task group.
	FriendlyName string `json:"friendlyName,omitempty"`

	// Sets url icon of the task group.
	IconURL string `json:"iconUrl,omitempty"`

	// Sets input for the task group.
	Inputs []*TaskInputDefinition `json:"inputs"`

	// Sets display name of the task group.
	InstanceNameFormat string `json:"instanceNameFormat,omitempty"`

	// Sets name of the task group.
	Name string `json:"name,omitempty"`

	// Sets parent task group Id. This is used while creating a draft task group.
	// Format: uuid
	ParentDefinitionID strfmt.UUID `json:"parentDefinitionId,omitempty"`

	// Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.
	RunsOn []string `json:"runsOn"`

	// Sets tasks for the task group.
	Tasks []*TaskGroupStep `json:"tasks"`

	// Sets version of the task group.
	Version *TaskVersion `json:"version,omitempty"`
}

// Validate validates this task group create parameter
func (m *TaskGroupCreateParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskGroupCreateParameter) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGroupCreateParameter) validateParentDefinitionID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentDefinitionID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentDefinitionId", "body", "uuid", m.ParentDefinitionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskGroupCreateParameter) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskGroupCreateParameter) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskGroupCreateParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskGroupCreateParameter) UnmarshalBinary(b []byte) error {
	var res TaskGroupCreateParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
