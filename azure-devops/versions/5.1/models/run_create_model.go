// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RunCreateModel Test run create details.
// swagger:model RunCreateModel
type RunCreateModel struct {

	// true if test run is automated, false otherwise. By default it will be false.
	Automated bool `json:"automated,omitempty"`

	// An abstracted reference to the build that it belongs.
	Build *ShallowReference `json:"build,omitempty"`

	// Drop location of the build used for test run.
	BuildDropLocation string `json:"buildDropLocation,omitempty"`

	// Flavor of the build used for test run. (E.g: Release, Debug)
	BuildFlavor string `json:"buildFlavor,omitempty"`

	// Platform of the build used for test run. (E.g.: x86, amd64)
	BuildPlatform string `json:"buildPlatform,omitempty"`

	// BuildReference of the test run.
	BuildReference *BuildConfiguration `json:"buildReference,omitempty"`

	// Comments entered by those analyzing the run.
	Comment string `json:"comment,omitempty"`

	// Completed date time of the run.
	CompleteDate string `json:"completeDate,omitempty"`

	// IDs of the test configurations associated with the run.
	ConfigurationIds []int32 `json:"configurationIds"`

	// Name of the test controller used for automated run.
	Controller string `json:"controller,omitempty"`

	// Additional properties of test Run.
	CustomTestFields []*CustomTestField `json:"customTestFields"`

	// An abstracted reference to DtlAutEnvironment.
	DtlAutEnvironment *ShallowReference `json:"dtlAutEnvironment,omitempty"`

	// An abstracted reference to DtlTestEnvironment.
	DtlTestEnvironment *ShallowReference `json:"dtlTestEnvironment,omitempty"`

	// Due date and time for test run.
	DueDate string `json:"dueDate,omitempty"`

	// environment details
	EnvironmentDetails *DtlEnvironmentDetails `json:"environmentDetails,omitempty"`

	// Error message associated with the run.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Filter used for discovering the Run.
	Filter *RunFilter `json:"filter,omitempty"`

	// The iteration in which to create the run. Root iteration of the team project will be default
	Iteration string `json:"iteration,omitempty"`

	// Name of the test run.
	Name string `json:"name,omitempty"`

	// Display name of the owner of the run.
	Owner *IdentityRef `json:"owner,omitempty"`

	// Reference of the pipeline to which this test run belongs. PipelineReference.PipelineId should be equal to RunCreateModel.Build.Id
	PipelineReference *PipelineReference `json:"pipelineReference,omitempty"`

	// An abstracted reference to the plan that it belongs.
	Plan *ShallowReference `json:"plan,omitempty"`

	// IDs of the test points to use in the run.
	PointIds []int32 `json:"pointIds"`

	// URI of release environment associated with the run.
	ReleaseEnvironmentURI string `json:"releaseEnvironmentUri,omitempty"`

	// Reference to release associated with test run.
	ReleaseReference *ReleaseReference `json:"releaseReference,omitempty"`

	// URI of release associated with the run.
	ReleaseURI string `json:"releaseUri,omitempty"`

	// Run summary for run Type = NoConfigRun.
	RunSummary []*RunSummaryModel `json:"runSummary"`

	// Timespan till the Run RunTimesout.
	RunTimeout string `json:"runTimeout,omitempty"`

	// SourceWorkFlow(CI/CD) of the test run.
	SourceWorkflow string `json:"sourceWorkflow,omitempty"`

	// Start date time of the run.
	StartDate string `json:"startDate,omitempty"`

	// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
	State string `json:"state,omitempty"`

	// Tags to attach with the test run, maximum of 5 tags can be added to run.
	Tags []*TestTag `json:"tags"`

	// TestConfgurationMapping of the test run.
	TestConfigurationsMapping string `json:"testConfigurationsMapping,omitempty"`

	// ID of the test environment associated with the run.
	TestEnvironmentID string `json:"testEnvironmentId,omitempty"`

	// An abstracted reference to the test settings resource.
	TestSettings *ShallowReference `json:"testSettings,omitempty"`

	// Type of the run(RunType) Valid Values : (Unspecified, Normal, Blocking, Web, MtrRunInitiatedFromWeb, RunWithDtlEnv, NoConfigRun)
	Type string `json:"type,omitempty"`
}

// Validate validates this run create model
func (m *RunCreateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTestFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDtlAutEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDtlTestEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunCreateModel) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateBuildReference(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildReference) { // not required
		return nil
	}

	if m.BuildReference != nil {
		if err := m.BuildReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildReference")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateCustomTestFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomTestFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTestFields); i++ {
		if swag.IsZero(m.CustomTestFields[i]) { // not required
			continue
		}

		if m.CustomTestFields[i] != nil {
			if err := m.CustomTestFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTestFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunCreateModel) validateDtlAutEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.DtlAutEnvironment) { // not required
		return nil
	}

	if m.DtlAutEnvironment != nil {
		if err := m.DtlAutEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtlAutEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateDtlTestEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.DtlTestEnvironment) { // not required
		return nil
	}

	if m.DtlTestEnvironment != nil {
		if err := m.DtlTestEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtlTestEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateEnvironmentDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentDetails) { // not required
		return nil
	}

	if m.EnvironmentDetails != nil {
		if err := m.EnvironmentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validatePipelineReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineReference) { // not required
		return nil
	}

	if m.PipelineReference != nil {
		if err := m.PipelineReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipelineReference")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateReleaseReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseReference) { // not required
		return nil
	}

	if m.ReleaseReference != nil {
		if err := m.ReleaseReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseReference")
			}
			return err
		}
	}

	return nil
}

func (m *RunCreateModel) validateRunSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.RunSummary); i++ {
		if swag.IsZero(m.RunSummary[i]) { // not required
			continue
		}

		if m.RunSummary[i] != nil {
			if err := m.RunSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunCreateModel) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunCreateModel) validateTestSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSettings) { // not required
		return nil
	}

	if m.TestSettings != nil {
		if err := m.TestSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunCreateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunCreateModel) UnmarshalBinary(b []byte) error {
	var res RunCreateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
