// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyAuthorization proxy authorization
// swagger:model ProxyAuthorization
type ProxyAuthorization struct {

	// Gets or sets the endpoint used to obtain access tokens from the configured token service.
	AuthorizationURL string `json:"authorizationUrl,omitempty"`

	// Gets or sets the client identifier for this proxy.
	// Format: uuid
	ClientID strfmt.UUID `json:"clientId,omitempty"`

	// Gets or sets the user identity to authorize for on-prem.
	Identity *IdentityDescriptor `json:"identity,omitempty"`

	// Gets or sets the public key used to verify the identity of this proxy. Only specify on hosted.
	PublicKey *PublicKey `json:"publicKey,omitempty"`
}

// Validate validates this proxy authorization
func (m *ProxyAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyAuthorization) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.FormatOf("clientId", "body", "uuid", m.ClientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProxyAuthorization) validateIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *ProxyAuthorization) validatePublicKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyAuthorization) UnmarshalBinary(b []byte) error {
	var res ProxyAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
