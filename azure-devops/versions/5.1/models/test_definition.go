// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestDefinition test definition
// swagger:model TestDefinition
type TestDefinition struct {
	TestDefinitionBasic

	// description
	Description string `json:"description,omitempty"`

	// load generation geo locations
	LoadGenerationGeoLocations []*LoadGenerationGeoLocation `json:"loadGenerationGeoLocations"`

	// load test definition source
	LoadTestDefinitionSource string `json:"loadTestDefinitionSource,omitempty"`

	// run settings
	RunSettings *LoadTestRunSettings `json:"runSettings,omitempty"`

	// static agent run settings
	StaticAgentRunSettings *StaticAgentRunSetting `json:"staticAgentRunSettings,omitempty"`

	// test details
	TestDetails LoadTest `json:"testDetails,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestDefinitionBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestDefinitionBasic = aO0

	// now for regular properties
	var propsTestDefinition struct {
		Description string `json:"description,omitempty"`

		LoadGenerationGeoLocations []*LoadGenerationGeoLocation `json:"loadGenerationGeoLocations"`

		LoadTestDefinitionSource string `json:"loadTestDefinitionSource,omitempty"`

		RunSettings *LoadTestRunSettings `json:"runSettings,omitempty"`

		StaticAgentRunSettings *StaticAgentRunSetting `json:"staticAgentRunSettings,omitempty"`

		TestDetails LoadTest `json:"testDetails,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestDefinition); err != nil {
		return err
	}
	m.Description = propsTestDefinition.Description

	m.LoadGenerationGeoLocations = propsTestDefinition.LoadGenerationGeoLocations

	m.LoadTestDefinitionSource = propsTestDefinition.LoadTestDefinitionSource

	m.RunSettings = propsTestDefinition.RunSettings

	m.StaticAgentRunSettings = propsTestDefinition.StaticAgentRunSettings

	m.TestDetails = propsTestDefinition.TestDetails

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestDefinitionBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestDefinition struct {
		Description string `json:"description,omitempty"`

		LoadGenerationGeoLocations []*LoadGenerationGeoLocation `json:"loadGenerationGeoLocations"`

		LoadTestDefinitionSource string `json:"loadTestDefinitionSource,omitempty"`

		RunSettings *LoadTestRunSettings `json:"runSettings,omitempty"`

		StaticAgentRunSettings *StaticAgentRunSetting `json:"staticAgentRunSettings,omitempty"`

		TestDetails LoadTest `json:"testDetails,omitempty"`
	}
	propsTestDefinition.Description = m.Description

	propsTestDefinition.LoadGenerationGeoLocations = m.LoadGenerationGeoLocations

	propsTestDefinition.LoadTestDefinitionSource = m.LoadTestDefinitionSource

	propsTestDefinition.RunSettings = m.RunSettings

	propsTestDefinition.StaticAgentRunSettings = m.StaticAgentRunSettings

	propsTestDefinition.TestDetails = m.TestDetails

	jsonDataPropsTestDefinition, errTestDefinition := swag.WriteJSON(propsTestDefinition)
	if errTestDefinition != nil {
		return nil, errTestDefinition
	}
	_parts = append(_parts, jsonDataPropsTestDefinition)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test definition
func (m *TestDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestDefinitionBasic
	if err := m.TestDefinitionBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadGenerationGeoLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticAgentRunSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestDefinition) validateLoadGenerationGeoLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadGenerationGeoLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadGenerationGeoLocations); i++ {
		if swag.IsZero(m.LoadGenerationGeoLocations[i]) { // not required
			continue
		}

		if m.LoadGenerationGeoLocations[i] != nil {
			if err := m.LoadGenerationGeoLocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loadGenerationGeoLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestDefinition) validateRunSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSettings) { // not required
		return nil
	}

	if m.RunSettings != nil {
		if err := m.RunSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runSettings")
			}
			return err
		}
	}

	return nil
}

func (m *TestDefinition) validateStaticAgentRunSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.StaticAgentRunSettings) { // not required
		return nil
	}

	if m.StaticAgentRunSettings != nil {
		if err := m.StaticAgentRunSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staticAgentRunSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestDefinition) UnmarshalBinary(b []byte) error {
	var res TestDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
