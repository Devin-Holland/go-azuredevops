// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessControlList The AccessControlList class is meant to associate a set of AccessControlEntries with a security token and its inheritance settings.
// swagger:model AccessControlList
type AccessControlList struct {

	// Storage of permissions keyed on the identity the permission is for.
	AcesDictionary map[string]AccessControlEntry `json:"acesDictionary,omitempty"`

	// True if this ACL holds ACEs that have extended information.
	IncludeExtendedInfo bool `json:"includeExtendedInfo,omitempty"`

	// True if the given token inherits permissions from parents.
	InheritPermissions bool `json:"inheritPermissions,omitempty"`

	// The token that this AccessControlList is for.
	Token string `json:"token,omitempty"`
}

// Validate validates this access control list
func (m *AccessControlList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcesDictionary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessControlList) validateAcesDictionary(formats strfmt.Registry) error {

	if swag.IsZero(m.AcesDictionary) { // not required
		return nil
	}

	for k := range m.AcesDictionary {

		if err := validate.Required("acesDictionary"+"."+k, "body", m.AcesDictionary[k]); err != nil {
			return err
		}
		if val, ok := m.AcesDictionary[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessControlList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessControlList) UnmarshalBinary(b []byte) error {
	var res AccessControlList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
