// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Board board
// swagger:model Board
type Board struct {
	BoardReference

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// allowed mappings
	AllowedMappings map[string]map[string][]string `json:"allowedMappings,omitempty"`

	// can edit
	CanEdit bool `json:"canEdit,omitempty"`

	// columns
	Columns []*BoardColumn `json:"columns"`

	// fields
	Fields *BoardFields `json:"fields,omitempty"`

	// is valid
	IsValid bool `json:"isValid,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// rows
	Rows []*BoardRow `json:"rows"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Board) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BoardReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BoardReference = aO0

	// now for regular properties
	var propsBoard struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		AllowedMappings map[string]map[string][]string `json:"allowedMappings,omitempty"`

		CanEdit bool `json:"canEdit,omitempty"`

		Columns []*BoardColumn `json:"columns"`

		Fields *BoardFields `json:"fields,omitempty"`

		IsValid bool `json:"isValid,omitempty"`

		Revision int32 `json:"revision,omitempty"`

		Rows []*BoardRow `json:"rows"`
	}
	if err := swag.ReadJSON(raw, &propsBoard); err != nil {
		return err
	}
	m.Links = propsBoard.Links

	m.AllowedMappings = propsBoard.AllowedMappings

	m.CanEdit = propsBoard.CanEdit

	m.Columns = propsBoard.Columns

	m.Fields = propsBoard.Fields

	m.IsValid = propsBoard.IsValid

	m.Revision = propsBoard.Revision

	m.Rows = propsBoard.Rows

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Board) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BoardReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBoard struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		AllowedMappings map[string]map[string][]string `json:"allowedMappings,omitempty"`

		CanEdit bool `json:"canEdit,omitempty"`

		Columns []*BoardColumn `json:"columns"`

		Fields *BoardFields `json:"fields,omitempty"`

		IsValid bool `json:"isValid,omitempty"`

		Revision int32 `json:"revision,omitempty"`

		Rows []*BoardRow `json:"rows"`
	}
	propsBoard.Links = m.Links

	propsBoard.AllowedMappings = m.AllowedMappings

	propsBoard.CanEdit = m.CanEdit

	propsBoard.Columns = m.Columns

	propsBoard.Fields = m.Fields

	propsBoard.IsValid = m.IsValid

	propsBoard.Revision = m.Revision

	propsBoard.Rows = m.Rows

	jsonDataPropsBoard, errBoard := swag.WriteJSON(propsBoard)
	if errBoard != nil {
		return nil, errBoard
	}
	_parts = append(_parts, jsonDataPropsBoard)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this board
func (m *Board) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BoardReference
	if err := m.BoardReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Board) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Board) validateColumns(formats strfmt.Registry) error {

	if swag.IsZero(m.Columns) { // not required
		return nil
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Board) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	if m.Fields != nil {
		if err := m.Fields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fields")
			}
			return err
		}
	}

	return nil
}

func (m *Board) validateRows(formats strfmt.Registry) error {

	if swag.IsZero(m.Rows) { // not required
		return nil
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Board) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Board) UnmarshalBinary(b []byte) error {
	var res Board
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
