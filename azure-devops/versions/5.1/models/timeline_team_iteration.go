// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimelineTeamIteration timeline team iteration
// swagger:model TimelineTeamIteration
type TimelineTeamIteration struct {

	// The iteration CSS Node Id
	CSSNodeID string `json:"cssNodeId,omitempty"`

	// The end date of the iteration
	// Format: date-time
	FinishDate strfmt.DateTime `json:"finishDate,omitempty"`

	// The iteration name
	Name string `json:"name,omitempty"`

	// All the partially paged workitems in this iteration.
	PartiallyPagedWorkItems [][]interface{} `json:"partiallyPagedWorkItems"`

	// The iteration path
	Path string `json:"path,omitempty"`

	// The start date of the iteration
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// The status of this iteration
	Status *TimelineIterationStatus `json:"status,omitempty"`

	// The work items that have been paged in this iteration
	WorkItems [][]interface{} `json:"workItems"`
}

// Validate validates this timeline team iteration
func (m *TimelineTeamIteration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineTeamIteration) validateFinishDate(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishDate) { // not required
		return nil
	}

	if err := validate.FormatOf("finishDate", "body", "date-time", m.FinishDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineTeamIteration) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineTeamIteration) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineTeamIteration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineTeamIteration) UnmarshalBinary(b []byte) error {
	var res TimelineTeamIteration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
