// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestResult2 test result2
// swagger:model TestResult2
type TestResult2 struct {

	// afn strip Id
	AfnStripID int32 `json:"afnStripId,omitempty"`

	// computer name
	ComputerName string `json:"computerName,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// date completed
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"dateCompleted,omitempty"`

	// date started
	// Format: date-time
	DateStarted strfmt.DateTime `json:"dateStarted,omitempty"`

	// effective point state
	// Format: byte
	EffectivePointState strfmt.Base64 `json:"effectivePointState,omitempty"`

	// failure type
	// Format: byte
	FailureType strfmt.Base64 `json:"failureType,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// last updated by
	// Format: uuid
	LastUpdatedBy strfmt.UUID `json:"lastUpdatedBy,omitempty"`

	// outcome
	// Format: byte
	Outcome strfmt.Base64 `json:"outcome,omitempty"`

	// owner
	// Format: uuid
	Owner strfmt.UUID `json:"owner,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// reset count
	ResetCount int32 `json:"resetCount,omitempty"`

	// resolution state Id
	ResolutionStateID int32 `json:"resolutionStateId,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// run by
	// Format: uuid
	RunBy strfmt.UUID `json:"runBy,omitempty"`

	// state
	// Format: byte
	State strfmt.Base64 `json:"state,omitempty"`

	// test case ref Id
	TestCaseRefID int32 `json:"testCaseRefId,omitempty"`

	// test result Id
	TestResultID int32 `json:"testResultId,omitempty"`

	// test run Id
	TestRunID int32 `json:"testRunId,omitempty"`
}

// Validate validates this test result2
func (m *TestResult2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectivePointState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestResult2) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateDateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCompleted", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateDateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStarted", "body", "date-time", m.DateStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateEffectivePointState(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectivePointState) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestResult2) validateFailureType(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureType) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestResult2) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedBy", "body", "uuid", m.LastUpdatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.Outcome) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestResult2) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := validate.FormatOf("owner", "body", "uuid", m.Owner.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateRunBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RunBy) { // not required
		return nil
	}

	if err := validate.FormatOf("runBy", "body", "uuid", m.RunBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResult2) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

// MarshalBinary interface implementation
func (m *TestResult2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestResult2) UnmarshalBinary(b []byte) error {
	var res TestResult2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
