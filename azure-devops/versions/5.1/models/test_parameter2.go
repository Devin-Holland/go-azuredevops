// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestParameter2 test parameter2
// swagger:model TestParameter2
type TestParameter2 struct {

	// action path
	ActionPath string `json:"actionPath,omitempty"`

	// actual
	Actual []strfmt.Base64 `json:"actual"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// data type
	// Format: byte
	DataType strfmt.Base64 `json:"dataType,omitempty"`

	// date modified
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// expected
	Expected []strfmt.Base64 `json:"expected"`

	// iteration Id
	IterationID int32 `json:"iterationId,omitempty"`

	// parameter name
	ParameterName string `json:"parameterName,omitempty"`

	// test result Id
	TestResultID int32 `json:"testResultId,omitempty"`

	// test run Id
	TestRunID int32 `json:"testRunId,omitempty"`
}

// Validate validates this test parameter2
func (m *TestParameter2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActual(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestParameter2) validateActual(formats strfmt.Registry) error {

	if swag.IsZero(m.Actual) { // not required
		return nil
	}

	for i := 0; i < len(m.Actual); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *TestParameter2) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestParameter2) validateDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestParameter2) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestParameter2) validateExpected(formats strfmt.Registry) error {

	if swag.IsZero(m.Expected) { // not required
		return nil
	}

	for i := 0; i < len(m.Expected); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestParameter2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestParameter2) UnmarshalBinary(b []byte) error {
	var res TestParameter2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
