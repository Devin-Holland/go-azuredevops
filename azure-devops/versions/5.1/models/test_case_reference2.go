// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestCaseReference2 test case reference2
// swagger:model TestCaseReference2
type TestCaseReference2 struct {

	// area Id
	AreaID int32 `json:"areaId,omitempty"`

	// automated test Id
	AutomatedTestID string `json:"automatedTestId,omitempty"`

	// automated test name
	AutomatedTestName string `json:"automatedTestName,omitempty"`

	// automated test name hash
	AutomatedTestNameHash []strfmt.Base64 `json:"automatedTestNameHash"`

	// automated test storage
	AutomatedTestStorage string `json:"automatedTestStorage,omitempty"`

	// automated test storage hash
	AutomatedTestStorageHash []strfmt.Base64 `json:"automatedTestStorageHash"`

	// automated test type
	AutomatedTestType string `json:"automatedTestType,omitempty"`

	// configuration Id
	ConfigurationID int32 `json:"configurationId,omitempty"`

	// created by
	// Format: uuid
	CreatedBy strfmt.UUID `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// last ref test run date
	// Format: date-time
	LastRefTestRunDate strfmt.DateTime `json:"lastRefTestRunDate,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// priority
	// Format: byte
	Priority strfmt.Base64 `json:"priority,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// test case Id
	TestCaseID int32 `json:"testCaseId,omitempty"`

	// test case ref Id
	TestCaseRefID int32 `json:"testCaseRefId,omitempty"`

	// test case revision
	TestCaseRevision int32 `json:"testCaseRevision,omitempty"`

	// test case title
	TestCaseTitle string `json:"testCaseTitle,omitempty"`

	// test point Id
	TestPointID int32 `json:"testPointId,omitempty"`
}

// Validate validates this test case reference2
func (m *TestCaseReference2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomatedTestNameHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutomatedTestStorageHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRefTestRunDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestCaseReference2) validateAutomatedTestNameHash(formats strfmt.Registry) error {

	if swag.IsZero(m.AutomatedTestNameHash) { // not required
		return nil
	}

	for i := 0; i < len(m.AutomatedTestNameHash); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *TestCaseReference2) validateAutomatedTestStorageHash(formats strfmt.Registry) error {

	if swag.IsZero(m.AutomatedTestStorageHash) { // not required
		return nil
	}

	for i := 0; i < len(m.AutomatedTestStorageHash); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *TestCaseReference2) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBy", "body", "uuid", m.CreatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestCaseReference2) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestCaseReference2) validateLastRefTestRunDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRefTestRunDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRefTestRunDate", "body", "date-time", m.LastRefTestRunDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestCaseReference2) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestCaseReference2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestCaseReference2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestCaseReference2) UnmarshalBinary(b []byte) error {
	var res TestCaseReference2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
