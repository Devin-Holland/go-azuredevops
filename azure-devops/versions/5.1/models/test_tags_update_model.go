// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestTagsUpdateModel Tags to update to a run or result.
// swagger:model TestTagsUpdateModel
type TestTagsUpdateModel struct {

	// tags
	Tags []map[string][]TestTag `json:"tags"`
}

// Validate validates this test tags update model
func (m *TestTagsUpdateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestTagsUpdateModel) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		for k := range m.Tags[i] {

			if err := validate.Required("tags"+"."+strconv.Itoa(i)+"."+k, "body", m.Tags[i][k]); err != nil {
				return err
			}

			for ii := 0; ii < len(m.Tags[i][k]); ii++ {

				if err := m.Tags[i][k][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("tags" + "." + strconv.Itoa(i) + "." + k + "." + strconv.Itoa(ii))
					}
					return err
				}

			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestTagsUpdateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestTagsUpdateModel) UnmarshalBinary(b []byte) error {
	var res TestTagsUpdateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
