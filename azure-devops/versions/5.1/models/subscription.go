// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription Encapsulates an event subscription.
// swagger:model Subscription
type Subscription struct {

	// Reference Links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// action description
	ActionDescription string `json:"actionDescription,omitempty"`

	// consumer action Id
	ConsumerActionID string `json:"consumerActionId,omitempty"`

	// consumer Id
	ConsumerID string `json:"consumerId,omitempty"`

	// Consumer input values
	ConsumerInputs map[string]string `json:"consumerInputs,omitempty"`

	// created by
	CreatedBy *IdentityRef `json:"createdBy,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// event description
	EventDescription string `json:"eventDescription,omitempty"`

	// event type
	EventType string `json:"eventType,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// modified by
	ModifiedBy *IdentityRef `json:"modifiedBy,omitempty"`

	// modified date
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// probation retries
	// Format: byte
	ProbationRetries strfmt.Base64 `json:"probationRetries,omitempty"`

	// publisher Id
	PublisherID string `json:"publisherId,omitempty"`

	// Publisher input values
	PublisherInputs map[string]string `json:"publisherInputs,omitempty"`

	// resource version
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// status
	// Enum: [enabled onProbation disabledByUser disabledBySystem disabledByInactiveIdentity]
	Status interface{} `json:"status,omitempty"`

	// subscriber
	Subscriber *IdentityRef `json:"subscriber,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProbationRetries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateModifiedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateProbationRetries(formats strfmt.Registry) error {

	if swag.IsZero(m.ProbationRetries) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *Subscription) validateSubscriber(formats strfmt.Registry) error {

	if swag.IsZero(m.Subscriber) { // not required
		return nil
	}

	if m.Subscriber != nil {
		if err := m.Subscriber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscriber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
