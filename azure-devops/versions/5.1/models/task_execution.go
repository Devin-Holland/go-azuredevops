// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskExecution task execution
// swagger:model TaskExecution
type TaskExecution struct {

	// The utility task to run.  Specifying this means that this task definition is simply a meta task to call another task. This is useful for tasks that call utility tasks like powershell and commandline
	ExecTask *TaskReference `json:"execTask,omitempty"`

	// If a task is going to run code, then this provides the type/script etc... information by platform. For example, it might look like. net45: { typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" } net20: { typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" } java: { jar: "powershelltask.tasks.automation.teamfoundation.microsoft.com", } node: { script: "powershellhost.js", }
	PlatformInstructions map[string]map[string]string `json:"platformInstructions,omitempty"`
}

// Validate validates this task execution
func (m *TaskExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskExecution) validateExecTask(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecTask) { // not required
		return nil
	}

	if m.ExecTask != nil {
		if err := m.ExecTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execTask")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskExecution) UnmarshalBinary(b []byte) error {
	var res TaskExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
