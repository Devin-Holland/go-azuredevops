// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildConfiguration BuildConfiguration Details.
// swagger:model BuildConfiguration
type BuildConfiguration struct {

	// Branch name for which build is generated.
	BranchName string `json:"branchName,omitempty"`

	// BuildDefnitionId for build.
	BuildDefinitionID int32 `json:"buildDefinitionId,omitempty"`

	// Build system.
	BuildSystem string `json:"buildSystem,omitempty"`

	// Build Creation Date.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Build flavor (eg Build/Release).
	Flavor string `json:"flavor,omitempty"`

	// BuildConfiguration Id.
	ID int32 `json:"id,omitempty"`

	// Build Number.
	Number string `json:"number,omitempty"`

	// BuildConfiguration Platform.
	Platform string `json:"platform,omitempty"`

	// Project associated with this BuildConfiguration.
	Project *ShallowReference `json:"project,omitempty"`

	// ResposotoryGuid for the Build.
	RepositoryGUID string `json:"repositoryGuid,omitempty"`

	// Repository Type (eg. TFSGit).
	RepositoryType string `json:"repositoryType,omitempty"`

	// Source Version(/first commit) for the build was triggered.
	SourceVersion string `json:"sourceVersion,omitempty"`

	// Target BranchName.
	TargetBranchName string `json:"targetBranchName,omitempty"`

	// Build Uri.
	URI string `json:"uri,omitempty"`
}

// Validate validates this build configuration
func (m *BuildConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildConfiguration) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildConfiguration) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildConfiguration) UnmarshalBinary(b []byte) error {
	var res BuildConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
