// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceEndpointType Represents type of the service endpoint.
// swagger:model ServiceEndpointType
type ServiceEndpointType struct {

	// Authentication scheme of service endpoint type.
	AuthenticationSchemes []*ServiceEndpointAuthenticationScheme `json:"authenticationSchemes"`

	// Data sources of service endpoint type.
	DataSources []*DataSource `json:"dataSources"`

	// Dependency data of service endpoint type.
	DependencyData []*DependencyData `json:"dependencyData"`

	// Gets or sets the description of service endpoint type.
	Description string `json:"description,omitempty"`

	// Gets or sets the display name of service endpoint type.
	DisplayName string `json:"displayName,omitempty"`

	// Gets or sets the endpoint url of service endpoint type.
	EndpointURL *EndpointURL `json:"endpointUrl,omitempty"`

	// Gets or sets the help link of service endpoint type.
	HelpLink *HelpLink `json:"helpLink,omitempty"`

	// help mark down
	HelpMarkDown string `json:"helpMarkDown,omitempty"`

	// Gets or sets the icon url of service endpoint type.
	IconURL string `json:"iconUrl,omitempty"`

	// Input descriptor of service endpoint type.
	InputDescriptors []*InputDescriptor `json:"inputDescriptors"`

	// Gets or sets the name of service endpoint type.
	Name string `json:"name,omitempty"`

	// Trusted hosts of a service endpoint type.
	TrustedHosts []string `json:"trustedHosts"`

	// Gets or sets the ui contribution id of service endpoint type.
	UIContributionID string `json:"uiContributionId,omitempty"`
}

// Validate validates this service endpoint type
func (m *ServiceEndpointType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationSchemes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencyData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpointURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEndpointType) validateAuthenticationSchemes(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationSchemes) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthenticationSchemes); i++ {
		if swag.IsZero(m.AuthenticationSchemes[i]) { // not required
			continue
		}

		if m.AuthenticationSchemes[i] != nil {
			if err := m.AuthenticationSchemes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authenticationSchemes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpointType) validateDataSources(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSources) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSources); i++ {
		if swag.IsZero(m.DataSources[i]) { // not required
			continue
		}

		if m.DataSources[i] != nil {
			if err := m.DataSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpointType) validateDependencyData(formats strfmt.Registry) error {

	if swag.IsZero(m.DependencyData) { // not required
		return nil
	}

	for i := 0; i < len(m.DependencyData); i++ {
		if swag.IsZero(m.DependencyData[i]) { // not required
			continue
		}

		if m.DependencyData[i] != nil {
			if err := m.DependencyData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencyData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpointType) validateEndpointURL(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointURL) { // not required
		return nil
	}

	if m.EndpointURL != nil {
		if err := m.EndpointURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpointUrl")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpointType) validateHelpLink(formats strfmt.Registry) error {

	if swag.IsZero(m.HelpLink) { // not required
		return nil
	}

	if m.HelpLink != nil {
		if err := m.HelpLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helpLink")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpointType) validateInputDescriptors(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDescriptors); i++ {
		if swag.IsZero(m.InputDescriptors[i]) { // not required
			continue
		}

		if m.InputDescriptors[i] != nil {
			if err := m.InputDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEndpointType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEndpointType) UnmarshalBinary(b []byte) error {
	var res ServiceEndpointType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
