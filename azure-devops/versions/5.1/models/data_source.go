// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DataSource data source
// swagger:model DataSource
type DataSource struct {

	// authentication scheme
	AuthenticationScheme *AuthenticationSchemeReference `json:"authenticationScheme,omitempty"`

	// endpoint Url
	EndpointURL string `json:"endpointUrl,omitempty"`

	// headers
	Headers []*AuthorizationHeader `json:"headers"`

	// name
	Name string `json:"name,omitempty"`

	// resource Url
	ResourceURL string `json:"resourceUrl,omitempty"`

	// result selector
	ResultSelector string `json:"resultSelector,omitempty"`
}

// Validate validates this data source
func (m *DataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSource) validateAuthenticationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationScheme) { // not required
		return nil
	}

	if m.AuthenticationScheme != nil {
		if err := m.AuthenticationScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticationScheme")
			}
			return err
		}
	}

	return nil
}

func (m *DataSource) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSource) UnmarshalBinary(b []byte) error {
	var res DataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
