// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContinuousDeploymentDefinition continuous deployment definition
// swagger:model ContinuousDeploymentDefinition
type ContinuousDeploymentDefinition struct {

	// The connected service associated with the continuous deployment
	ConnectedService *WebAPIConnectedServiceRef `json:"connectedService,omitempty"`

	// The definition associated with the continuous deployment
	Definition *XamlDefinitionReference `json:"definition,omitempty"`

	// git branch
	GitBranch string `json:"gitBranch,omitempty"`

	// hosted service name
	HostedServiceName string `json:"hostedServiceName,omitempty"`

	// project
	Project *TeamProjectReference `json:"project,omitempty"`

	// repository Id
	RepositoryID string `json:"repositoryId,omitempty"`

	// storage account name
	StorageAccountName string `json:"storageAccountName,omitempty"`

	// subscription Id
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// webspace
	Webspace string `json:"webspace,omitempty"`
}

// Validate validates this continuous deployment definition
func (m *ContinuousDeploymentDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContinuousDeploymentDefinition) validateConnectedService(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedService) { // not required
		return nil
	}

	if m.ConnectedService != nil {
		if err := m.ConnectedService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedService")
			}
			return err
		}
	}

	return nil
}

func (m *ContinuousDeploymentDefinition) validateDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definition")
			}
			return err
		}
	}

	return nil
}

func (m *ContinuousDeploymentDefinition) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContinuousDeploymentDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContinuousDeploymentDefinition) UnmarshalBinary(b []byte) error {
	var res ContinuousDeploymentDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
