// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestLog Represents Test Log Result object.
// swagger:model TestLog
type TestLog struct {

	// Test Log Context run, build
	LogReference *TestLogReference `json:"logReference,omitempty"`

	// meta data
	MetaData map[string]string `json:"metaData,omitempty"`

	// LastUpdatedDate for Log file
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

	// Size in Bytes for Log file
	Size int64 `json:"size,omitempty"`
}

// Validate validates this test log
func (m *TestLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestLog) validateLogReference(formats strfmt.Registry) error {

	if swag.IsZero(m.LogReference) { // not required
		return nil
	}

	if m.LogReference != nil {
		if err := m.LogReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logReference")
			}
			return err
		}
	}

	return nil
}

func (m *TestLog) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestLog) UnmarshalBinary(b []byte) error {
	var res TestLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
