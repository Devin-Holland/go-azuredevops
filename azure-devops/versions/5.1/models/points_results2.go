// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PointsResults2 points results2
// swagger:model PointsResults2
type PointsResults2 struct {

	// change number
	ChangeNumber int32 `json:"changeNumber,omitempty"`

	// last failure type
	// Format: byte
	LastFailureType strfmt.Base64 `json:"lastFailureType,omitempty"`

	// last resolution state Id
	LastResolutionStateID int32 `json:"lastResolutionStateId,omitempty"`

	// last result outcome
	// Format: byte
	LastResultOutcome strfmt.Base64 `json:"lastResultOutcome,omitempty"`

	// last result state
	// Format: byte
	LastResultState strfmt.Base64 `json:"lastResultState,omitempty"`

	// last test result Id
	LastTestResultID int32 `json:"lastTestResultId,omitempty"`

	// last test run Id
	LastTestRunID int32 `json:"lastTestRunId,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// last updated by
	// Format: uuid
	LastUpdatedBy strfmt.UUID `json:"lastUpdatedBy,omitempty"`

	// plan Id
	PlanID int32 `json:"planId,omitempty"`

	// point Id
	PointID int32 `json:"pointId,omitempty"`
}

// Validate validates this points results2
func (m *PointsResults2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastFailureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PointsResults2) validateLastFailureType(formats strfmt.Registry) error {

	if swag.IsZero(m.LastFailureType) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *PointsResults2) validateLastResultOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.LastResultOutcome) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *PointsResults2) validateLastResultState(formats strfmt.Registry) error {

	if swag.IsZero(m.LastResultState) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *PointsResults2) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PointsResults2) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedBy", "body", "uuid", m.LastUpdatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PointsResults2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PointsResults2) UnmarshalBinary(b []byte) error {
	var res PointsResults2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
