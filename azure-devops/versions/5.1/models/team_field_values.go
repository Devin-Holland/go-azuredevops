// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TeamFieldValues Essentially a collection of team field values
// swagger:model TeamFieldValues
type TeamFieldValues struct {
	TeamSettingsDataContractBase

	// The default team field value
	DefaultValue string `json:"defaultValue,omitempty"`

	// Shallow ref to the field being used as a team field
	Field *FieldReference `json:"field,omitempty"`

	// Collection of all valid team field values
	Values []*TeamFieldValue `json:"values"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TeamFieldValues) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TeamSettingsDataContractBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TeamSettingsDataContractBase = aO0

	// now for regular properties
	var propsTeamFieldValues struct {
		DefaultValue string `json:"defaultValue,omitempty"`

		Field *FieldReference `json:"field,omitempty"`

		Values []*TeamFieldValue `json:"values"`
	}
	if err := swag.ReadJSON(raw, &propsTeamFieldValues); err != nil {
		return err
	}
	m.DefaultValue = propsTeamFieldValues.DefaultValue

	m.Field = propsTeamFieldValues.Field

	m.Values = propsTeamFieldValues.Values

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TeamFieldValues) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TeamSettingsDataContractBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTeamFieldValues struct {
		DefaultValue string `json:"defaultValue,omitempty"`

		Field *FieldReference `json:"field,omitempty"`

		Values []*TeamFieldValue `json:"values"`
	}
	propsTeamFieldValues.DefaultValue = m.DefaultValue

	propsTeamFieldValues.Field = m.Field

	propsTeamFieldValues.Values = m.Values

	jsonDataPropsTeamFieldValues, errTeamFieldValues := swag.WriteJSON(propsTeamFieldValues)
	if errTeamFieldValues != nil {
		return nil, errTeamFieldValues
	}
	_parts = append(_parts, jsonDataPropsTeamFieldValues)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this team field values
func (m *TeamFieldValues) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TeamSettingsDataContractBase
	if err := m.TeamSettingsDataContractBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamFieldValues) validateField(formats strfmt.Registry) error {

	if swag.IsZero(m.Field) { // not required
		return nil
	}

	if m.Field != nil {
		if err := m.Field.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field")
			}
			return err
		}
	}

	return nil
}

func (m *TeamFieldValues) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamFieldValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamFieldValues) UnmarshalBinary(b []byte) error {
	var res TeamFieldValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
