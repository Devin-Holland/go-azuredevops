// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequirementsToTestsMapping2 requirements to tests mapping2
// swagger:model RequirementsToTestsMapping2
type RequirementsToTestsMapping2 struct {

	// created by
	// Format: uuid
	CreatedBy strfmt.UUID `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// deleted by
	// Format: uuid
	DeletedBy strfmt.UUID `json:"deletedBy,omitempty"`

	// deletion date
	// Format: date-time
	DeletionDate strfmt.DateTime `json:"deletionDate,omitempty"`

	// is migrated to w i t
	IsMigratedToWIT bool `json:"isMigratedToWIT,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// test metadata Id
	TestMetadataID int32 `json:"testMetadataId,omitempty"`

	// work item Id
	WorkItemID int32 `json:"workItemId,omitempty"`
}

// Validate validates this requirements to tests mapping2
func (m *RequirementsToTestsMapping2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequirementsToTestsMapping2) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBy", "body", "uuid", m.CreatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequirementsToTestsMapping2) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequirementsToTestsMapping2) validateDeletedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedBy", "body", "uuid", m.DeletedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequirementsToTestsMapping2) validateDeletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deletionDate", "body", "date-time", m.DeletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RequirementsToTestsMapping2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequirementsToTestsMapping2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequirementsToTestsMapping2) UnmarshalBinary(b []byte) error {
	var res RequirementsToTestsMapping2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
