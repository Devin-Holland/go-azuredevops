// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserEntitlement A user entity with additional properties including thier license, extensions, and project membership
// swagger:model UserEntitlement
type UserEntitlement struct {

	// User's access level denoted by a license.
	AccessLevel *AccessLevel `json:"accessLevel,omitempty"`

	// [Readonly] Date the user was added to the collection.
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// User's extensions.
	Extensions []*Extension `json:"extensions"`

	// [Readonly] GroupEntitlements that this user belongs to.
	GroupAssignments []*GroupEntitlement `json:"groupAssignments"`

	// The unique identifier which matches the Id of the Identity associated with the GraphMember.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// [Readonly] Date the user last accessed the collection.
	// Format: date-time
	LastAccessedDate strfmt.DateTime `json:"lastAccessedDate,omitempty"`

	// Relation between a project and the user's effective permissions in that project.
	ProjectEntitlements []*ProjectEntitlement `json:"projectEntitlements"`

	// User reference.
	User *GraphUser `json:"user,omitempty"`
}

// Validate validates this user entitlement
func (m *UserEntitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAccessedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectEntitlements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserEntitlement) validateAccessLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessLevel) { // not required
		return nil
	}

	if m.AccessLevel != nil {
		if err := m.AccessLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessLevel")
			}
			return err
		}
	}

	return nil
}

func (m *UserEntitlement) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserEntitlement) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Extensions); i++ {
		if swag.IsZero(m.Extensions[i]) { // not required
			continue
		}

		if m.Extensions[i] != nil {
			if err := m.Extensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserEntitlement) validateGroupAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupAssignments); i++ {
		if swag.IsZero(m.GroupAssignments[i]) { // not required
			continue
		}

		if m.GroupAssignments[i] != nil {
			if err := m.GroupAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserEntitlement) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserEntitlement) validateLastAccessedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastAccessedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastAccessedDate", "body", "date-time", m.LastAccessedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserEntitlement) validateProjectEntitlements(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectEntitlements) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectEntitlements); i++ {
		if swag.IsZero(m.ProjectEntitlements[i]) { // not required
			continue
		}

		if m.ProjectEntitlements[i] != nil {
			if err := m.ProjectEntitlements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectEntitlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserEntitlement) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserEntitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserEntitlement) UnmarshalBinary(b []byte) error {
	var res UserEntitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
