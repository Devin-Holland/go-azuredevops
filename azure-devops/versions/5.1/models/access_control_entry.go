// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AccessControlEntry Class for encapsulating the allowed and denied permissions for a given IdentityDescriptor.
// swagger:model AccessControlEntry
type AccessControlEntry struct {

	// The set of permission bits that represent the actions that the associated descriptor is allowed to perform.
	Allow int32 `json:"allow,omitempty"`

	// The set of permission bits that represent the actions that the associated descriptor is not allowed to perform.
	Deny int32 `json:"deny,omitempty"`

	// The descriptor for the user this AccessControlEntry applies to.
	Descriptor *IdentityDescriptor `json:"descriptor,omitempty"`

	// This value, when set, reports the inherited and effective information for the associated descriptor. This value is only set on AccessControlEntries returned by the QueryAccessControlList(s) call when its includeExtendedInfo parameter is set to true.
	ExtendedInfo *AceExtendedInformation `json:"extendedInfo,omitempty"`
}

// Validate validates this access control entry
func (m *AccessControlEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessControlEntry) validateDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(m.Descriptor) { // not required
		return nil
	}

	if m.Descriptor != nil {
		if err := m.Descriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *AccessControlEntry) validateExtendedInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtendedInfo) { // not required
		return nil
	}

	if m.ExtendedInfo != nil {
		if err := m.ExtendedInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extendedInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessControlEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessControlEntry) UnmarshalBinary(b []byte) error {
	var res AccessControlEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
