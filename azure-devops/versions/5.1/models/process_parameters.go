// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProcessParameters process parameters
// swagger:model ProcessParameters
type ProcessParameters struct {

	// data source bindings
	DataSourceBindings []*DataSourceBindingBase `json:"dataSourceBindings"`

	// inputs
	Inputs []*TaskInputDefinitionBase `json:"inputs"`

	// source definitions
	SourceDefinitions []*TaskSourceDefinitionBase `json:"sourceDefinitions"`
}

// Validate validates this process parameters
func (m *ProcessParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataSourceBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessParameters) validateDataSourceBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSourceBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSourceBindings); i++ {
		if swag.IsZero(m.DataSourceBindings[i]) { // not required
			continue
		}

		if m.DataSourceBindings[i] != nil {
			if err := m.DataSourceBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataSourceBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessParameters) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessParameters) validateSourceDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceDefinitions) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceDefinitions); i++ {
		if swag.IsZero(m.SourceDefinitions[i]) { // not required
			continue
		}

		if m.SourceDefinitions[i] != nil {
			if err := m.SourceDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceDefinitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessParameters) UnmarshalBinary(b []byte) error {
	var res ProcessParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
