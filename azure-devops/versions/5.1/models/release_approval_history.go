// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseApprovalHistory release approval history
// swagger:model ReleaseApprovalHistory
type ReleaseApprovalHistory struct {

	// Identity of the approver.
	Approver *IdentityRef `json:"approver,omitempty"`

	// Identity of the object who changed approval.
	ChangedBy *IdentityRef `json:"changedBy,omitempty"`

	// Approval histroy comments.
	Comments string `json:"comments,omitempty"`

	// Time when this approval created.
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// Time when this approval modified.
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

	// Approval histroy revision.
	Revision int32 `json:"revision,omitempty"`
}

// Validate validates this release approval history
func (m *ReleaseApprovalHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseApprovalHistory) validateApprover(formats strfmt.Registry) error {

	if swag.IsZero(m.Approver) { // not required
		return nil
	}

	if m.Approver != nil {
		if err := m.Approver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approver")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseApprovalHistory) validateChangedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangedBy) { // not required
		return nil
	}

	if m.ChangedBy != nil {
		if err := m.ChangedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseApprovalHistory) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseApprovalHistory) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseApprovalHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseApprovalHistory) UnmarshalBinary(b []byte) error {
	var res ReleaseApprovalHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
