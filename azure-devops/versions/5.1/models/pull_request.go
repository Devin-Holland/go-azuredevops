// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PullRequest Represents a pull request object.  These are retrieved from Source Providers.
// swagger:model PullRequest
type PullRequest struct {

	// The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Author of the pull request.
	Author *IdentityRef `json:"author,omitempty"`

	// Current state of the pull request, e.g. open, merged, closed, conflicts, etc.
	CurrentState string `json:"currentState,omitempty"`

	// Description for the pull request.
	Description string `json:"description,omitempty"`

	// Unique identifier for the pull request
	ID string `json:"id,omitempty"`

	// The name of the provider this pull request is associated with.
	ProviderName string `json:"providerName,omitempty"`

	// Source branch ref of this pull request
	SourceBranchRef string `json:"sourceBranchRef,omitempty"`

	// Owner of the source repository of this pull request
	SourceRepositoryOwner string `json:"sourceRepositoryOwner,omitempty"`

	// Target branch ref of this pull request
	TargetBranchRef string `json:"targetBranchRef,omitempty"`

	// Owner of the target repository of this pull request
	TargetRepositoryOwner string `json:"targetRepositoryOwner,omitempty"`

	// Title of the pull request.
	Title string `json:"title,omitempty"`
}

// Validate validates this pull request
func (m *PullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequest) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PullRequest) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullRequest) UnmarshalBinary(b []byte) error {
	var res PullRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
