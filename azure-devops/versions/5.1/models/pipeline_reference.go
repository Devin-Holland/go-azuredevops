// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PipelineReference Pipeline reference
// swagger:model PipelineReference
type PipelineReference struct {

	// Reference of the job
	JobReference *JobReference `json:"jobReference,omitempty"`

	// Reference of the phase.
	PhaseReference *PhaseReference `json:"phaseReference,omitempty"`

	// Reference of the pipeline with which this pipeline intance is related.
	PipelineID int32 `json:"pipelineId,omitempty"`

	// Reference of the stage.
	StageReference *StageReference `json:"stageReference,omitempty"`
}

// Validate validates this pipeline reference
func (m *PipelineReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStageReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineReference) validateJobReference(formats strfmt.Registry) error {

	if swag.IsZero(m.JobReference) { // not required
		return nil
	}

	if m.JobReference != nil {
		if err := m.JobReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobReference")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineReference) validatePhaseReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PhaseReference) { // not required
		return nil
	}

	if m.PhaseReference != nil {
		if err := m.PhaseReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phaseReference")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineReference) validateStageReference(formats strfmt.Registry) error {

	if swag.IsZero(m.StageReference) { // not required
		return nil
	}

	if m.StageReference != nil {
		if err := m.StageReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stageReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineReference) UnmarshalBinary(b []byte) error {
	var res PipelineReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
