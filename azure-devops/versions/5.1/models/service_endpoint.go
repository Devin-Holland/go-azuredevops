// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceEndpoint Represents an endpoint which may be used by an orchestration job.
// swagger:model ServiceEndpoint
type ServiceEndpoint struct {

	// Gets or sets the identity reference for the administrators group of the service endpoint.
	AdministratorsGroup *IdentityRef `json:"administratorsGroup,omitempty"`

	// Gets or sets the authorization data for talking to the endpoint.
	Authorization *EndpointAuthorization `json:"authorization,omitempty"`

	// Gets or sets the identity reference for the user who created the Service endpoint.
	CreatedBy *IdentityRef `json:"createdBy,omitempty"`

	// data
	Data map[string]string `json:"data,omitempty"`

	// Gets or sets the description of endpoint.
	Description string `json:"description,omitempty"`

	// group scope Id
	// Format: uuid
	GroupScopeID strfmt.UUID `json:"groupScopeId,omitempty"`

	// Gets or sets the identifier of this endpoint.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// EndPoint state indictor
	IsReady bool `json:"isReady,omitempty"`

	// Indicates whether service endpoint is shared with other projects or not.
	IsShared bool `json:"isShared,omitempty"`

	// Gets or sets the friendly name of the endpoint.
	Name string `json:"name,omitempty"`

	// Error message during creation/deletion of endpoint
	OperationStatus *JObject `json:"operationStatus,omitempty"`

	// Gets or sets the owner of the endpoint.
	Owner string `json:"owner,omitempty"`

	// Gets or sets the identity reference for the readers group of the service endpoint.
	ReadersGroup *IdentityRef `json:"readersGroup,omitempty"`

	// Gets or sets the type of the endpoint.
	Type string `json:"type,omitempty"`

	// Gets or sets the url of the endpoint.
	URL string `json:"url,omitempty"`
}

// Validate validates this service endpoint
func (m *ServiceEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministratorsGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupScopeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadersGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEndpoint) validateAdministratorsGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministratorsGroup) { // not required
		return nil
	}

	if m.AdministratorsGroup != nil {
		if err := m.AdministratorsGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administratorsGroup")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) validateAuthorization(formats strfmt.Registry) error {

	if swag.IsZero(m.Authorization) { // not required
		return nil
	}

	if m.Authorization != nil {
		if err := m.Authorization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) validateGroupScopeID(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupScopeID) { // not required
		return nil
	}

	if err := validate.FormatOf("groupScopeId", "body", "uuid", m.GroupScopeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceEndpoint) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceEndpoint) validateOperationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationStatus) { // not required
		return nil
	}

	if m.OperationStatus != nil {
		if err := m.OperationStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) validateReadersGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadersGroup) { // not required
		return nil
	}

	if m.ReadersGroup != nil {
		if err := m.ReadersGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readersGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEndpoint) UnmarshalBinary(b []byte) error {
	var res ServiceEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
