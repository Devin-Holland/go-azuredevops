// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemTypeFieldInstanceBase Base field instance for workItemType fields.
// swagger:model WorkItemTypeFieldInstanceBase
type WorkItemTypeFieldInstanceBase struct {
	WorkItemFieldReference

	// Indicates whether field value is always required.
	AlwaysRequired bool `json:"alwaysRequired,omitempty"`

	// The list of dependent fields.
	DependentFields []*WorkItemFieldReference `json:"dependentFields"`

	// Gets the help text for the field.
	HelpText string `json:"helpText,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemTypeFieldInstanceBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemFieldReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemFieldReference = aO0

	// now for regular properties
	var propsWorkItemTypeFieldInstanceBase struct {
		AlwaysRequired bool `json:"alwaysRequired,omitempty"`

		DependentFields []*WorkItemFieldReference `json:"dependentFields"`

		HelpText string `json:"helpText,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemTypeFieldInstanceBase); err != nil {
		return err
	}
	m.AlwaysRequired = propsWorkItemTypeFieldInstanceBase.AlwaysRequired

	m.DependentFields = propsWorkItemTypeFieldInstanceBase.DependentFields

	m.HelpText = propsWorkItemTypeFieldInstanceBase.HelpText

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemTypeFieldInstanceBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemFieldReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemTypeFieldInstanceBase struct {
		AlwaysRequired bool `json:"alwaysRequired,omitempty"`

		DependentFields []*WorkItemFieldReference `json:"dependentFields"`

		HelpText string `json:"helpText,omitempty"`
	}
	propsWorkItemTypeFieldInstanceBase.AlwaysRequired = m.AlwaysRequired

	propsWorkItemTypeFieldInstanceBase.DependentFields = m.DependentFields

	propsWorkItemTypeFieldInstanceBase.HelpText = m.HelpText

	jsonDataPropsWorkItemTypeFieldInstanceBase, errWorkItemTypeFieldInstanceBase := swag.WriteJSON(propsWorkItemTypeFieldInstanceBase)
	if errWorkItemTypeFieldInstanceBase != nil {
		return nil, errWorkItemTypeFieldInstanceBase
	}
	_parts = append(_parts, jsonDataPropsWorkItemTypeFieldInstanceBase)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item type field instance base
func (m *WorkItemTypeFieldInstanceBase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemFieldReference
	if err := m.WorkItemFieldReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependentFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemTypeFieldInstanceBase) validateDependentFields(formats strfmt.Registry) error {

	if swag.IsZero(m.DependentFields) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentFields); i++ {
		if swag.IsZero(m.DependentFields[i]) { // not required
			continue
		}

		if m.DependentFields[i] != nil {
			if err := m.DependentFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemTypeFieldInstanceBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemTypeFieldInstanceBase) UnmarshalBinary(b []byte) error {
	var res WorkItemTypeFieldInstanceBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
