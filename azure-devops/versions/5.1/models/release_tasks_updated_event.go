// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseTasksUpdatedEvent release tasks updated event
// swagger:model ReleaseTasksUpdatedEvent
type ReleaseTasksUpdatedEvent struct {
	RealtimeReleaseEvent

	// job
	Job *ReleaseTask `json:"job,omitempty"`

	// plan Id
	// Format: uuid
	PlanID strfmt.UUID `json:"planId,omitempty"`

	// release step Id
	ReleaseStepID int32 `json:"releaseStepId,omitempty"`

	// tasks
	Tasks []*ReleaseTask `json:"tasks"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReleaseTasksUpdatedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RealtimeReleaseEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RealtimeReleaseEvent = aO0

	// now for regular properties
	var propsReleaseTasksUpdatedEvent struct {
		Job *ReleaseTask `json:"job,omitempty"`

		PlanID strfmt.UUID `json:"planId,omitempty"`

		ReleaseStepID int32 `json:"releaseStepId,omitempty"`

		Tasks []*ReleaseTask `json:"tasks"`
	}
	if err := swag.ReadJSON(raw, &propsReleaseTasksUpdatedEvent); err != nil {
		return err
	}
	m.Job = propsReleaseTasksUpdatedEvent.Job

	m.PlanID = propsReleaseTasksUpdatedEvent.PlanID

	m.ReleaseStepID = propsReleaseTasksUpdatedEvent.ReleaseStepID

	m.Tasks = propsReleaseTasksUpdatedEvent.Tasks

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReleaseTasksUpdatedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RealtimeReleaseEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsReleaseTasksUpdatedEvent struct {
		Job *ReleaseTask `json:"job,omitempty"`

		PlanID strfmt.UUID `json:"planId,omitempty"`

		ReleaseStepID int32 `json:"releaseStepId,omitempty"`

		Tasks []*ReleaseTask `json:"tasks"`
	}
	propsReleaseTasksUpdatedEvent.Job = m.Job

	propsReleaseTasksUpdatedEvent.PlanID = m.PlanID

	propsReleaseTasksUpdatedEvent.ReleaseStepID = m.ReleaseStepID

	propsReleaseTasksUpdatedEvent.Tasks = m.Tasks

	jsonDataPropsReleaseTasksUpdatedEvent, errReleaseTasksUpdatedEvent := swag.WriteJSON(propsReleaseTasksUpdatedEvent)
	if errReleaseTasksUpdatedEvent != nil {
		return nil, errReleaseTasksUpdatedEvent
	}
	_parts = append(_parts, jsonDataPropsReleaseTasksUpdatedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this release tasks updated event
func (m *ReleaseTasksUpdatedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RealtimeReleaseEvent
	if err := m.RealtimeReleaseEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseTasksUpdatedEvent) validateJob(formats strfmt.Registry) error {

	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseTasksUpdatedEvent) validatePlanID(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanID) { // not required
		return nil
	}

	if err := validate.FormatOf("planId", "body", "uuid", m.PlanID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseTasksUpdatedEvent) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseTasksUpdatedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseTasksUpdatedEvent) UnmarshalBinary(b []byte) error {
	var res ReleaseTasksUpdatedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
