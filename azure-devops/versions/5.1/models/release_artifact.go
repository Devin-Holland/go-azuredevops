// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseArtifact release artifact
// swagger:model ReleaseArtifact
type ReleaseArtifact struct {

	// Gets or sets the artifact provider of ReleaseArtifact.
	ArtifactProvider *ArtifactProvider `json:"artifactProvider,omitempty"`

	// Gets or sets the artifact type of ReleaseArtifact.
	ArtifactType string `json:"artifactType,omitempty"`

	// Gets or sets the definition json of ReleaseArtifact.
	DefinitionData string `json:"definitionData,omitempty"`

	// Gets or sets the definition id of ReleaseArtifact.
	DefinitionID int32 `json:"definitionId,omitempty"`

	// Gets or sets the description of ReleaseArtifact.
	Description string `json:"description,omitempty"`

	// Gets or sets the id of ReleaseArtifact.
	ID int32 `json:"id,omitempty"`

	// Gets or sets the name of ReleaseArtifact.
	Name string `json:"name,omitempty"`

	// Gets or sets the release id.
	ReleaseID int32 `json:"releaseId,omitempty"`
}

// Validate validates this release artifact
func (m *ReleaseArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseArtifact) validateArtifactProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactProvider) { // not required
		return nil
	}

	if m.ArtifactProvider != nil {
		if err := m.ArtifactProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactProvider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseArtifact) UnmarshalBinary(b []byte) error {
	var res ReleaseArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
