// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseTask release task
// swagger:model ReleaseTask
type ReleaseTask struct {

	// Agent name on which task executed.
	AgentName string `json:"agentName,omitempty"`

	// Finish time of the release task.
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// ID of the release task.
	ID int32 `json:"id,omitempty"`

	// List of issues occurred while execution of task.
	Issues []*Issue `json:"issues"`

	// Number of lines log release task has.
	LineCount int64 `json:"lineCount,omitempty"`

	// Log URL of the task.
	LogURL string `json:"logUrl,omitempty"`

	// Name of the task.
	Name string `json:"name,omitempty"`

	// Task execution complete precent.
	PercentComplete int32 `json:"percentComplete,omitempty"`

	// Rank of the release task.
	Rank int32 `json:"rank,omitempty"`

	// Result code of the task.
	ResultCode string `json:"resultCode,omitempty"`

	// ID of the release task.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Status of release task.
	// Enum: [unknown pending inProgress success failure canceled skipped succeeded failed partiallySucceeded]
	Status interface{} `json:"status,omitempty"`

	// Workflow task reference.
	Task *WorkflowTaskReference `json:"task,omitempty"`

	// Timeline record ID of the release task.
	// Format: uuid
	TimelineRecordID strfmt.UUID `json:"timelineRecordId,omitempty"`
}

// Validate validates this release task
func (m *ReleaseTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineRecordID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseTask) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseTask) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseTask) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseTask) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseTask) validateTimelineRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineRecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("timelineRecordId", "body", "uuid", m.TimelineRecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseTask) UnmarshalBinary(b []byte) error {
	var res ReleaseTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
