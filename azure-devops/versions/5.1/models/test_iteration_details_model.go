// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestIterationDetailsModel Represents a test iteration result.
// swagger:model TestIterationDetailsModel
type TestIterationDetailsModel struct {

	// Test step results in an iteration.
	ActionResults []*TestActionResultModel `json:"actionResults"`

	// Refence to attachments in test iteration result.
	Attachments []*TestCaseResultAttachmentModel `json:"attachments"`

	// Comment in test iteration result.
	Comment string `json:"comment,omitempty"`

	// Time when execution completed.
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Duration of execution.
	DurationInMs float64 `json:"durationInMs,omitempty"`

	// Error message in test iteration result execution.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// ID of test iteration result.
	ID int32 `json:"id,omitempty"`

	// Test outcome if test iteration result.
	Outcome string `json:"outcome,omitempty"`

	// Test parameters in an iteration.
	Parameters []*TestResultParameterModel `json:"parameters"`

	// Time when execution started.
	// Format: date-time
	StartedDate strfmt.DateTime `json:"startedDate,omitempty"`

	// Url to test iteration result.
	URL string `json:"url,omitempty"`
}

// Validate validates this test iteration details model
func (m *TestIterationDetailsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestIterationDetailsModel) validateActionResults(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionResults); i++ {
		if swag.IsZero(m.ActionResults[i]) { // not required
			continue
		}

		if m.ActionResults[i] != nil {
			if err := m.ActionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestIterationDetailsModel) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestIterationDetailsModel) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestIterationDetailsModel) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestIterationDetailsModel) validateStartedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startedDate", "body", "date-time", m.StartedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestIterationDetailsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestIterationDetailsModel) UnmarshalBinary(b []byte) error {
	var res TestIterationDetailsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
