// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestResultModelBase test result model base
// swagger:model TestResultModelBase
type TestResultModelBase struct {

	// Comment in result.
	Comment string `json:"comment,omitempty"`

	// Time when execution completed.
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Duration of execution.
	DurationInMs float64 `json:"durationInMs,omitempty"`

	// Error message in result.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Test outcome of result.
	Outcome string `json:"outcome,omitempty"`

	// Time when execution started.
	// Format: date-time
	StartedDate strfmt.DateTime `json:"startedDate,omitempty"`
}

// Validate validates this test result model base
func (m *TestResultModelBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestResultModelBase) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestResultModelBase) validateStartedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startedDate", "body", "date-time", m.StartedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestResultModelBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestResultModelBase) UnmarshalBinary(b []byte) error {
	var res TestResultModelBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
