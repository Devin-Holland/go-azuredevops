// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProjectEntitlement Relation between a project and the user's effective permissions in that project.
// swagger:model ProjectEntitlement
type ProjectEntitlement struct {

	// Assignment Source (e.g. Group or Unknown).
	// Enum: [none unknown groupRule]
	AssignmentSource interface{} `json:"assignmentSource,omitempty"`

	// Project Group (e.g. Contributor, Reader etc.)
	Group *Group `json:"group,omitempty"`

	// Whether the user is inheriting permissions to a project through a Azure DevOps or AAD group membership.
	// Enum: [notSet notInherited inherited]
	ProjectPermissionInherited interface{} `json:"projectPermissionInherited,omitempty"`

	// Project Ref
	ProjectRef *ProjectRef `json:"projectRef,omitempty"`

	// Team Ref.
	TeamRefs []*TeamRef `json:"teamRefs"`
}

// Validate validates this project entitlement
func (m *ProjectEntitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamRefs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectEntitlement) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectEntitlement) validateProjectRef(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectRef) { // not required
		return nil
	}

	if m.ProjectRef != nil {
		if err := m.ProjectRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectRef")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectEntitlement) validateTeamRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamRefs); i++ {
		if swag.IsZero(m.TeamRefs[i]) { // not required
			continue
		}

		if m.TeamRefs[i] != nil {
			if err := m.TeamRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectEntitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectEntitlement) UnmarshalBinary(b []byte) error {
	var res ProjectEntitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
