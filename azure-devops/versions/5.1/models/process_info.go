// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessInfo Process.
// swagger:model ProcessInfo
type ProcessInfo struct {

	// Indicates the type of customization on this process. System Process is default process. Inherited Process is modified process that was System process before.
	// Enum: [system inherited custom]
	CustomizationType interface{} `json:"customizationType,omitempty"`

	// Description of the process.
	Description string `json:"description,omitempty"`

	// Is the process default.
	IsDefault bool `json:"isDefault,omitempty"`

	// Is the process enabled.
	IsEnabled bool `json:"isEnabled,omitempty"`

	// Name of the process.
	Name string `json:"name,omitempty"`

	// ID of the parent process.
	// Format: uuid
	ParentProcessTypeID strfmt.UUID `json:"parentProcessTypeId,omitempty"`

	// Projects in this process to which the user is subscribed to.
	Projects []*ProjectReference `json:"projects"`

	// Reference name of the process.
	ReferenceName string `json:"referenceName,omitempty"`

	// The ID of the process.
	// Format: uuid
	TypeID strfmt.UUID `json:"typeId,omitempty"`
}

// Validate validates this process info
func (m *ProcessInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentProcessTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessInfo) validateParentProcessTypeID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentProcessTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentProcessTypeId", "body", "uuid", m.ParentProcessTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessInfo) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessInfo) validateTypeID(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("typeId", "body", "uuid", m.TypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessInfo) UnmarshalBinary(b []byte) error {
	var res ProcessInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
