// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskAgentPoolStatus task agent pool status
// swagger:model TaskAgentPoolStatus
type TaskAgentPoolStatus struct {
	TaskAgentPoolReference

	// Number of requests queued and assigned to an agent. Not running yet.
	AssignedRequestCount int32 `json:"assignedRequestCount,omitempty"`

	// Number of queued requests which are not assigned to any agents
	QueuedRequestCount int32 `json:"queuedRequestCount,omitempty"`

	// Number of currently running requests
	RunningRequestCount int32 `json:"runningRequestCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskAgentPoolStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskAgentPoolReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskAgentPoolReference = aO0

	// now for regular properties
	var propsTaskAgentPoolStatus struct {
		AssignedRequestCount int32 `json:"assignedRequestCount,omitempty"`

		QueuedRequestCount int32 `json:"queuedRequestCount,omitempty"`

		RunningRequestCount int32 `json:"runningRequestCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskAgentPoolStatus); err != nil {
		return err
	}
	m.AssignedRequestCount = propsTaskAgentPoolStatus.AssignedRequestCount

	m.QueuedRequestCount = propsTaskAgentPoolStatus.QueuedRequestCount

	m.RunningRequestCount = propsTaskAgentPoolStatus.RunningRequestCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskAgentPoolStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskAgentPoolReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskAgentPoolStatus struct {
		AssignedRequestCount int32 `json:"assignedRequestCount,omitempty"`

		QueuedRequestCount int32 `json:"queuedRequestCount,omitempty"`

		RunningRequestCount int32 `json:"runningRequestCount,omitempty"`
	}
	propsTaskAgentPoolStatus.AssignedRequestCount = m.AssignedRequestCount

	propsTaskAgentPoolStatus.QueuedRequestCount = m.QueuedRequestCount

	propsTaskAgentPoolStatus.RunningRequestCount = m.RunningRequestCount

	jsonDataPropsTaskAgentPoolStatus, errTaskAgentPoolStatus := swag.WriteJSON(propsTaskAgentPoolStatus)
	if errTaskAgentPoolStatus != nil {
		return nil, errTaskAgentPoolStatus
	}
	_parts = append(_parts, jsonDataPropsTaskAgentPoolStatus)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task agent pool status
func (m *TaskAgentPoolStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskAgentPoolReference
	if err := m.TaskAgentPoolReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentPoolStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentPoolStatus) UnmarshalBinary(b []byte) error {
	var res TaskAgentPoolStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
