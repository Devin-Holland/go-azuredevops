// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExtensionEventUrls extension event urls
// swagger:model ExtensionEventUrls
type ExtensionEventUrls struct {
	ExtensionUrls

	// Url of the extension management page
	ManageExtensionsPage string `json:"manageExtensionsPage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExtensionEventUrls) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ExtensionUrls
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ExtensionUrls = aO0

	// now for regular properties
	var propsExtensionEventUrls struct {
		ManageExtensionsPage string `json:"manageExtensionsPage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsExtensionEventUrls); err != nil {
		return err
	}
	m.ManageExtensionsPage = propsExtensionEventUrls.ManageExtensionsPage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExtensionEventUrls) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ExtensionUrls)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsExtensionEventUrls struct {
		ManageExtensionsPage string `json:"manageExtensionsPage,omitempty"`
	}
	propsExtensionEventUrls.ManageExtensionsPage = m.ManageExtensionsPage

	jsonDataPropsExtensionEventUrls, errExtensionEventUrls := swag.WriteJSON(propsExtensionEventUrls)
	if errExtensionEventUrls != nil {
		return nil, errExtensionEventUrls
	}
	_parts = append(_parts, jsonDataPropsExtensionEventUrls)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this extension event urls
func (m *ExtensionEventUrls) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ExtensionUrls
	if err := m.ExtensionUrls.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionEventUrls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionEventUrls) UnmarshalBinary(b []byte) error {
	var res ExtensionEventUrls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
