// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDefinition release definition
// swagger:model ReleaseDefinition
type ReleaseDefinition struct {
	ReleaseDefinitionShallowReference

	// Gets or sets the list of artifacts.
	Artifacts []*Artifact `json:"artifacts"`

	// Gets or sets comment.
	Comment string `json:"comment,omitempty"`

	// Gets or sets the identity who created.
	CreatedBy *IdentityRef `json:"createdBy,omitempty"`

	// Gets date on which it got created.
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// Gets or sets the description.
	Description string `json:"description,omitempty"`

	// Gets or sets the list of environments.
	Environments []*ReleaseDefinitionEnvironment `json:"environments"`

	// Whether release definition is deleted.
	IsDeleted bool `json:"isDeleted,omitempty"`

	// Gets the reference of last release.
	LastRelease *ReleaseReference `json:"lastRelease,omitempty"`

	// Gets or sets the identity who modified.
	ModifiedBy *IdentityRef `json:"modifiedBy,omitempty"`

	// Gets date on which it got modified.
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

	// Gets or sets properties.
	Properties *PropertiesCollection `json:"properties,omitempty"`

	// Gets or sets the release name format.
	ReleaseNameFormat string `json:"releaseNameFormat,omitempty"`

	// Gets the revision number.
	Revision int32 `json:"revision,omitempty"`

	// Gets or sets source of release definition.
	// Enum: [undefined restApi userInterface ibiza portalExtensionApi]
	Source interface{} `json:"source,omitempty"`

	// Gets or sets list of tags.
	Tags []string `json:"tags"`

	// Gets or sets the list of triggers.
	Triggers []*ReleaseTriggerBase `json:"triggers"`

	// Gets or sets the list of variable groups.
	VariableGroups []int32 `json:"variableGroups"`

	// Gets or sets the dictionary of variables.
	Variables map[string]ConfigurationVariableValue `json:"variables,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReleaseDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseDefinitionShallowReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseDefinitionShallowReference = aO0

	// now for regular properties
	var propsReleaseDefinition struct {
		Artifacts []*Artifact `json:"artifacts"`

		Comment string `json:"comment,omitempty"`

		CreatedBy *IdentityRef `json:"createdBy,omitempty"`

		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		Description string `json:"description,omitempty"`

		Environments []*ReleaseDefinitionEnvironment `json:"environments"`

		IsDeleted bool `json:"isDeleted,omitempty"`

		LastRelease *ReleaseReference `json:"lastRelease,omitempty"`

		ModifiedBy *IdentityRef `json:"modifiedBy,omitempty"`

		ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		ReleaseNameFormat string `json:"releaseNameFormat,omitempty"`

		Revision int32 `json:"revision,omitempty"`

		Source interface{} `json:"source,omitempty"`

		Tags []string `json:"tags"`

		Triggers []*ReleaseTriggerBase `json:"triggers"`

		VariableGroups []int32 `json:"variableGroups"`

		Variables map[string]ConfigurationVariableValue `json:"variables,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsReleaseDefinition); err != nil {
		return err
	}
	m.Artifacts = propsReleaseDefinition.Artifacts

	m.Comment = propsReleaseDefinition.Comment

	m.CreatedBy = propsReleaseDefinition.CreatedBy

	m.CreatedOn = propsReleaseDefinition.CreatedOn

	m.Description = propsReleaseDefinition.Description

	m.Environments = propsReleaseDefinition.Environments

	m.IsDeleted = propsReleaseDefinition.IsDeleted

	m.LastRelease = propsReleaseDefinition.LastRelease

	m.ModifiedBy = propsReleaseDefinition.ModifiedBy

	m.ModifiedOn = propsReleaseDefinition.ModifiedOn

	m.Properties = propsReleaseDefinition.Properties

	m.ReleaseNameFormat = propsReleaseDefinition.ReleaseNameFormat

	m.Revision = propsReleaseDefinition.Revision

	m.Source = propsReleaseDefinition.Source

	m.Tags = propsReleaseDefinition.Tags

	m.Triggers = propsReleaseDefinition.Triggers

	m.VariableGroups = propsReleaseDefinition.VariableGroups

	m.Variables = propsReleaseDefinition.Variables

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReleaseDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseDefinitionShallowReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsReleaseDefinition struct {
		Artifacts []*Artifact `json:"artifacts"`

		Comment string `json:"comment,omitempty"`

		CreatedBy *IdentityRef `json:"createdBy,omitempty"`

		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		Description string `json:"description,omitempty"`

		Environments []*ReleaseDefinitionEnvironment `json:"environments"`

		IsDeleted bool `json:"isDeleted,omitempty"`

		LastRelease *ReleaseReference `json:"lastRelease,omitempty"`

		ModifiedBy *IdentityRef `json:"modifiedBy,omitempty"`

		ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		ReleaseNameFormat string `json:"releaseNameFormat,omitempty"`

		Revision int32 `json:"revision,omitempty"`

		Source interface{} `json:"source,omitempty"`

		Tags []string `json:"tags"`

		Triggers []*ReleaseTriggerBase `json:"triggers"`

		VariableGroups []int32 `json:"variableGroups"`

		Variables map[string]ConfigurationVariableValue `json:"variables,omitempty"`
	}
	propsReleaseDefinition.Artifacts = m.Artifacts

	propsReleaseDefinition.Comment = m.Comment

	propsReleaseDefinition.CreatedBy = m.CreatedBy

	propsReleaseDefinition.CreatedOn = m.CreatedOn

	propsReleaseDefinition.Description = m.Description

	propsReleaseDefinition.Environments = m.Environments

	propsReleaseDefinition.IsDeleted = m.IsDeleted

	propsReleaseDefinition.LastRelease = m.LastRelease

	propsReleaseDefinition.ModifiedBy = m.ModifiedBy

	propsReleaseDefinition.ModifiedOn = m.ModifiedOn

	propsReleaseDefinition.Properties = m.Properties

	propsReleaseDefinition.ReleaseNameFormat = m.ReleaseNameFormat

	propsReleaseDefinition.Revision = m.Revision

	propsReleaseDefinition.Source = m.Source

	propsReleaseDefinition.Tags = m.Tags

	propsReleaseDefinition.Triggers = m.Triggers

	propsReleaseDefinition.VariableGroups = m.VariableGroups

	propsReleaseDefinition.Variables = m.Variables

	jsonDataPropsReleaseDefinition, errReleaseDefinition := swag.WriteJSON(propsReleaseDefinition)
	if errReleaseDefinition != nil {
		return nil, errReleaseDefinition
	}
	_parts = append(_parts, jsonDataPropsReleaseDefinition)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this release definition
func (m *ReleaseDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseDefinitionShallowReference
	if err := m.ReleaseDefinitionShallowReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDefinition) validateArtifacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Artifacts); i++ {
		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {
			if err := m.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinition) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinition) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseDefinition) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinition) validateLastRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRelease) { // not required
		return nil
	}

	if m.LastRelease != nil {
		if err := m.LastRelease.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRelease")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinition) validateModifiedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinition) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseDefinition) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinition) validateTriggers(formats strfmt.Registry) error {

	if swag.IsZero(m.Triggers) { // not required
		return nil
	}

	for i := 0; i < len(m.Triggers); i++ {
		if swag.IsZero(m.Triggers[i]) { // not required
			continue
		}

		if m.Triggers[i] != nil {
			if err := m.Triggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinition) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDefinition) UnmarshalBinary(b []byte) error {
	var res ReleaseDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
