// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAttachment task attachment
// swagger:model TaskAttachment
type TaskAttachment struct {

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// last changed by
	// Format: uuid
	LastChangedBy strfmt.UUID `json:"lastChangedBy,omitempty"`

	// last changed on
	// Format: date-time
	LastChangedOn strfmt.DateTime `json:"lastChangedOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// record Id
	// Format: uuid
	RecordID strfmt.UUID `json:"recordId,omitempty"`

	// timeline Id
	// Format: uuid
	TimelineID strfmt.UUID `json:"timelineId,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this task attachment
func (m *TaskAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastChangedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastChangedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAttachment) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAttachment) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAttachment) validateLastChangedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastChangedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("lastChangedBy", "body", "uuid", m.LastChangedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAttachment) validateLastChangedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastChangedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("lastChangedOn", "body", "date-time", m.LastChangedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAttachment) validateRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("recordId", "body", "uuid", m.RecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAttachment) validateTimelineID(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineID) { // not required
		return nil
	}

	if err := validate.FormatOf("timelineId", "body", "uuid", m.TimelineID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAttachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAttachment) UnmarshalBinary(b []byte) error {
	var res TaskAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
