// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InputValues Information about the possible/allowed values for a given subscription input
// swagger:model InputValues
type InputValues struct {

	// The default value to use for this input
	DefaultValue string `json:"defaultValue,omitempty"`

	// Errors encountered while computing dynamic values.
	Error *InputValuesError `json:"error,omitempty"`

	// The id of the input
	InputID string `json:"inputId,omitempty"`

	// Should this input be disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)
	IsLimitedToPossibleValues bool `json:"isLimitedToPossibleValues,omitempty"`

	// Should this input be made read-only
	IsReadOnly bool `json:"isReadOnly,omitempty"`

	// Possible values that this input can take
	PossibleValues []*InputValue `json:"possibleValues"`
}

// Validate validates this input values
func (m *InputValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputValues) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *InputValues) validatePossibleValues(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleValues) { // not required
		return nil
	}

	for i := 0; i < len(m.PossibleValues); i++ {
		if swag.IsZero(m.PossibleValues[i]) { // not required
			continue
		}

		if m.PossibleValues[i] != nil {
			if err := m.PossibleValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("possibleValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputValues) UnmarshalBinary(b []byte) error {
	var res InputValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
