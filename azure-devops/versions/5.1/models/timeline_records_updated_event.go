// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TimelineRecordsUpdatedEvent timeline records updated event
// swagger:model TimelineRecordsUpdatedEvent
type TimelineRecordsUpdatedEvent struct {
	RealtimeBuildEvent

	// timeline records
	TimelineRecords []*TimelineRecord `json:"timelineRecords"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TimelineRecordsUpdatedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RealtimeBuildEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RealtimeBuildEvent = aO0

	// now for regular properties
	var propsTimelineRecordsUpdatedEvent struct {
		TimelineRecords []*TimelineRecord `json:"timelineRecords"`
	}
	if err := swag.ReadJSON(raw, &propsTimelineRecordsUpdatedEvent); err != nil {
		return err
	}
	m.TimelineRecords = propsTimelineRecordsUpdatedEvent.TimelineRecords

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TimelineRecordsUpdatedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RealtimeBuildEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTimelineRecordsUpdatedEvent struct {
		TimelineRecords []*TimelineRecord `json:"timelineRecords"`
	}
	propsTimelineRecordsUpdatedEvent.TimelineRecords = m.TimelineRecords

	jsonDataPropsTimelineRecordsUpdatedEvent, errTimelineRecordsUpdatedEvent := swag.WriteJSON(propsTimelineRecordsUpdatedEvent)
	if errTimelineRecordsUpdatedEvent != nil {
		return nil, errTimelineRecordsUpdatedEvent
	}
	_parts = append(_parts, jsonDataPropsTimelineRecordsUpdatedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this timeline records updated event
func (m *TimelineRecordsUpdatedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RealtimeBuildEvent
	if err := m.RealtimeBuildEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineRecordsUpdatedEvent) validateTimelineRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineRecords) { // not required
		return nil
	}

	for i := 0; i < len(m.TimelineRecords); i++ {
		if swag.IsZero(m.TimelineRecords[i]) { // not required
			continue
		}

		if m.TimelineRecords[i] != nil {
			if err := m.TimelineRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timelineRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineRecordsUpdatedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineRecordsUpdatedEvent) UnmarshalBinary(b []byte) error {
	var res TimelineRecordsUpdatedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
