// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildVersion build version
// swagger:model BuildVersion
type BuildVersion struct {

	// Gets or sets the commit message for the artifact.
	CommitMessage string `json:"commitMessage,omitempty"`

	// Gets or sets the definition id.
	DefinitionID string `json:"definitionId,omitempty"`

	// Gets or sets the definition name.
	DefinitionName string `json:"definitionName,omitempty"`

	// Gets or sets the build id.
	ID string `json:"id,omitempty"`

	// Gets or sets if the artifact supports multiple definitions.
	IsMultiDefinitionType bool `json:"isMultiDefinitionType,omitempty"`

	// Gets or sets the build number.
	Name string `json:"name,omitempty"`

	// Gets or sets the source branch for the artifact.
	SourceBranch string `json:"sourceBranch,omitempty"`

	// Gets or sets the source pull request version for the artifact.
	SourcePullRequestVersion *SourcePullRequestVersion `json:"sourcePullRequestVersion,omitempty"`

	// Gets or sets the repository id for the artifact.
	SourceRepositoryID string `json:"sourceRepositoryId,omitempty"`

	// Gets or sets the repository type for the artifact.
	SourceRepositoryType string `json:"sourceRepositoryType,omitempty"`

	// Gets or sets the source version for the artifact.
	SourceVersion string `json:"sourceVersion,omitempty"`
}

// Validate validates this build version
func (m *BuildVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourcePullRequestVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildVersion) validateSourcePullRequestVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePullRequestVersion) { // not required
		return nil
	}

	if m.SourcePullRequestVersion != nil {
		if err := m.SourcePullRequestVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePullRequestVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildVersion) UnmarshalBinary(b []byte) error {
	var res BuildVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
