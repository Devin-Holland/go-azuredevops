// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BoardFields board fields
// swagger:model BoardFields
type BoardFields struct {

	// column field
	ColumnField *FieldReference `json:"columnField,omitempty"`

	// done field
	DoneField *FieldReference `json:"doneField,omitempty"`

	// row field
	RowField *FieldReference `json:"rowField,omitempty"`
}

// Validate validates this board fields
func (m *BoardFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoneField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoardFields) validateColumnField(formats strfmt.Registry) error {

	if swag.IsZero(m.ColumnField) { // not required
		return nil
	}

	if m.ColumnField != nil {
		if err := m.ColumnField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("columnField")
			}
			return err
		}
	}

	return nil
}

func (m *BoardFields) validateDoneField(formats strfmt.Registry) error {

	if swag.IsZero(m.DoneField) { // not required
		return nil
	}

	if m.DoneField != nil {
		if err := m.DoneField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("doneField")
			}
			return err
		}
	}

	return nil
}

func (m *BoardFields) validateRowField(formats strfmt.Registry) error {

	if swag.IsZero(m.RowField) { // not required
		return nil
	}

	if m.RowField != nil {
		if err := m.RowField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rowField")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoardFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoardFields) UnmarshalBinary(b []byte) error {
	var res BoardFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
