// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseRevision release revision
// swagger:model ReleaseRevision
type ReleaseRevision struct {

	// Change details of the revision.
	ChangeDetails string `json:"changeDetails,omitempty"`

	// Change details of the revision. Typically ChangeDetails values are Add and Update.
	ChangeType string `json:"changeType,omitempty"`

	// Gets or sets the identity who changed.
	ChangedBy *IdentityRef `json:"changedBy,omitempty"`

	// Change date of the revision.
	// Format: date-time
	ChangedDate strfmt.DateTime `json:"changedDate,omitempty"`

	// Comment of the revision.
	Comment string `json:"comment,omitempty"`

	// Release ID of which this revision belongs.
	DefinitionSnapshotRevision int32 `json:"definitionSnapshotRevision,omitempty"`

	// Gets or sets the release ID of which this revision belongs.
	ReleaseID int32 `json:"releaseId,omitempty"`
}

// Validate validates this release revision
func (m *ReleaseRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseRevision) validateChangedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangedBy) { // not required
		return nil
	}

	if m.ChangedBy != nil {
		if err := m.ChangedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseRevision) validateChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("changedDate", "body", "date-time", m.ChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseRevision) UnmarshalBinary(b []byte) error {
	var res ReleaseRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
