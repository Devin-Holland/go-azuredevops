// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VariableGroupParameters variable group parameters
// swagger:model VariableGroupParameters
type VariableGroupParameters struct {

	// Sets description of the variable group.
	Description string `json:"description,omitempty"`

	// Sets name of the variable group.
	Name string `json:"name,omitempty"`

	// Sets provider data.
	ProviderData VariableGroupProviderData `json:"providerData,omitempty"`

	// Sets type of the variable group.
	Type string `json:"type,omitempty"`

	// Sets variables contained in the variable group.
	Variables map[string]VariableValue `json:"variables,omitempty"`
}

// Validate validates this variable group parameters
func (m *VariableGroupParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariableGroupParameters) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VariableGroupParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariableGroupParameters) UnmarshalBinary(b []byte) error {
	var res VariableGroupParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
