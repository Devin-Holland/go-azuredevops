// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyEvaluationRecord This record encapsulates the current state of a policy as it applies to one specific pull request. Each pull request has a unique PolicyEvaluationRecord for each pull request which the policy applies to.
// swagger:model PolicyEvaluationRecord
type PolicyEvaluationRecord struct {

	// Links to other related objects
	Links *ReferenceLinks `json:"_links,omitempty"`

	// A string which uniquely identifies the target of a policy evaluation.
	ArtifactID string `json:"artifactId,omitempty"`

	// Time when this policy finished evaluating on this pull request.
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Contains all configuration data for the policy which is being evaluated.
	Configuration *PolicyConfiguration `json:"configuration,omitempty"`

	// Internal context data of this policy evaluation.
	Context *JObject `json:"context,omitempty"`

	// Guid which uniquely identifies this evaluation record (one policy running on one pull request).
	// Format: uuid
	EvaluationID strfmt.UUID `json:"evaluationId,omitempty"`

	// Time when this policy was first evaluated on this pull request.
	// Format: date-time
	StartedDate strfmt.DateTime `json:"startedDate,omitempty"`

	// Status of the policy (Running, Approved, Failed, etc.)
	// Enum: [queued running approved rejected notApplicable broken]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this policy evaluation record
func (m *PolicyEvaluationRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEvaluationRecord) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEvaluationRecord) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyEvaluationRecord) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEvaluationRecord) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEvaluationRecord) validateEvaluationID(formats strfmt.Registry) error {

	if swag.IsZero(m.EvaluationID) { // not required
		return nil
	}

	if err := validate.FormatOf("evaluationId", "body", "uuid", m.EvaluationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyEvaluationRecord) validateStartedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startedDate", "body", "date-time", m.StartedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEvaluationRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEvaluationRecord) UnmarshalBinary(b []byte) error {
	var res PolicyEvaluationRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
