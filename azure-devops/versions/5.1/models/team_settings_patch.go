// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamSettingsPatch Data contract for what we expect to receive when PATCH
// swagger:model TeamSettingsPatch
type TeamSettingsPatch struct {

	// backlog iteration
	// Format: uuid
	BacklogIteration strfmt.UUID `json:"backlogIteration,omitempty"`

	// backlog visibilities
	BacklogVisibilities map[string]bool `json:"backlogVisibilities,omitempty"`

	// bugs behavior
	// Enum: [off asRequirements asTasks]
	BugsBehavior interface{} `json:"bugsBehavior,omitempty"`

	// default iteration
	// Format: uuid
	DefaultIteration strfmt.UUID `json:"defaultIteration,omitempty"`

	// default iteration macro
	DefaultIterationMacro string `json:"defaultIterationMacro,omitempty"`

	// working days
	WorkingDays []interface{} `json:"workingDays"`
}

// Validate validates this team settings patch
func (m *TeamSettingsPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBacklogIteration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultIteration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkingDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamSettingsPatch) validateBacklogIteration(formats strfmt.Registry) error {

	if swag.IsZero(m.BacklogIteration) { // not required
		return nil
	}

	if err := validate.FormatOf("backlogIteration", "body", "uuid", m.BacklogIteration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TeamSettingsPatch) validateDefaultIteration(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultIteration) { // not required
		return nil
	}

	if err := validate.FormatOf("defaultIteration", "body", "uuid", m.DefaultIteration.String(), formats); err != nil {
		return err
	}

	return nil
}

var teamSettingsPatchWorkingDaysItemsEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["sunday","monday","tuesday","wednesday","thursday","friday","saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamSettingsPatchWorkingDaysItemsEnum = append(teamSettingsPatchWorkingDaysItemsEnum, v)
	}
}

func (m *TeamSettingsPatch) validateWorkingDaysItemsEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, teamSettingsPatchWorkingDaysItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *TeamSettingsPatch) validateWorkingDays(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkingDays) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamSettingsPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamSettingsPatch) UnmarshalBinary(b []byte) error {
	var res TeamSettingsPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
