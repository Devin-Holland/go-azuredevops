// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExtensionEventCallbackCollection Collection of event callbacks - endpoints called when particular extension events occur.
// swagger:model ExtensionEventCallbackCollection
type ExtensionEventCallbackCollection struct {

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension disable has occurred.
	PostDisable *ExtensionEventCallback `json:"postDisable,omitempty"`

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension enable has occurred.
	PostEnable *ExtensionEventCallback `json:"postEnable,omitempty"`

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension install has completed.
	PostInstall *ExtensionEventCallback `json:"postInstall,omitempty"`

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension uninstall has occurred.
	PostUninstall *ExtensionEventCallback `json:"postUninstall,omitempty"`

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension update has occurred.
	PostUpdate *ExtensionEventCallback `json:"postUpdate,omitempty"`

	// Optional.  Defines an endpoint that gets called via a POST reqeust to notify that an extension install is about to occur.  Response indicates whether to proceed or abort.
	PreInstall *ExtensionEventCallback `json:"preInstall,omitempty"`

	// For multi-version extensions, defines an endpoint that gets called via an OPTIONS request to determine the particular version of the extension to be used
	VersionCheck *ExtensionEventCallback `json:"versionCheck,omitempty"`
}

// Validate validates this extension event callback collection
func (m *ExtensionEventCallbackCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostDisable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostInstall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostUninstall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreInstall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCheck(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionEventCallbackCollection) validatePostDisable(formats strfmt.Registry) error {

	if swag.IsZero(m.PostDisable) { // not required
		return nil
	}

	if m.PostDisable != nil {
		if err := m.PostDisable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDisable")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validatePostEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.PostEnable) { // not required
		return nil
	}

	if m.PostEnable != nil {
		if err := m.PostEnable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postEnable")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validatePostInstall(formats strfmt.Registry) error {

	if swag.IsZero(m.PostInstall) { // not required
		return nil
	}

	if m.PostInstall != nil {
		if err := m.PostInstall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstall")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validatePostUninstall(formats strfmt.Registry) error {

	if swag.IsZero(m.PostUninstall) { // not required
		return nil
	}

	if m.PostUninstall != nil {
		if err := m.PostUninstall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postUninstall")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validatePostUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.PostUpdate) { // not required
		return nil
	}

	if m.PostUpdate != nil {
		if err := m.PostUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validatePreInstall(formats strfmt.Registry) error {

	if swag.IsZero(m.PreInstall) { // not required
		return nil
	}

	if m.PreInstall != nil {
		if err := m.PreInstall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preInstall")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionEventCallbackCollection) validateVersionCheck(formats strfmt.Registry) error {

	if swag.IsZero(m.VersionCheck) { // not required
		return nil
	}

	if m.VersionCheck != nil {
		if err := m.VersionCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionCheck")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionEventCallbackCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionEventCallbackCollection) UnmarshalBinary(b []byte) error {
	var res ExtensionEventCallbackCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
