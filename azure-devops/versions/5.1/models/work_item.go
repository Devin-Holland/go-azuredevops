// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItem Describes a work item.
// swagger:model WorkItem
type WorkItem struct {
	WorkItemTrackingResource

	// Reference to a specific version of the comment added/edited/deleted in this revision.
	CommentVersionRef *WorkItemCommentVersionRef `json:"commentVersionRef,omitempty"`

	// Map of field and values for the work item.
	Fields map[string]interface{} `json:"fields,omitempty"`

	// The work item ID.
	ID int32 `json:"id,omitempty"`

	// Relations of the work item.
	Relations []*WorkItemRelation `json:"relations"`

	// Revision number of the work item.
	Rev int32 `json:"rev,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItem struct {
		CommentVersionRef *WorkItemCommentVersionRef `json:"commentVersionRef,omitempty"`

		Fields map[string]interface{} `json:"fields,omitempty"`

		ID int32 `json:"id,omitempty"`

		Relations []*WorkItemRelation `json:"relations"`

		Rev int32 `json:"rev,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItem); err != nil {
		return err
	}
	m.CommentVersionRef = propsWorkItem.CommentVersionRef

	m.Fields = propsWorkItem.Fields

	m.ID = propsWorkItem.ID

	m.Relations = propsWorkItem.Relations

	m.Rev = propsWorkItem.Rev

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItem struct {
		CommentVersionRef *WorkItemCommentVersionRef `json:"commentVersionRef,omitempty"`

		Fields map[string]interface{} `json:"fields,omitempty"`

		ID int32 `json:"id,omitempty"`

		Relations []*WorkItemRelation `json:"relations"`

		Rev int32 `json:"rev,omitempty"`
	}
	propsWorkItem.CommentVersionRef = m.CommentVersionRef

	propsWorkItem.Fields = m.Fields

	propsWorkItem.ID = m.ID

	propsWorkItem.Relations = m.Relations

	propsWorkItem.Rev = m.Rev

	jsonDataPropsWorkItem, errWorkItem := swag.WriteJSON(propsWorkItem)
	if errWorkItem != nil {
		return nil, errWorkItem
	}
	_parts = append(_parts, jsonDataPropsWorkItem)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item
func (m *WorkItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommentVersionRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItem) validateCommentVersionRef(formats strfmt.Registry) error {

	if swag.IsZero(m.CommentVersionRef) { // not required
		return nil
	}

	if m.CommentVersionRef != nil {
		if err := m.CommentVersionRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commentVersionRef")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItem) validateRelations(formats strfmt.Registry) error {

	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	for i := 0; i < len(m.Relations); i++ {
		if swag.IsZero(m.Relations[i]) { // not required
			continue
		}

		if m.Relations[i] != nil {
			if err := m.Relations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItem) UnmarshalBinary(b []byte) error {
	var res WorkItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
