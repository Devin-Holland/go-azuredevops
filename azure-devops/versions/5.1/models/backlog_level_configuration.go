// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BacklogLevelConfiguration backlog level configuration
// swagger:model BacklogLevelConfiguration
type BacklogLevelConfiguration struct {

	// List of fields to include in Add Panel
	AddPanelFields []*WorkItemFieldReference `json:"addPanelFields"`

	// Color for the backlog level
	Color string `json:"color,omitempty"`

	// Default list of columns for the backlog
	ColumnFields []*BacklogColumn `json:"columnFields"`

	// Defaulst Work Item Type for the backlog
	DefaultWorkItemType *WorkItemTypeReference `json:"defaultWorkItemType,omitempty"`

	// Backlog Id (for Legacy Backlog Level from process config it can be categoryref name)
	ID string `json:"id,omitempty"`

	// Indicates whether the backlog level is hidden
	IsHidden bool `json:"isHidden,omitempty"`

	// Backlog Name
	Name string `json:"name,omitempty"`

	// Backlog Rank (Taskbacklog is 0)
	Rank int32 `json:"rank,omitempty"`

	// The type of this backlog level
	// Enum: [portfolio requirement task]
	Type interface{} `json:"type,omitempty"`

	// Max number of work items to show in the given backlog
	WorkItemCountLimit int32 `json:"workItemCountLimit,omitempty"`

	// Work Item types participating in this backlog as known by the project/Process, can be overridden by team settings for bugs
	WorkItemTypes []*WorkItemTypeReference `json:"workItemTypes"`
}

// Validate validates this backlog level configuration
func (m *BacklogLevelConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddPanelFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumnFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultWorkItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItemTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BacklogLevelConfiguration) validateAddPanelFields(formats strfmt.Registry) error {

	if swag.IsZero(m.AddPanelFields) { // not required
		return nil
	}

	for i := 0; i < len(m.AddPanelFields); i++ {
		if swag.IsZero(m.AddPanelFields[i]) { // not required
			continue
		}

		if m.AddPanelFields[i] != nil {
			if err := m.AddPanelFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addPanelFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BacklogLevelConfiguration) validateColumnFields(formats strfmt.Registry) error {

	if swag.IsZero(m.ColumnFields) { // not required
		return nil
	}

	for i := 0; i < len(m.ColumnFields); i++ {
		if swag.IsZero(m.ColumnFields[i]) { // not required
			continue
		}

		if m.ColumnFields[i] != nil {
			if err := m.ColumnFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columnFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BacklogLevelConfiguration) validateDefaultWorkItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultWorkItemType) { // not required
		return nil
	}

	if m.DefaultWorkItemType != nil {
		if err := m.DefaultWorkItemType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultWorkItemType")
			}
			return err
		}
	}

	return nil
}

func (m *BacklogLevelConfiguration) validateWorkItemTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemTypes); i++ {
		if swag.IsZero(m.WorkItemTypes[i]) { // not required
			continue
		}

		if m.WorkItemTypes[i] != nil {
			if err := m.WorkItemTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BacklogLevelConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BacklogLevelConfiguration) UnmarshalBinary(b []byte) error {
	var res BacklogLevelConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
