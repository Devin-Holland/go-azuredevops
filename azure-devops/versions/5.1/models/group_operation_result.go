// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupOperationResult group operation result
// swagger:model GroupOperationResult
type GroupOperationResult struct {
	BaseOperationResult

	// Identifier of the Group being acted upon
	// Format: uuid
	GroupID strfmt.UUID `json:"groupId,omitempty"`

	// Result of the Groupentitlement after the operation
	Result *GroupEntitlement `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GroupOperationResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseOperationResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseOperationResult = aO0

	// now for regular properties
	var propsGroupOperationResult struct {
		GroupID strfmt.UUID `json:"groupId,omitempty"`

		Result *GroupEntitlement `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsGroupOperationResult); err != nil {
		return err
	}
	m.GroupID = propsGroupOperationResult.GroupID

	m.Result = propsGroupOperationResult.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GroupOperationResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BaseOperationResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsGroupOperationResult struct {
		GroupID strfmt.UUID `json:"groupId,omitempty"`

		Result *GroupEntitlement `json:"result,omitempty"`
	}
	propsGroupOperationResult.GroupID = m.GroupID

	propsGroupOperationResult.Result = m.Result

	jsonDataPropsGroupOperationResult, errGroupOperationResult := swag.WriteJSON(propsGroupOperationResult)
	if errGroupOperationResult != nil {
		return nil, errGroupOperationResult
	}
	_parts = append(_parts, jsonDataPropsGroupOperationResult)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this group operation result
func (m *GroupOperationResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseOperationResult
	if err := m.BaseOperationResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupOperationResult) validateGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("groupId", "body", "uuid", m.GroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupOperationResult) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupOperationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupOperationResult) UnmarshalBinary(b []byte) error {
	var res GroupOperationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
