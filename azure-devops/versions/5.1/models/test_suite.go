// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestSuite Test suite
// swagger:model TestSuite
type TestSuite struct {
	TestSuiteCreateParams

	// Links: self, testPoints, testCases, parent
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Child test suites of current test suite.
	Children []*TestSuite `json:"children"`

	// Boolean value dictating if Child test suites are present
	HasChildren bool `json:"hasChildren,omitempty"`

	// Id of test suite.
	ID int32 `json:"id,omitempty"`

	// Last error for test suite.
	LastError string `json:"lastError,omitempty"`

	// Last populated date.
	// Format: date-time
	LastPopulatedDate strfmt.DateTime `json:"lastPopulatedDate,omitempty"`

	// IdentityRef of user who has updated test suite recently.
	LastUpdatedBy *IdentityRef `json:"lastUpdatedBy,omitempty"`

	// Last update date.
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// Test plan to which the test suite belongs.
	Plan *TestPlanReference `json:"plan,omitempty"`

	// Test suite project shallow reference.
	Project *TeamProjectReference `json:"project,omitempty"`

	// Test suite revision.
	Revision int32 `json:"revision,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestSuite) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestSuiteCreateParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestSuiteCreateParams = aO0

	// now for regular properties
	var propsTestSuite struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Children []*TestSuite `json:"children"`

		HasChildren bool `json:"hasChildren,omitempty"`

		ID int32 `json:"id,omitempty"`

		LastError string `json:"lastError,omitempty"`

		LastPopulatedDate strfmt.DateTime `json:"lastPopulatedDate,omitempty"`

		LastUpdatedBy *IdentityRef `json:"lastUpdatedBy,omitempty"`

		LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

		Plan *TestPlanReference `json:"plan,omitempty"`

		Project *TeamProjectReference `json:"project,omitempty"`

		Revision int32 `json:"revision,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestSuite); err != nil {
		return err
	}
	m.Links = propsTestSuite.Links

	m.Children = propsTestSuite.Children

	m.HasChildren = propsTestSuite.HasChildren

	m.ID = propsTestSuite.ID

	m.LastError = propsTestSuite.LastError

	m.LastPopulatedDate = propsTestSuite.LastPopulatedDate

	m.LastUpdatedBy = propsTestSuite.LastUpdatedBy

	m.LastUpdatedDate = propsTestSuite.LastUpdatedDate

	m.Plan = propsTestSuite.Plan

	m.Project = propsTestSuite.Project

	m.Revision = propsTestSuite.Revision

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestSuite) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestSuiteCreateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestSuite struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Children []*TestSuite `json:"children"`

		HasChildren bool `json:"hasChildren,omitempty"`

		ID int32 `json:"id,omitempty"`

		LastError string `json:"lastError,omitempty"`

		LastPopulatedDate strfmt.DateTime `json:"lastPopulatedDate,omitempty"`

		LastUpdatedBy *IdentityRef `json:"lastUpdatedBy,omitempty"`

		LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

		Plan *TestPlanReference `json:"plan,omitempty"`

		Project *TeamProjectReference `json:"project,omitempty"`

		Revision int32 `json:"revision,omitempty"`
	}
	propsTestSuite.Links = m.Links

	propsTestSuite.Children = m.Children

	propsTestSuite.HasChildren = m.HasChildren

	propsTestSuite.ID = m.ID

	propsTestSuite.LastError = m.LastError

	propsTestSuite.LastPopulatedDate = m.LastPopulatedDate

	propsTestSuite.LastUpdatedBy = m.LastUpdatedBy

	propsTestSuite.LastUpdatedDate = m.LastUpdatedDate

	propsTestSuite.Plan = m.Plan

	propsTestSuite.Project = m.Project

	propsTestSuite.Revision = m.Revision

	jsonDataPropsTestSuite, errTestSuite := swag.WriteJSON(propsTestSuite)
	if errTestSuite != nil {
		return nil, errTestSuite
	}
	_parts = append(_parts, jsonDataPropsTestSuite)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test suite
func (m *TestSuite) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestSuiteCreateParams
	if err := m.TestSuiteCreateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPopulatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSuite) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuite) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSuite) validateLastPopulatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPopulatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastPopulatedDate", "body", "date-time", m.LastPopulatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSuite) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if m.LastUpdatedBy != nil {
		if err := m.LastUpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuite) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSuite) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuite) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSuite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSuite) UnmarshalBinary(b []byte) error {
	var res TestSuite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
