// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FieldDependentRule Describes a list of dependent fields for a rule.
// swagger:model FieldDependentRule
type FieldDependentRule struct {
	WorkItemTrackingResource

	// The dependent fields.
	DependentFields []*WorkItemFieldReference `json:"dependentFields"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FieldDependentRule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsFieldDependentRule struct {
		DependentFields []*WorkItemFieldReference `json:"dependentFields"`
	}
	if err := swag.ReadJSON(raw, &propsFieldDependentRule); err != nil {
		return err
	}
	m.DependentFields = propsFieldDependentRule.DependentFields

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FieldDependentRule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsFieldDependentRule struct {
		DependentFields []*WorkItemFieldReference `json:"dependentFields"`
	}
	propsFieldDependentRule.DependentFields = m.DependentFields

	jsonDataPropsFieldDependentRule, errFieldDependentRule := swag.WriteJSON(propsFieldDependentRule)
	if errFieldDependentRule != nil {
		return nil, errFieldDependentRule
	}
	_parts = append(_parts, jsonDataPropsFieldDependentRule)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this field dependent rule
func (m *FieldDependentRule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependentFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldDependentRule) validateDependentFields(formats strfmt.Registry) error {

	if swag.IsZero(m.DependentFields) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentFields); i++ {
		if swag.IsZero(m.DependentFields[i]) { // not required
			continue
		}

		if m.DependentFields[i] != nil {
			if err := m.DependentFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldDependentRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldDependentRule) UnmarshalBinary(b []byte) error {
	var res FieldDependentRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
