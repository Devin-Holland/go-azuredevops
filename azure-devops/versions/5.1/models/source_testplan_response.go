// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SourceTestplanResponse Source Test Plan Response for Test Plan clone operation
// swagger:model SourceTestplanResponse
type SourceTestplanResponse struct {
	TestPlanReference

	// project reference
	Project *TeamProjectReference `json:"project,omitempty"`

	// Id of suites to be cloned inside source Test Plan
	SuiteIds []int32 `json:"suiteIds"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SourceTestplanResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestPlanReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestPlanReference = aO0

	// now for regular properties
	var propsSourceTestplanResponse struct {
		Project *TeamProjectReference `json:"project,omitempty"`

		SuiteIds []int32 `json:"suiteIds"`
	}
	if err := swag.ReadJSON(raw, &propsSourceTestplanResponse); err != nil {
		return err
	}
	m.Project = propsSourceTestplanResponse.Project

	m.SuiteIds = propsSourceTestplanResponse.SuiteIds

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SourceTestplanResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestPlanReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSourceTestplanResponse struct {
		Project *TeamProjectReference `json:"project,omitempty"`

		SuiteIds []int32 `json:"suiteIds"`
	}
	propsSourceTestplanResponse.Project = m.Project

	propsSourceTestplanResponse.SuiteIds = m.SuiteIds

	jsonDataPropsSourceTestplanResponse, errSourceTestplanResponse := swag.WriteJSON(propsSourceTestplanResponse)
	if errSourceTestplanResponse != nil {
		return nil, errSourceTestplanResponse
	}
	_parts = append(_parts, jsonDataPropsSourceTestplanResponse)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this source testplan response
func (m *SourceTestplanResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestPlanReference
	if err := m.TestPlanReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceTestplanResponse) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceTestplanResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceTestplanResponse) UnmarshalBinary(b []byte) error {
	var res SourceTestplanResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
