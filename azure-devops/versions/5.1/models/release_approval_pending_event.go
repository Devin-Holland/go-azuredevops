// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseApprovalPendingEvent release approval pending event
// swagger:model ReleaseApprovalPendingEvent
type ReleaseApprovalPendingEvent struct {

	// approval
	Approval *ReleaseApproval `json:"approval,omitempty"`

	// approval options
	ApprovalOptions *ApprovalOptions `json:"approvalOptions,omitempty"`

	// completed approvals
	CompletedApprovals []*ReleaseApproval `json:"completedApprovals"`

	// definition name
	DefinitionName string `json:"definitionName,omitempty"`

	// deployment
	Deployment *Deployment `json:"deployment,omitempty"`

	// environment Id
	EnvironmentID int32 `json:"environmentId,omitempty"`

	// environment name
	EnvironmentName string `json:"environmentName,omitempty"`

	// environments
	Environments []*ReleaseEnvironment `json:"environments"`

	// is multiple rank approval
	IsMultipleRankApproval bool `json:"isMultipleRankApproval,omitempty"`

	// pending approvals
	PendingApprovals []*ReleaseApproval `json:"pendingApprovals"`

	// release creator
	ReleaseCreator string `json:"releaseCreator,omitempty"`

	// release name
	ReleaseName string `json:"releaseName,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// web access Uri
	WebAccessURI string `json:"webAccessUri,omitempty"`
}

// Validate validates this release approval pending event
func (m *ReleaseApprovalPendingEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovalOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedApprovals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingApprovals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseApprovalPendingEvent) validateApproval(formats strfmt.Registry) error {

	if swag.IsZero(m.Approval) { // not required
		return nil
	}

	if m.Approval != nil {
		if err := m.Approval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approval")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseApprovalPendingEvent) validateApprovalOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalOptions) { // not required
		return nil
	}

	if m.ApprovalOptions != nil {
		if err := m.ApprovalOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approvalOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseApprovalPendingEvent) validateCompletedApprovals(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedApprovals) { // not required
		return nil
	}

	for i := 0; i < len(m.CompletedApprovals); i++ {
		if swag.IsZero(m.CompletedApprovals[i]) { // not required
			continue
		}

		if m.CompletedApprovals[i] != nil {
			if err := m.CompletedApprovals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("completedApprovals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseApprovalPendingEvent) validateDeployment(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployment) { // not required
		return nil
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseApprovalPendingEvent) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseApprovalPendingEvent) validatePendingApprovals(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingApprovals) { // not required
		return nil
	}

	for i := 0; i < len(m.PendingApprovals); i++ {
		if swag.IsZero(m.PendingApprovals[i]) { // not required
			continue
		}

		if m.PendingApprovals[i] != nil {
			if err := m.PendingApprovals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pendingApprovals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseApprovalPendingEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseApprovalPendingEvent) UnmarshalBinary(b []byte) error {
	var res ReleaseApprovalPendingEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
