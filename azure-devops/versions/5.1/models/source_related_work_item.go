// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SourceRelatedWorkItem Represents a work item related to some source item. These are retrieved from Source Providers.
// swagger:model SourceRelatedWorkItem
type SourceRelatedWorkItem struct {

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Identity ref for the person that the work item is assigned to.
	AssignedTo *IdentityRef `json:"assignedTo,omitempty"`

	// Current state of the work item, e.g. Active, Resolved, Closed, etc.
	CurrentState string `json:"currentState,omitempty"`

	// Long description for the work item.
	Description string `json:"description,omitempty"`

	// Unique identifier for the work item
	ID string `json:"id,omitempty"`

	// The name of the provider the work item is associated with.
	ProviderName string `json:"providerName,omitempty"`

	// Short name for the work item.
	Title string `json:"title,omitempty"`

	// Type of work item, e.g. Bug, Task, User Story, etc.
	Type string `json:"type,omitempty"`
}

// Validate validates this source related work item
func (m *SourceRelatedWorkItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceRelatedWorkItem) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SourceRelatedWorkItem) validateAssignedTo(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedTo) { // not required
		return nil
	}

	if m.AssignedTo != nil {
		if err := m.AssignedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignedTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceRelatedWorkItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceRelatedWorkItem) UnmarshalBinary(b []byte) error {
	var res SourceRelatedWorkItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
