// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskAgentPoolMaintenanceDefinition task agent pool maintenance definition
// swagger:model TaskAgentPoolMaintenanceDefinition
type TaskAgentPoolMaintenanceDefinition struct {

	// Enable maintenance
	Enabled bool `json:"enabled,omitempty"`

	// Id
	ID int32 `json:"id,omitempty"`

	// Maintenance job timeout per agent
	JobTimeoutInMinutes int32 `json:"jobTimeoutInMinutes,omitempty"`

	// Max percentage of agents within a pool running maintenance job at given time
	MaxConcurrentAgentsPercentage int32 `json:"maxConcurrentAgentsPercentage,omitempty"`

	// options
	Options *TaskAgentPoolMaintenanceOptions `json:"options,omitempty"`

	// Pool reference for the maintenance definition
	Pool *TaskAgentPoolReference `json:"pool,omitempty"`

	// retention policy
	RetentionPolicy *TaskAgentPoolMaintenanceRetentionPolicy `json:"retentionPolicy,omitempty"`

	// schedule setting
	ScheduleSetting *TaskAgentPoolMaintenanceSchedule `json:"scheduleSetting,omitempty"`
}

// Validate validates this task agent pool maintenance definition
func (m *TaskAgentPoolMaintenanceDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleSetting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentPoolMaintenanceDefinition) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPoolMaintenanceDefinition) validatePool(formats strfmt.Registry) error {

	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPoolMaintenanceDefinition) validateRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RetentionPolicy) { // not required
		return nil
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPoolMaintenanceDefinition) validateScheduleSetting(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduleSetting) { // not required
		return nil
	}

	if m.ScheduleSetting != nil {
		if err := m.ScheduleSetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleSetting")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentPoolMaintenanceDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentPoolMaintenanceDefinition) UnmarshalBinary(b []byte) error {
	var res TaskAgentPoolMaintenanceDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
