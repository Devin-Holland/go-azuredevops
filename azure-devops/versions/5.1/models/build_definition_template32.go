// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildDefinitionTemplate32 For back-compat with extensions that use the old Steps format instead of Process and Phases
// swagger:model BuildDefinitionTemplate3_2
type BuildDefinitionTemplate32 struct {

	// can delete
	CanDelete bool `json:"canDelete,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// default hosted queue
	DefaultHostedQueue string `json:"defaultHostedQueue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// icon task Id
	// Format: uuid
	IconTaskID strfmt.UUID `json:"iconTaskId,omitempty"`

	// icons
	Icons map[string]string `json:"icons,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// template
	Template *BuildDefinition32 `json:"template,omitempty"`
}

// Validate validates this build definition template3 2
func (m *BuildDefinitionTemplate32) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIconTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildDefinitionTemplate32) validateIconTaskID(formats strfmt.Registry) error {

	if swag.IsZero(m.IconTaskID) { // not required
		return nil
	}

	if err := validate.FormatOf("iconTaskId", "body", "uuid", m.IconTaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildDefinitionTemplate32) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildDefinitionTemplate32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildDefinitionTemplate32) UnmarshalBinary(b []byte) error {
	var res BuildDefinitionTemplate32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
