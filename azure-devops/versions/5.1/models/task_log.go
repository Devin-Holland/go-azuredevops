// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskLog task log
// swagger:model TaskLog
type TaskLog struct {
	TaskLogReference

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// index location
	IndexLocation string `json:"indexLocation,omitempty"`

	// last changed on
	// Format: date-time
	LastChangedOn strfmt.DateTime `json:"lastChangedOn,omitempty"`

	// line count
	LineCount int64 `json:"lineCount,omitempty"`

	// path
	Path string `json:"path,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskLog) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskLogReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskLogReference = aO0

	// now for regular properties
	var propsTaskLog struct {
		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		IndexLocation string `json:"indexLocation,omitempty"`

		LastChangedOn strfmt.DateTime `json:"lastChangedOn,omitempty"`

		LineCount int64 `json:"lineCount,omitempty"`

		Path string `json:"path,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskLog); err != nil {
		return err
	}
	m.CreatedOn = propsTaskLog.CreatedOn

	m.IndexLocation = propsTaskLog.IndexLocation

	m.LastChangedOn = propsTaskLog.LastChangedOn

	m.LineCount = propsTaskLog.LineCount

	m.Path = propsTaskLog.Path

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskLog) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskLogReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskLog struct {
		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		IndexLocation string `json:"indexLocation,omitempty"`

		LastChangedOn strfmt.DateTime `json:"lastChangedOn,omitempty"`

		LineCount int64 `json:"lineCount,omitempty"`

		Path string `json:"path,omitempty"`
	}
	propsTaskLog.CreatedOn = m.CreatedOn

	propsTaskLog.IndexLocation = m.IndexLocation

	propsTaskLog.LastChangedOn = m.LastChangedOn

	propsTaskLog.LineCount = m.LineCount

	propsTaskLog.Path = m.Path

	jsonDataPropsTaskLog, errTaskLog := swag.WriteJSON(propsTaskLog)
	if errTaskLog != nil {
		return nil, errTaskLog
	}
	_parts = append(_parts, jsonDataPropsTaskLog)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task log
func (m *TaskLog) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskLogReference
	if err := m.TaskLogReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastChangedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskLog) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskLog) validateLastChangedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastChangedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("lastChangedOn", "body", "date-time", m.LastChangedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskLog) UnmarshalBinary(b []byte) error {
	var res TaskLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
