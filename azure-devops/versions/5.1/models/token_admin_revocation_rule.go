// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenAdminRevocationRule A rule which is applied to disable any incoming delegated authorization which matches the given properties.
// swagger:model TokenAdminRevocationRule
type TokenAdminRevocationRule struct {

	// A datetime cutoff. Tokens created before this time will be rejected. This is an optional paramter. If omitted, defaults to the time at which the rule was created.
	// Format: date-time
	CreatedBefore strfmt.DateTime `json:"createdBefore,omitempty"`

	// A string containing a space-delimited list of OAuth scopes. A token matching any one of the scopes will be rejected. For a list of all OAuth scopes supported by VSTS, see: https://docs.microsoft.com/en-us/vsts/integrate/get-started/authentication/oauth?view=vsts#scopes. This is a mandatory parameter.
	Scopes string `json:"scopes,omitempty"`
}

// Validate validates this token admin revocation rule
func (m *TokenAdminRevocationRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenAdminRevocationRule) validateCreatedBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBefore", "body", "date-time", m.CreatedBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenAdminRevocationRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenAdminRevocationRule) UnmarshalBinary(b []byte) error {
	var res TokenAdminRevocationRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
