// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDeployPhase release deploy phase
// swagger:model ReleaseDeployPhase
type ReleaseDeployPhase struct {

	// Deployment jobs of the phase.
	DeploymentJobs []*DeploymentJob `json:"deploymentJobs"`

	// Phase execution error logs.
	ErrorLog string `json:"errorLog,omitempty"`

	// List of manual intervention tasks execution information in phase.
	ManualInterventions []*ManualIntervention `json:"manualInterventions"`

	// Name of the phase.
	Name string `json:"name,omitempty"`

	// ID of the phase.
	PhaseID string `json:"phaseId,omitempty"`

	// Type of the phase.
	// Enum: [undefined agentBasedDeployment runOnServer machineGroupBasedDeployment deploymentGates]
	PhaseType interface{} `json:"phaseType,omitempty"`

	// Rank of the phase.
	Rank int32 `json:"rank,omitempty"`

	// Run Plan ID of the phase.
	// Format: uuid
	RunPlanID strfmt.UUID `json:"runPlanId,omitempty"`

	// Phase start time.
	// Format: date-time
	StartedOn strfmt.DateTime `json:"startedOn,omitempty"`

	// Status of the phase.
	// Enum: [undefined notStarted inProgress partiallySucceeded succeeded failed canceled skipped cancelling]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this release deploy phase
func (m *ReleaseDeployPhase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualInterventions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDeployPhase) validateDeploymentJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentJobs); i++ {
		if swag.IsZero(m.DeploymentJobs[i]) { // not required
			continue
		}

		if m.DeploymentJobs[i] != nil {
			if err := m.DeploymentJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deploymentJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDeployPhase) validateManualInterventions(formats strfmt.Registry) error {

	if swag.IsZero(m.ManualInterventions) { // not required
		return nil
	}

	for i := 0; i < len(m.ManualInterventions); i++ {
		if swag.IsZero(m.ManualInterventions[i]) { // not required
			continue
		}

		if m.ManualInterventions[i] != nil {
			if err := m.ManualInterventions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("manualInterventions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDeployPhase) validateRunPlanID(formats strfmt.Registry) error {

	if swag.IsZero(m.RunPlanID) { // not required
		return nil
	}

	if err := validate.FormatOf("runPlanId", "body", "uuid", m.RunPlanID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseDeployPhase) validateStartedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("startedOn", "body", "date-time", m.StartedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDeployPhase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDeployPhase) UnmarshalBinary(b []byte) error {
	var res ReleaseDeployPhase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
