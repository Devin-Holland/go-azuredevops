// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamContext The Team Context for an operation.
// swagger:model TeamContext
type TeamContext struct {

	// The team project Id or name.  Ignored if ProjectId is set.
	Project string `json:"project,omitempty"`

	// The Team Project ID.  Required if Project is not set.
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// The Team Id or name.  Ignored if TeamId is set.
	Team string `json:"team,omitempty"`

	// The Team Id
	// Format: uuid
	TeamID strfmt.UUID `json:"teamId,omitempty"`
}

// Validate validates this team context
func (m *TeamContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamContext) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TeamContext) validateTeamID(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamID) { // not required
		return nil
	}

	if err := validate.FormatOf("teamId", "body", "uuid", m.TeamID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamContext) UnmarshalBinary(b []byte) error {
	var res TeamContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
