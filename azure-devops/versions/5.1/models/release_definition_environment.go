// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDefinitionEnvironment release definition environment
// swagger:model ReleaseDefinitionEnvironment
type ReleaseDefinitionEnvironment struct {

	// Gets or sets the BadgeUrl. BadgeUrl will be used when Badge will be enabled in Release Definition Environment.
	BadgeURL string `json:"badgeUrl,omitempty"`

	// Gets or sets the environment conditions.
	Conditions []*Condition `json:"conditions"`

	// Gets or sets the current release reference.
	CurrentRelease *ReleaseShallowReference `json:"currentRelease,omitempty"`

	// Gets or sets the demands.
	Demands []*Demand `json:"demands"`

	// Gets or sets the deploy phases of environment.
	DeployPhases []*DeployPhase `json:"deployPhases"`

	// Gets or sets the deploystep.
	DeployStep *ReleaseDefinitionDeployStep `json:"deployStep,omitempty"`

	// Gets or sets the environment options.
	EnvironmentOptions *EnvironmentOptions `json:"environmentOptions,omitempty"`

	// Gets or sets the triggers on environment.
	EnvironmentTriggers []*EnvironmentTrigger `json:"environmentTriggers"`

	// Gets or sets the environment execution policy.
	ExecutionPolicy *EnvironmentExecutionPolicy `json:"executionPolicy,omitempty"`

	// Gets and sets the ID of the ReleaseDefinitionEnvironment.
	ID int32 `json:"id,omitempty"`

	// Gets and sets the name of the ReleaseDefinitionEnvironment.
	Name string `json:"name,omitempty"`

	// Gets and sets the Owner of the ReleaseDefinitionEnvironment.
	Owner *IdentityRef `json:"owner,omitempty"`

	// Gets or sets the post deployment approvals.
	PostDeployApprovals *ReleaseDefinitionApprovals `json:"postDeployApprovals,omitempty"`

	// Gets or sets the post deployment gates.
	PostDeploymentGates *ReleaseDefinitionGatesStep `json:"postDeploymentGates,omitempty"`

	// Gets or sets the pre deployment approvals.
	PreDeployApprovals *ReleaseDefinitionApprovals `json:"preDeployApprovals,omitempty"`

	// Gets or sets the pre deployment gates.
	PreDeploymentGates *ReleaseDefinitionGatesStep `json:"preDeploymentGates,omitempty"`

	// Gets or sets the environment process parameters.
	ProcessParameters *ProcessParameters `json:"processParameters,omitempty"`

	// Gets or sets the properties on environment.
	Properties *PropertiesCollection `json:"properties,omitempty"`

	// Gets or sets the queue ID.
	QueueID int32 `json:"queueId,omitempty"`

	// Gets and sets the rank of the ReleaseDefinitionEnvironment.
	Rank int32 `json:"rank,omitempty"`

	// Gets or sets the environment retention policy.
	RetentionPolicy *EnvironmentRetentionPolicy `json:"retentionPolicy,omitempty"`

	// Gets or sets the schedules
	Schedules []*ReleaseSchedule `json:"schedules"`

	// Gets or sets the variable groups.
	VariableGroups []int32 `json:"variableGroups"`

	// Gets and sets the variables.
	Variables map[string]ConfigurationVariableValue `json:"variables,omitempty"`
}

// Validate validates this release definition environment
func (m *ReleaseDefinitionEnvironment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployPhases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostDeployApprovals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostDeploymentGates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreDeployApprovals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreDeploymentGates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDefinitionEnvironment) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateCurrentRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentRelease) { // not required
		return nil
	}

	if m.CurrentRelease != nil {
		if err := m.CurrentRelease.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentRelease")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateDemands(formats strfmt.Registry) error {

	if swag.IsZero(m.Demands) { // not required
		return nil
	}

	for i := 0; i < len(m.Demands); i++ {
		if swag.IsZero(m.Demands[i]) { // not required
			continue
		}

		if m.Demands[i] != nil {
			if err := m.Demands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("demands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateDeployPhases(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployPhases) { // not required
		return nil
	}

	for i := 0; i < len(m.DeployPhases); i++ {
		if swag.IsZero(m.DeployPhases[i]) { // not required
			continue
		}

		if m.DeployPhases[i] != nil {
			if err := m.DeployPhases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployPhases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateDeployStep(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployStep) { // not required
		return nil
	}

	if m.DeployStep != nil {
		if err := m.DeployStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployStep")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateEnvironmentOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentOptions) { // not required
		return nil
	}

	if m.EnvironmentOptions != nil {
		if err := m.EnvironmentOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateEnvironmentTriggers(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentTriggers) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentTriggers); i++ {
		if swag.IsZero(m.EnvironmentTriggers[i]) { // not required
			continue
		}

		if m.EnvironmentTriggers[i] != nil {
			if err := m.EnvironmentTriggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environmentTriggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateExecutionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionPolicy) { // not required
		return nil
	}

	if m.ExecutionPolicy != nil {
		if err := m.ExecutionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validatePostDeployApprovals(formats strfmt.Registry) error {

	if swag.IsZero(m.PostDeployApprovals) { // not required
		return nil
	}

	if m.PostDeployApprovals != nil {
		if err := m.PostDeployApprovals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDeployApprovals")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validatePostDeploymentGates(formats strfmt.Registry) error {

	if swag.IsZero(m.PostDeploymentGates) { // not required
		return nil
	}

	if m.PostDeploymentGates != nil {
		if err := m.PostDeploymentGates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDeploymentGates")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validatePreDeployApprovals(formats strfmt.Registry) error {

	if swag.IsZero(m.PreDeployApprovals) { // not required
		return nil
	}

	if m.PreDeployApprovals != nil {
		if err := m.PreDeployApprovals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preDeployApprovals")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validatePreDeploymentGates(formats strfmt.Registry) error {

	if swag.IsZero(m.PreDeploymentGates) { // not required
		return nil
	}

	if m.PreDeploymentGates != nil {
		if err := m.PreDeploymentGates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preDeploymentGates")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateProcessParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessParameters) { // not required
		return nil
	}

	if m.ProcessParameters != nil {
		if err := m.ProcessParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RetentionPolicy) { // not required
		return nil
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateSchedules(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedules) { // not required
		return nil
	}

	for i := 0; i < len(m.Schedules); i++ {
		if swag.IsZero(m.Schedules[i]) { // not required
			continue
		}

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionEnvironment) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDefinitionEnvironment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDefinitionEnvironment) UnmarshalBinary(b []byte) error {
	var res ReleaseDefinitionEnvironment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
