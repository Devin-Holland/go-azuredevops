// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ResultUpdateRequestModel result update request model
// swagger:model ResultUpdateRequestModel
type ResultUpdateRequestModel struct {

	// action result deletes
	ActionResultDeletes []*TestActionResultModel `json:"actionResultDeletes"`

	// action results
	ActionResults []*TestActionResultModel `json:"actionResults"`

	// parameter deletes
	ParameterDeletes []*TestResultParameterModel `json:"parameterDeletes"`

	// parameters
	Parameters []*TestResultParameterModel `json:"parameters"`

	// test case result
	TestCaseResult *TestCaseResultUpdateModel `json:"testCaseResult,omitempty"`
}

// Validate validates this result update request model
func (m *ResultUpdateRequestModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionResultDeletes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterDeletes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestCaseResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultUpdateRequestModel) validateActionResultDeletes(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionResultDeletes) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionResultDeletes); i++ {
		if swag.IsZero(m.ActionResultDeletes[i]) { // not required
			continue
		}

		if m.ActionResultDeletes[i] != nil {
			if err := m.ActionResultDeletes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResultDeletes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultUpdateRequestModel) validateActionResults(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionResults); i++ {
		if swag.IsZero(m.ActionResults[i]) { // not required
			continue
		}

		if m.ActionResults[i] != nil {
			if err := m.ActionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultUpdateRequestModel) validateParameterDeletes(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterDeletes) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterDeletes); i++ {
		if swag.IsZero(m.ParameterDeletes[i]) { // not required
			continue
		}

		if m.ParameterDeletes[i] != nil {
			if err := m.ParameterDeletes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterDeletes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultUpdateRequestModel) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultUpdateRequestModel) validateTestCaseResult(formats strfmt.Registry) error {

	if swag.IsZero(m.TestCaseResult) { // not required
		return nil
	}

	if m.TestCaseResult != nil {
		if err := m.TestCaseResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testCaseResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultUpdateRequestModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultUpdateRequestModel) UnmarshalBinary(b []byte) error {
	var res ResultUpdateRequestModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
