// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureKeyVaultVariableValue azure key vault variable value
// swagger:model AzureKeyVaultVariableValue
type AzureKeyVaultVariableValue struct {
	VariableValue

	// Gets or sets the content type of key vault variable value.
	ContentType string `json:"contentType,omitempty"`

	// Indicates the vault variable value enabled or not.
	Enabled bool `json:"enabled,omitempty"`

	// Gets or sets the expire time of key vault variable value.
	// Format: date-time
	Expires strfmt.DateTime `json:"expires,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AzureKeyVaultVariableValue) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VariableValue
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VariableValue = aO0

	// now for regular properties
	var propsAzureKeyVaultVariableValue struct {
		ContentType string `json:"contentType,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Expires strfmt.DateTime `json:"expires,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsAzureKeyVaultVariableValue); err != nil {
		return err
	}
	m.ContentType = propsAzureKeyVaultVariableValue.ContentType

	m.Enabled = propsAzureKeyVaultVariableValue.Enabled

	m.Expires = propsAzureKeyVaultVariableValue.Expires

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AzureKeyVaultVariableValue) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.VariableValue)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAzureKeyVaultVariableValue struct {
		ContentType string `json:"contentType,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Expires strfmt.DateTime `json:"expires,omitempty"`
	}
	propsAzureKeyVaultVariableValue.ContentType = m.ContentType

	propsAzureKeyVaultVariableValue.Enabled = m.Enabled

	propsAzureKeyVaultVariableValue.Expires = m.Expires

	jsonDataPropsAzureKeyVaultVariableValue, errAzureKeyVaultVariableValue := swag.WriteJSON(propsAzureKeyVaultVariableValue)
	if errAzureKeyVaultVariableValue != nil {
		return nil, errAzureKeyVaultVariableValue
	}
	_parts = append(_parts, jsonDataPropsAzureKeyVaultVariableValue)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this azure key vault variable value
func (m *AzureKeyVaultVariableValue) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VariableValue
	if err := m.VariableValue.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultVariableValue) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(m.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultVariableValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultVariableValue) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultVariableValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
