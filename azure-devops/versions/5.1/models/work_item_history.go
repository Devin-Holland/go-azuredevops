// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemHistory work item history
// swagger:model WorkItemHistory
type WorkItemHistory struct {
	WorkItemTrackingResource

	// rev
	Rev int32 `json:"rev,omitempty"`

	// revised by
	RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

	// revised date
	// Format: date-time
	RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemHistory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemHistory struct {
		Rev int32 `json:"rev,omitempty"`

		RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

		RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

		Value string `json:"value,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemHistory); err != nil {
		return err
	}
	m.Rev = propsWorkItemHistory.Rev

	m.RevisedBy = propsWorkItemHistory.RevisedBy

	m.RevisedDate = propsWorkItemHistory.RevisedDate

	m.Value = propsWorkItemHistory.Value

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemHistory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemHistory struct {
		Rev int32 `json:"rev,omitempty"`

		RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

		RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

		Value string `json:"value,omitempty"`
	}
	propsWorkItemHistory.Rev = m.Rev

	propsWorkItemHistory.RevisedBy = m.RevisedBy

	propsWorkItemHistory.RevisedDate = m.RevisedDate

	propsWorkItemHistory.Value = m.Value

	jsonDataPropsWorkItemHistory, errWorkItemHistory := swag.WriteJSON(propsWorkItemHistory)
	if errWorkItemHistory != nil {
		return nil, errWorkItemHistory
	}
	_parts = append(_parts, jsonDataPropsWorkItemHistory)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item history
func (m *WorkItemHistory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemHistory) validateRevisedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RevisedBy) { // not required
		return nil
	}

	if m.RevisedBy != nil {
		if err := m.RevisedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revisedBy")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemHistory) validateRevisedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RevisedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("revisedDate", "body", "date-time", m.RevisedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemHistory) UnmarshalBinary(b []byte) error {
	var res WorkItemHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
