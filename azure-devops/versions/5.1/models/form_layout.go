// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FormLayout Describes the layout of a work item type
// swagger:model FormLayout
type FormLayout struct {

	// Gets and sets extensions list.
	Extensions []*Extension `json:"extensions"`

	// Top level tabs of the layout.
	Pages []*Page `json:"pages"`

	// Headers controls of the layout.
	SystemControls []*Control `json:"systemControls"`
}

// Validate validates this form layout
func (m *FormLayout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemControls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormLayout) validateExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Extensions); i++ {
		if swag.IsZero(m.Extensions[i]) { // not required
			continue
		}

		if m.Extensions[i] != nil {
			if err := m.Extensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FormLayout) validatePages(formats strfmt.Registry) error {

	if swag.IsZero(m.Pages) { // not required
		return nil
	}

	for i := 0; i < len(m.Pages); i++ {
		if swag.IsZero(m.Pages[i]) { // not required
			continue
		}

		if m.Pages[i] != nil {
			if err := m.Pages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FormLayout) validateSystemControls(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemControls) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemControls); i++ {
		if swag.IsZero(m.SystemControls[i]) { // not required
			continue
		}

		if m.SystemControls[i] != nil {
			if err := m.SystemControls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemControls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormLayout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormLayout) UnmarshalBinary(b []byte) error {
	var res FormLayout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
