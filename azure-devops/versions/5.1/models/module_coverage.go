// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModuleCoverage module coverage
// swagger:model ModuleCoverage
type ModuleCoverage struct {

	// block count
	BlockCount int32 `json:"blockCount,omitempty"`

	// block data
	BlockData []strfmt.Base64 `json:"blockData"`

	// Code Coverage File Url
	FileURL string `json:"fileUrl,omitempty"`

	// functions
	Functions []*FunctionCoverage `json:"functions"`

	// name
	Name string `json:"name,omitempty"`

	// signature
	// Format: uuid
	Signature strfmt.UUID `json:"signature,omitempty"`

	// signature age
	SignatureAge int32 `json:"signatureAge,omitempty"`

	// statistics
	Statistics *CoverageStatistics `json:"statistics,omitempty"`
}

// Validate validates this module coverage
func (m *ModuleCoverage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleCoverage) validateBlockData(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockData) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockData); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *ModuleCoverage) validateFunctions(formats strfmt.Registry) error {

	if swag.IsZero(m.Functions) { // not required
		return nil
	}

	for i := 0; i < len(m.Functions); i++ {
		if swag.IsZero(m.Functions[i]) { // not required
			continue
		}

		if m.Functions[i] != nil {
			if err := m.Functions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModuleCoverage) validateSignature(formats strfmt.Registry) error {

	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if err := validate.FormatOf("signature", "body", "uuid", m.Signature.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModuleCoverage) validateStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleCoverage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleCoverage) UnmarshalBinary(b []byte) error {
	var res ModuleCoverage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
