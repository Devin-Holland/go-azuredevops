// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestSessionExploredWorkItemReference test session explored work item reference
// swagger:model TestSessionExploredWorkItemReference
type TestSessionExploredWorkItemReference struct {
	TestSessionWorkItemReference

	// Workitem references of workitems filed as a part of the current workitem exploration.
	AssociatedWorkItems []*TestSessionWorkItemReference `json:"associatedWorkItems"`

	// Time when exploration of workitem ended.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// Time when explore of workitem was started.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestSessionExploredWorkItemReference) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestSessionWorkItemReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestSessionWorkItemReference = aO0

	// now for regular properties
	var propsTestSessionExploredWorkItemReference struct {
		AssociatedWorkItems []*TestSessionWorkItemReference `json:"associatedWorkItems"`

		EndTime strfmt.DateTime `json:"endTime,omitempty"`

		StartTime strfmt.DateTime `json:"startTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestSessionExploredWorkItemReference); err != nil {
		return err
	}
	m.AssociatedWorkItems = propsTestSessionExploredWorkItemReference.AssociatedWorkItems

	m.EndTime = propsTestSessionExploredWorkItemReference.EndTime

	m.StartTime = propsTestSessionExploredWorkItemReference.StartTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestSessionExploredWorkItemReference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestSessionWorkItemReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestSessionExploredWorkItemReference struct {
		AssociatedWorkItems []*TestSessionWorkItemReference `json:"associatedWorkItems"`

		EndTime strfmt.DateTime `json:"endTime,omitempty"`

		StartTime strfmt.DateTime `json:"startTime,omitempty"`
	}
	propsTestSessionExploredWorkItemReference.AssociatedWorkItems = m.AssociatedWorkItems

	propsTestSessionExploredWorkItemReference.EndTime = m.EndTime

	propsTestSessionExploredWorkItemReference.StartTime = m.StartTime

	jsonDataPropsTestSessionExploredWorkItemReference, errTestSessionExploredWorkItemReference := swag.WriteJSON(propsTestSessionExploredWorkItemReference)
	if errTestSessionExploredWorkItemReference != nil {
		return nil, errTestSessionExploredWorkItemReference
	}
	_parts = append(_parts, jsonDataPropsTestSessionExploredWorkItemReference)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test session explored work item reference
func (m *TestSessionExploredWorkItemReference) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestSessionWorkItemReference
	if err := m.TestSessionWorkItemReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedWorkItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSessionExploredWorkItemReference) validateAssociatedWorkItems(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociatedWorkItems) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedWorkItems); i++ {
		if swag.IsZero(m.AssociatedWorkItems[i]) { // not required
			continue
		}

		if m.AssociatedWorkItems[i] != nil {
			if err := m.AssociatedWorkItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedWorkItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSessionExploredWorkItemReference) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSessionExploredWorkItemReference) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSessionExploredWorkItemReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSessionExploredWorkItemReference) UnmarshalBinary(b []byte) error {
	var res TestSessionExploredWorkItemReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
