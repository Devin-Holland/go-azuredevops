// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContributionConstraint Specifies a constraint that can be used to dynamically include/exclude a given contribution
// swagger:model ContributionConstraint
type ContributionConstraint struct {

	// An optional property that can be specified to group constraints together. All constraints within a group are AND'd together (all must be evaluate to True in order for the contribution to be included). Different groups of constraints are OR'd (only one group needs to evaluate to True for the contribution to be included).
	Group int32 `json:"group,omitempty"`

	// Fully qualified identifier of a shared constraint
	ID string `json:"id,omitempty"`

	// If true, negate the result of the filter (include the contribution if the applied filter returns false instead of true)
	Inverse bool `json:"inverse,omitempty"`

	// Name of the IContributionFilter plugin
	Name string `json:"name,omitempty"`

	// Properties that are fed to the contribution filter class
	Properties *JObject `json:"properties,omitempty"`

	// Constraints can be optionally be applied to one or more of the relationships defined in the contribution. If no relationships are defined then all relationships are associated with the constraint. This means the default behaviour will elimiate the contribution from the tree completely if the constraint is applied.
	Relationships []string `json:"relationships"`
}

// Validate validates this contribution constraint
func (m *ContributionConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContributionConstraint) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContributionConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContributionConstraint) UnmarshalBinary(b []byte) error {
	var res ContributionConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
