// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DashboardGroup Describes a list of dashboards associated to an owner. Currently, teams own dashboard groups.
// swagger:model DashboardGroup
type DashboardGroup struct {

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// A list of Dashboards held by the Dashboard Group
	DashboardEntries []*DashboardGroupEntry `json:"dashboardEntries"`

	// Deprecated: The old permission model describing the level of permissions for the current team. Pre-M125.
	// Enum: [none edit manage managePermissions]
	Permission interface{} `json:"permission,omitempty"`

	// A permissions bit mask describing the security permissions of the current team for dashboards. When this permission is the value None, use GroupMemberPermission. Permissions are evaluated based on the presence of a value other than None, else the GroupMemberPermission will be saved.
	// Enum: [none read create edit delete managePermissions]
	TeamDashboardPermission interface{} `json:"teamDashboardPermission,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this dashboard group
func (m *DashboardGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardEntries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardGroup) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardGroup) validateDashboardEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.DashboardEntries); i++ {
		if swag.IsZero(m.DashboardEntries[i]) { // not required
			continue
		}

		if m.DashboardEntries[i] != nil {
			if err := m.DashboardEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboardEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardGroup) UnmarshalBinary(b []byte) error {
	var res DashboardGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
