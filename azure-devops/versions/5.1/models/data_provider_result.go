// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataProviderResult Result structure from calls to GetDataProviderData
// swagger:model DataProviderResult
type DataProviderResult struct {

	// This is the set of data providers that were requested, but either they were defined as client providers, or as remote providers that failed and may be retried by the client.
	ClientProviders map[string]ClientDataProviderQuery `json:"clientProviders,omitempty"`

	// Property bag of data keyed off of the data provider contribution id
	Data map[string]interface{} `json:"data,omitempty"`

	// Set of exceptions that occurred resolving the data providers.
	Exceptions map[string]DataProviderExceptionDetails `json:"exceptions,omitempty"`

	// List of data providers resolved in the data-provider query
	ResolvedProviders []*ResolvedDataProvider `json:"resolvedProviders"`

	// Scope name applied to this data provider result.
	ScopeName string `json:"scopeName,omitempty"`

	// Scope value applied to this data provider result.
	ScopeValue string `json:"scopeValue,omitempty"`

	// Property bag of shared data that was contributed to by any of the individual data providers
	SharedData map[string]interface{} `json:"sharedData,omitempty"`
}

// Validate validates this data provider result
func (m *DataProviderResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvedProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataProviderResult) validateClientProviders(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientProviders) { // not required
		return nil
	}

	for k := range m.ClientProviders {

		if err := validate.Required("clientProviders"+"."+k, "body", m.ClientProviders[k]); err != nil {
			return err
		}
		if val, ok := m.ClientProviders[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DataProviderResult) validateExceptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Exceptions) { // not required
		return nil
	}

	for k := range m.Exceptions {

		if err := validate.Required("exceptions"+"."+k, "body", m.Exceptions[k]); err != nil {
			return err
		}
		if val, ok := m.Exceptions[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DataProviderResult) validateResolvedProviders(formats strfmt.Registry) error {

	if swag.IsZero(m.ResolvedProviders) { // not required
		return nil
	}

	for i := 0; i < len(m.ResolvedProviders); i++ {
		if swag.IsZero(m.ResolvedProviders[i]) { // not required
			continue
		}

		if m.ResolvedProviders[i] != nil {
			if err := m.ResolvedProviders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resolvedProviders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataProviderResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataProviderResult) UnmarshalBinary(b []byte) error {
	var res DataProviderResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
