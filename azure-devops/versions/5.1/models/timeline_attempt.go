// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimelineAttempt timeline attempt
// swagger:model TimelineAttempt
type TimelineAttempt struct {

	// Gets or sets the attempt of the record.
	Attempt int32 `json:"attempt,omitempty"`

	// Gets or sets the unique identifier for the record.
	Identifier string `json:"identifier,omitempty"`

	// Gets or sets the record identifier located within the specified timeline.
	// Format: uuid
	RecordID strfmt.UUID `json:"recordId,omitempty"`

	// Gets or sets the timeline identifier which owns the record representing this attempt.
	// Format: uuid
	TimelineID strfmt.UUID `json:"timelineId,omitempty"`
}

// Validate validates this timeline attempt
func (m *TimelineAttempt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecordID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineAttempt) validateRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("recordId", "body", "uuid", m.RecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineAttempt) validateTimelineID(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineID) { // not required
		return nil
	}

	if err := validate.FormatOf("timelineId", "body", "uuid", m.TimelineID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineAttempt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineAttempt) UnmarshalBinary(b []byte) error {
	var res TimelineAttempt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
