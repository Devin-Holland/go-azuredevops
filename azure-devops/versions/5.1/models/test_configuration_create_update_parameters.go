// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestConfigurationCreateUpdateParameters Test Configuration Create or Update Parameters
// swagger:model TestConfigurationCreateUpdateParameters
type TestConfigurationCreateUpdateParameters struct {

	// Description of the configuration
	Description string `json:"description,omitempty"`

	// Is the configuration a default for the test plans
	IsDefault bool `json:"isDefault,omitempty"`

	// Name of the configuration
	Name string `json:"name,omitempty"`

	// State of the configuration
	// Enum: [active inactive]
	State interface{} `json:"state,omitempty"`

	// Dictionary of Test Variable, Selected Value
	Values []*NameValuePair `json:"values"`
}

// Validate validates this test configuration create update parameters
func (m *TestConfigurationCreateUpdateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestConfigurationCreateUpdateParameters) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestConfigurationCreateUpdateParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestConfigurationCreateUpdateParameters) UnmarshalBinary(b []byte) error {
	var res TestConfigurationCreateUpdateParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
