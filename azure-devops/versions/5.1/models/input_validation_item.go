// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InputValidationItem input validation item
// swagger:model InputValidationItem
type InputValidationItem struct {
	ValidationItem

	// Provides binding context for the expression to evaluate
	Context *InputBindingContext `json:"context,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InputValidationItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ValidationItem
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ValidationItem = aO0

	// now for regular properties
	var propsInputValidationItem struct {
		Context *InputBindingContext `json:"context,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsInputValidationItem); err != nil {
		return err
	}
	m.Context = propsInputValidationItem.Context

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InputValidationItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ValidationItem)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsInputValidationItem struct {
		Context *InputBindingContext `json:"context,omitempty"`
	}
	propsInputValidationItem.Context = m.Context

	jsonDataPropsInputValidationItem, errInputValidationItem := swag.WriteJSON(propsInputValidationItem)
	if errInputValidationItem != nil {
		return nil, errInputValidationItem
	}
	_parts = append(_parts, jsonDataPropsInputValidationItem)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this input validation item
func (m *InputValidationItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ValidationItem
	if err := m.ValidationItem.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputValidationItem) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputValidationItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputValidationItem) UnmarshalBinary(b []byte) error {
	var res InputValidationItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
