// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemBatchGetRequest Describes a request to get a set of work items
// swagger:model WorkItemBatchGetRequest
type WorkItemBatchGetRequest struct {

	// The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }
	// Enum: [none relations fields links all]
	NrDollarExpand interface{} `json:"$expand,omitempty"`

	// AsOf UTC date time string
	// Format: date-time
	AsOf strfmt.DateTime `json:"asOf,omitempty"`

	// The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}.
	// Enum: [fail omit]
	ErrorPolicy interface{} `json:"errorPolicy,omitempty"`

	// The requested fields
	Fields []string `json:"fields"`

	// The requested work item ids
	Ids []int32 `json:"ids"`
}

// Validate validates this work item batch get request
func (m *WorkItemBatchGetRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsOf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemBatchGetRequest) validateAsOf(formats strfmt.Registry) error {

	if swag.IsZero(m.AsOf) { // not required
		return nil
	}

	if err := validate.FormatOf("asOf", "body", "date-time", m.AsOf.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemBatchGetRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemBatchGetRequest) UnmarshalBinary(b []byte) error {
	var res WorkItemBatchGetRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
