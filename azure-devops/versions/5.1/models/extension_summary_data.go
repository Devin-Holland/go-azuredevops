// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionSummaryData Summary of Extensions in the organization.
// swagger:model ExtensionSummaryData
type ExtensionSummaryData struct {
	SummaryData

	// Count of Extension Licenses assigned to users through msdn.
	AssignedThroughSubscription int32 `json:"assignedThroughSubscription,omitempty"`

	// Gallery Id of the Extension
	ExtensionID string `json:"extensionId,omitempty"`

	// Friendly name of this extension
	ExtensionName string `json:"extensionName,omitempty"`

	// Whether its a Trial Version.
	IsTrialVersion bool `json:"isTrialVersion,omitempty"`

	// Minimum License Required for the Extension.
	// Enum: [none express advanced advancedPlus stakeholder]
	MinimumLicenseRequired interface{} `json:"minimumLicenseRequired,omitempty"`

	// Days remaining for the Trial to expire.
	RemainingTrialDays int32 `json:"remainingTrialDays,omitempty"`

	// Date on which the Trial expires.
	// Format: date-time
	TrialExpiryDate strfmt.DateTime `json:"trialExpiryDate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExtensionSummaryData) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SummaryData
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SummaryData = aO0

	// now for regular properties
	var propsExtensionSummaryData struct {
		AssignedThroughSubscription int32 `json:"assignedThroughSubscription,omitempty"`

		ExtensionID string `json:"extensionId,omitempty"`

		ExtensionName string `json:"extensionName,omitempty"`

		IsTrialVersion bool `json:"isTrialVersion,omitempty"`

		MinimumLicenseRequired interface{} `json:"minimumLicenseRequired,omitempty"`

		RemainingTrialDays int32 `json:"remainingTrialDays,omitempty"`

		TrialExpiryDate strfmt.DateTime `json:"trialExpiryDate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsExtensionSummaryData); err != nil {
		return err
	}
	m.AssignedThroughSubscription = propsExtensionSummaryData.AssignedThroughSubscription

	m.ExtensionID = propsExtensionSummaryData.ExtensionID

	m.ExtensionName = propsExtensionSummaryData.ExtensionName

	m.IsTrialVersion = propsExtensionSummaryData.IsTrialVersion

	m.MinimumLicenseRequired = propsExtensionSummaryData.MinimumLicenseRequired

	m.RemainingTrialDays = propsExtensionSummaryData.RemainingTrialDays

	m.TrialExpiryDate = propsExtensionSummaryData.TrialExpiryDate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExtensionSummaryData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.SummaryData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsExtensionSummaryData struct {
		AssignedThroughSubscription int32 `json:"assignedThroughSubscription,omitempty"`

		ExtensionID string `json:"extensionId,omitempty"`

		ExtensionName string `json:"extensionName,omitempty"`

		IsTrialVersion bool `json:"isTrialVersion,omitempty"`

		MinimumLicenseRequired interface{} `json:"minimumLicenseRequired,omitempty"`

		RemainingTrialDays int32 `json:"remainingTrialDays,omitempty"`

		TrialExpiryDate strfmt.DateTime `json:"trialExpiryDate,omitempty"`
	}
	propsExtensionSummaryData.AssignedThroughSubscription = m.AssignedThroughSubscription

	propsExtensionSummaryData.ExtensionID = m.ExtensionID

	propsExtensionSummaryData.ExtensionName = m.ExtensionName

	propsExtensionSummaryData.IsTrialVersion = m.IsTrialVersion

	propsExtensionSummaryData.MinimumLicenseRequired = m.MinimumLicenseRequired

	propsExtensionSummaryData.RemainingTrialDays = m.RemainingTrialDays

	propsExtensionSummaryData.TrialExpiryDate = m.TrialExpiryDate

	jsonDataPropsExtensionSummaryData, errExtensionSummaryData := swag.WriteJSON(propsExtensionSummaryData)
	if errExtensionSummaryData != nil {
		return nil, errExtensionSummaryData
	}
	_parts = append(_parts, jsonDataPropsExtensionSummaryData)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this extension summary data
func (m *ExtensionSummaryData) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummaryData
	if err := m.SummaryData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionSummaryData) validateTrialExpiryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TrialExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("trialExpiryDate", "body", "date-time", m.TrialExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionSummaryData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionSummaryData) UnmarshalBinary(b []byte) error {
	var res ExtensionSummaryData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
