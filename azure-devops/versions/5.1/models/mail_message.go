// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MailMessage mail message
// swagger:model MailMessage
type MailMessage struct {

	// Body of mail.
	Body string `json:"body,omitempty"`

	// Mail CC recipients.
	Cc *EmailRecipients `json:"cc,omitempty"`

	// Reply to.
	InReplyTo string `json:"inReplyTo,omitempty"`

	// Message ID of the mail.
	MessageID string `json:"messageId,omitempty"`

	// Data when should be replied to mail.
	// Format: date-time
	ReplyBy strfmt.DateTime `json:"replyBy,omitempty"`

	// Reply to Email recipients.
	ReplyTo *EmailRecipients `json:"replyTo,omitempty"`

	// List of mail section types.
	Sections []interface{} `json:"sections"`

	// Mail sender type.
	// Enum: [serviceAccount requestingUser]
	SenderType interface{} `json:"senderType,omitempty"`

	// Subject of the mail.
	Subject string `json:"subject,omitempty"`

	// Mail To recipients.
	To *EmailRecipients `json:"to,omitempty"`
}

// Validate validates this mail message
func (m *MailMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailMessage) validateCc(formats strfmt.Registry) error {

	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	if m.Cc != nil {
		if err := m.Cc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cc")
			}
			return err
		}
	}

	return nil
}

func (m *MailMessage) validateReplyBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyBy) { // not required
		return nil
	}

	if err := validate.FormatOf("replyBy", "body", "date-time", m.ReplyBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MailMessage) validateReplyTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyTo) { // not required
		return nil
	}

	if m.ReplyTo != nil {
		if err := m.ReplyTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyTo")
			}
			return err
		}
	}

	return nil
}

var mailMessageSectionsItemsEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["details","environments","issues","testResults","workItems","releaseInfo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mailMessageSectionsItemsEnum = append(mailMessageSectionsItemsEnum, v)
	}
}

func (m *MailMessage) validateSectionsItemsEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, mailMessageSectionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *MailMessage) validateSections(formats strfmt.Registry) error {

	if swag.IsZero(m.Sections) { // not required
		return nil
	}

	return nil
}

func (m *MailMessage) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	if m.To != nil {
		if err := m.To.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MailMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailMessage) UnmarshalBinary(b []byte) error {
	var res MailMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
