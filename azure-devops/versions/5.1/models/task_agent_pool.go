// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentPool An organization-level grouping of agents.
// swagger:model TaskAgentPool
type TaskAgentPool struct {
	TaskAgentPoolReference

	// The ID of the associated agent cloud.
	AgentCloudID int32 `json:"agentCloudId,omitempty"`

	// Whether or not a queue should be automatically provisioned for each project collection.
	AutoProvision bool `json:"autoProvision,omitempty"`

	// Whether or not the pool should autosize itself based on the Agent Cloud Provider settings.
	AutoSize bool `json:"autoSize,omitempty"`

	// Creator of the pool. The creator of the pool is automatically added into the administrators group for the pool on creation.
	CreatedBy *IdentityRef `json:"createdBy,omitempty"`

	// The date/time of the pool creation.
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// Owner or administrator of the pool.
	Owner *IdentityRef `json:"owner,omitempty"`

	// properties
	Properties *PropertiesCollection `json:"properties,omitempty"`

	// Target parallelism.
	TargetSize int32 `json:"targetSize,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskAgentPool) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskAgentPoolReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskAgentPoolReference = aO0

	// now for regular properties
	var propsTaskAgentPool struct {
		AgentCloudID int32 `json:"agentCloudId,omitempty"`

		AutoProvision bool `json:"autoProvision,omitempty"`

		AutoSize bool `json:"autoSize,omitempty"`

		CreatedBy *IdentityRef `json:"createdBy,omitempty"`

		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		Owner *IdentityRef `json:"owner,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		TargetSize int32 `json:"targetSize,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskAgentPool); err != nil {
		return err
	}
	m.AgentCloudID = propsTaskAgentPool.AgentCloudID

	m.AutoProvision = propsTaskAgentPool.AutoProvision

	m.AutoSize = propsTaskAgentPool.AutoSize

	m.CreatedBy = propsTaskAgentPool.CreatedBy

	m.CreatedOn = propsTaskAgentPool.CreatedOn

	m.Owner = propsTaskAgentPool.Owner

	m.Properties = propsTaskAgentPool.Properties

	m.TargetSize = propsTaskAgentPool.TargetSize

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskAgentPool) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskAgentPoolReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskAgentPool struct {
		AgentCloudID int32 `json:"agentCloudId,omitempty"`

		AutoProvision bool `json:"autoProvision,omitempty"`

		AutoSize bool `json:"autoSize,omitempty"`

		CreatedBy *IdentityRef `json:"createdBy,omitempty"`

		CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

		Owner *IdentityRef `json:"owner,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		TargetSize int32 `json:"targetSize,omitempty"`
	}
	propsTaskAgentPool.AgentCloudID = m.AgentCloudID

	propsTaskAgentPool.AutoProvision = m.AutoProvision

	propsTaskAgentPool.AutoSize = m.AutoSize

	propsTaskAgentPool.CreatedBy = m.CreatedBy

	propsTaskAgentPool.CreatedOn = m.CreatedOn

	propsTaskAgentPool.Owner = m.Owner

	propsTaskAgentPool.Properties = m.Properties

	propsTaskAgentPool.TargetSize = m.TargetSize

	jsonDataPropsTaskAgentPool, errTaskAgentPool := swag.WriteJSON(propsTaskAgentPool)
	if errTaskAgentPool != nil {
		return nil, errTaskAgentPool
	}
	_parts = append(_parts, jsonDataPropsTaskAgentPool)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task agent pool
func (m *TaskAgentPool) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskAgentPoolReference
	if err := m.TaskAgentPoolReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentPool) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPool) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentPool) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPool) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentPool) UnmarshalBinary(b []byte) error {
	var res TaskAgentPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
