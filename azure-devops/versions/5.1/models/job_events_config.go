// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// JobEventsConfig job events config
// swagger:model JobEventsConfig
type JobEventsConfig struct {
	EventsConfig

	// job assigned
	JobAssigned *JobEventConfig `json:"jobAssigned,omitempty"`

	// job completed
	JobCompleted *JobEventConfig `json:"jobCompleted,omitempty"`

	// job started
	JobStarted *JobEventConfig `json:"jobStarted,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *JobEventsConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventsConfig
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventsConfig = aO0

	// now for regular properties
	var propsJobEventsConfig struct {
		JobAssigned *JobEventConfig `json:"jobAssigned,omitempty"`

		JobCompleted *JobEventConfig `json:"jobCompleted,omitempty"`

		JobStarted *JobEventConfig `json:"jobStarted,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsJobEventsConfig); err != nil {
		return err
	}
	m.JobAssigned = propsJobEventsConfig.JobAssigned

	m.JobCompleted = propsJobEventsConfig.JobCompleted

	m.JobStarted = propsJobEventsConfig.JobStarted

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m JobEventsConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.EventsConfig)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsJobEventsConfig struct {
		JobAssigned *JobEventConfig `json:"jobAssigned,omitempty"`

		JobCompleted *JobEventConfig `json:"jobCompleted,omitempty"`

		JobStarted *JobEventConfig `json:"jobStarted,omitempty"`
	}
	propsJobEventsConfig.JobAssigned = m.JobAssigned

	propsJobEventsConfig.JobCompleted = m.JobCompleted

	propsJobEventsConfig.JobStarted = m.JobStarted

	jsonDataPropsJobEventsConfig, errJobEventsConfig := swag.WriteJSON(propsJobEventsConfig)
	if errJobEventsConfig != nil {
		return nil, errJobEventsConfig
	}
	_parts = append(_parts, jsonDataPropsJobEventsConfig)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this job events config
func (m *JobEventsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventsConfig

	if err := m.validateJobAssigned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobStarted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobEventsConfig) validateJobAssigned(formats strfmt.Registry) error {

	if swag.IsZero(m.JobAssigned) { // not required
		return nil
	}

	if m.JobAssigned != nil {
		if err := m.JobAssigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobAssigned")
			}
			return err
		}
	}

	return nil
}

func (m *JobEventsConfig) validateJobCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.JobCompleted) { // not required
		return nil
	}

	if m.JobCompleted != nil {
		if err := m.JobCompleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobCompleted")
			}
			return err
		}
	}

	return nil
}

func (m *JobEventsConfig) validateJobStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.JobStarted) { // not required
		return nil
	}

	if m.JobStarted != nil {
		if err := m.JobStarted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobStarted")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobEventsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobEventsConfig) UnmarshalBinary(b []byte) error {
	var res JobEventsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
