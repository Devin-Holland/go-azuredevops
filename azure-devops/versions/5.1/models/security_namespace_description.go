// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityNamespaceDescription Class for describing the details of a TeamFoundationSecurityNamespace.
// swagger:model SecurityNamespaceDescription
type SecurityNamespaceDescription struct {

	// The list of actions that this Security Namespace is responsible for securing.
	Actions []*ActionDefinition `json:"actions"`

	// This is the dataspace category that describes where the security information for this SecurityNamespace should be stored.
	DataspaceCategory string `json:"dataspaceCategory,omitempty"`

	// This localized name for this namespace.
	DisplayName string `json:"displayName,omitempty"`

	// If the security tokens this namespace will be operating on need to be split on certain character lengths to determine its elements, that length should be specified here. If not, this value will be -1.
	ElementLength int32 `json:"elementLength,omitempty"`

	// This is the type of the extension that should be loaded from the plugins directory for extending this security namespace.
	ExtensionType string `json:"extensionType,omitempty"`

	// If true, the security namespace is remotable, allowing another service to proxy the namespace.
	IsRemotable bool `json:"isRemotable,omitempty"`

	// This non-localized for this namespace.
	Name string `json:"name,omitempty"`

	// The unique identifier for this namespace.
	// Format: uuid
	NamespaceID strfmt.UUID `json:"namespaceId,omitempty"`

	// The permission bits needed by a user in order to read security data on the Security Namespace.
	ReadPermission int32 `json:"readPermission,omitempty"`

	// If the security tokens this namespace will be operating on need to be split on certain characters to determine its elements that character should be specified here. If not, this value will be the null character.
	SeparatorValue string `json:"separatorValue,omitempty"`

	// Used to send information about the structure of the security namespace over the web service.
	StructureValue int32 `json:"structureValue,omitempty"`

	// The bits reserved by system store
	SystemBitMask int32 `json:"systemBitMask,omitempty"`

	// If true, the security service will expect an ISecurityDataspaceTokenTranslator plugin to exist for this namespace
	UseTokenTranslator bool `json:"useTokenTranslator,omitempty"`

	// The permission bits needed by a user in order to modify security data on the Security Namespace.
	WritePermission int32 `json:"writePermission,omitempty"`
}

// Validate validates this security namespace description
func (m *SecurityNamespaceDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityNamespaceDescription) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityNamespaceDescription) validateNamespaceID(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceID) { // not required
		return nil
	}

	if err := validate.FormatOf("namespaceId", "body", "uuid", m.NamespaceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityNamespaceDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityNamespaceDescription) UnmarshalBinary(b []byte) error {
	var res SecurityNamespaceDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
