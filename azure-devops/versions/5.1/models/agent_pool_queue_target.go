// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AgentPoolQueueTarget Describes how a phase should run against an agent queue.
// swagger:model AgentPoolQueueTarget
type AgentPoolQueueTarget struct {
	PhaseTarget

	// Agent specification of the target.
	AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

	// Enables scripts and other processes launched while executing phase to access the OAuth token
	AllowScriptsAuthAccessOption bool `json:"allowScriptsAuthAccessOption,omitempty"`

	// demands
	Demands []*Demand `json:"demands"`

	// The execution options.
	ExecutionOptions *AgentTargetExecutionOptions `json:"executionOptions,omitempty"`

	// The queue.
	Queue *AgentPoolQueue `json:"queue,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AgentPoolQueueTarget) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PhaseTarget
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PhaseTarget = aO0

	// now for regular properties
	var propsAgentPoolQueueTarget struct {
		AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

		AllowScriptsAuthAccessOption bool `json:"allowScriptsAuthAccessOption,omitempty"`

		Demands []*Demand `json:"demands"`

		ExecutionOptions *AgentTargetExecutionOptions `json:"executionOptions,omitempty"`

		Queue *AgentPoolQueue `json:"queue,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsAgentPoolQueueTarget); err != nil {
		return err
	}
	m.AgentSpecification = propsAgentPoolQueueTarget.AgentSpecification

	m.AllowScriptsAuthAccessOption = propsAgentPoolQueueTarget.AllowScriptsAuthAccessOption

	m.Demands = propsAgentPoolQueueTarget.Demands

	m.ExecutionOptions = propsAgentPoolQueueTarget.ExecutionOptions

	m.Queue = propsAgentPoolQueueTarget.Queue

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AgentPoolQueueTarget) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PhaseTarget)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAgentPoolQueueTarget struct {
		AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

		AllowScriptsAuthAccessOption bool `json:"allowScriptsAuthAccessOption,omitempty"`

		Demands []*Demand `json:"demands"`

		ExecutionOptions *AgentTargetExecutionOptions `json:"executionOptions,omitempty"`

		Queue *AgentPoolQueue `json:"queue,omitempty"`
	}
	propsAgentPoolQueueTarget.AgentSpecification = m.AgentSpecification

	propsAgentPoolQueueTarget.AllowScriptsAuthAccessOption = m.AllowScriptsAuthAccessOption

	propsAgentPoolQueueTarget.Demands = m.Demands

	propsAgentPoolQueueTarget.ExecutionOptions = m.ExecutionOptions

	propsAgentPoolQueueTarget.Queue = m.Queue

	jsonDataPropsAgentPoolQueueTarget, errAgentPoolQueueTarget := swag.WriteJSON(propsAgentPoolQueueTarget)
	if errAgentPoolQueueTarget != nil {
		return nil, errAgentPoolQueueTarget
	}
	_parts = append(_parts, jsonDataPropsAgentPoolQueueTarget)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this agent pool queue target
func (m *AgentPoolQueueTarget) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PhaseTarget
	if err := m.PhaseTarget.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPoolQueueTarget) validateAgentSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentSpecification) { // not required
		return nil
	}

	if m.AgentSpecification != nil {
		if err := m.AgentSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPoolQueueTarget) validateDemands(formats strfmt.Registry) error {

	if swag.IsZero(m.Demands) { // not required
		return nil
	}

	for i := 0; i < len(m.Demands); i++ {
		if swag.IsZero(m.Demands[i]) { // not required
			continue
		}

		if m.Demands[i] != nil {
			if err := m.Demands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("demands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentPoolQueueTarget) validateExecutionOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionOptions) { // not required
		return nil
	}

	if m.ExecutionOptions != nil {
		if err := m.ExecutionOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executionOptions")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPoolQueueTarget) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {
		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentPoolQueueTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentPoolQueueTarget) UnmarshalBinary(b []byte) error {
	var res AgentPoolQueueTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
