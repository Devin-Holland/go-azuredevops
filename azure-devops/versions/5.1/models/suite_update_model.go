// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SuiteUpdateModel Test suite update model.
// swagger:model SuiteUpdateModel
type SuiteUpdateModel struct {

	// Shallow reference of default configurations for the suite.
	DefaultConfigurations []*ShallowReference `json:"defaultConfigurations"`

	// Shallow reference of test suite.
	DefaultTesters []*ShallowReference `json:"defaultTesters"`

	// Specifies if the default configurations have to be inherited from the parent test suite in which the test suite is created.
	InheritDefaultConfigurations bool `json:"inheritDefaultConfigurations,omitempty"`

	// Test suite name
	Name string `json:"name,omitempty"`

	// Shallow reference of the parent.
	Parent *ShallowReference `json:"parent,omitempty"`

	// For query based suites, the new query string.
	QueryString string `json:"queryString,omitempty"`
}

// Validate validates this suite update model
func (m *SuiteUpdateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTesters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuiteUpdateModel) validateDefaultConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.DefaultConfigurations); i++ {
		if swag.IsZero(m.DefaultConfigurations[i]) { // not required
			continue
		}

		if m.DefaultConfigurations[i] != nil {
			if err := m.DefaultConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaultConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SuiteUpdateModel) validateDefaultTesters(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultTesters) { // not required
		return nil
	}

	for i := 0; i < len(m.DefaultTesters); i++ {
		if swag.IsZero(m.DefaultTesters[i]) { // not required
			continue
		}

		if m.DefaultTesters[i] != nil {
			if err := m.DefaultTesters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaultTesters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SuiteUpdateModel) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SuiteUpdateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuiteUpdateModel) UnmarshalBinary(b []byte) error {
	var res SuiteUpdateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
