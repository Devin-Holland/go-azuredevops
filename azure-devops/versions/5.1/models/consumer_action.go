// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConsumerAction Defines the data contract of a consumer action.
// swagger:model ConsumerAction
type ConsumerAction struct {

	// Reference Links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.
	AllowResourceVersionOverride bool `json:"allowResourceVersionOverride,omitempty"`

	// Gets or sets the identifier of the consumer to which this action belongs.
	ConsumerID string `json:"consumerId,omitempty"`

	// Gets or sets this action's localized description.
	Description string `json:"description,omitempty"`

	// Gets or sets this action's identifier.
	ID string `json:"id,omitempty"`

	// Gets or sets this action's input descriptors.
	InputDescriptors []*InputDescriptor `json:"inputDescriptors"`

	// Gets or sets this action's localized name.
	Name string `json:"name,omitempty"`

	// Gets or sets this action's supported event identifiers.
	SupportedEventTypes []string `json:"supportedEventTypes"`

	// Gets or sets this action's supported resource versions.
	SupportedResourceVersions map[string][]string `json:"supportedResourceVersions,omitempty"`

	// The url for this resource
	URL string `json:"url,omitempty"`
}

// Validate validates this consumer action
func (m *ConsumerAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsumerAction) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ConsumerAction) validateInputDescriptors(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDescriptors); i++ {
		if swag.IsZero(m.InputDescriptors[i]) { // not required
			continue
		}

		if m.InputDescriptors[i] != nil {
			if err := m.InputDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsumerAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsumerAction) UnmarshalBinary(b []byte) error {
	var res ConsumerAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
