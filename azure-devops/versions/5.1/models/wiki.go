// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wiki Defines a wiki repository which encapsulates the git repository backing the wiki.
// swagger:model Wiki
type Wiki struct {
	WikiCreateParameters

	// The head commit associated with the git repository backing up the wiki.
	HeadCommit string `json:"headCommit,omitempty"`

	// The ID of the wiki which is same as the ID of the Git repository that it is backed by.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The git repository that backs up the wiki.
	Repository *GitRepository `json:"repository,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Wiki) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WikiCreateParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WikiCreateParameters = aO0

	// now for regular properties
	var propsWiki struct {
		HeadCommit string `json:"headCommit,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Repository *GitRepository `json:"repository,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWiki); err != nil {
		return err
	}
	m.HeadCommit = propsWiki.HeadCommit

	m.ID = propsWiki.ID

	m.Repository = propsWiki.Repository

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Wiki) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WikiCreateParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWiki struct {
		HeadCommit string `json:"headCommit,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Repository *GitRepository `json:"repository,omitempty"`
	}
	propsWiki.HeadCommit = m.HeadCommit

	propsWiki.ID = m.ID

	propsWiki.Repository = m.Repository

	jsonDataPropsWiki, errWiki := swag.WriteJSON(propsWiki)
	if errWiki != nil {
		return nil, errWiki
	}
	_parts = append(_parts, jsonDataPropsWiki)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this wiki
func (m *Wiki) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WikiCreateParameters
	if err := m.WikiCreateParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wiki) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Wiki) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wiki) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wiki) UnmarshalBinary(b []byte) error {
	var res Wiki
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
