// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenAdminPagedSessionTokens A paginatated list of session tokens. Session tokens correspond to OAuth credentials such as personal access tokens (PATs) and other OAuth authorizations.
// swagger:model TokenAdminPagedSessionTokens
type TokenAdminPagedSessionTokens struct {

	// The continuation token that can be used to retrieve the next page of session tokens, or <code>null</code> if there is no next page.
	// Format: uuid
	ContinuationToken strfmt.UUID `json:"continuationToken,omitempty"`

	// The list of all session tokens in the current page.
	Value []*SessionToken `json:"value"`
}

// Validate validates this token admin paged session tokens
func (m *TokenAdminPagedSessionTokens) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuationToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenAdminPagedSessionTokens) validateContinuationToken(formats strfmt.Registry) error {

	if swag.IsZero(m.ContinuationToken) { // not required
		return nil
	}

	if err := validate.FormatOf("continuationToken", "body", "uuid", m.ContinuationToken.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenAdminPagedSessionTokens) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	for i := 0; i < len(m.Value); i++ {
		if swag.IsZero(m.Value[i]) { // not required
			continue
		}

		if m.Value[i] != nil {
			if err := m.Value[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenAdminPagedSessionTokens) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenAdminPagedSessionTokens) UnmarshalBinary(b []byte) error {
	var res TokenAdminPagedSessionTokens
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
