// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestSession Test Session
// swagger:model TestSession
type TestSession struct {

	// Area path of the test session
	Area *ShallowReference `json:"area,omitempty"`

	// Comments in the test session
	Comment string `json:"comment,omitempty"`

	// Duration of the session
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Id of the test session
	ID int32 `json:"id,omitempty"`

	// Last Updated By  Reference
	LastUpdatedBy *IdentityRef `json:"lastUpdatedBy,omitempty"`

	// Last updated date
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// Owner of the test session
	Owner *IdentityRef `json:"owner,omitempty"`

	// Project to which the test session belongs
	Project *ShallowReference `json:"project,omitempty"`

	// Generic store for test session data
	PropertyBag *PropertyBag `json:"propertyBag,omitempty"`

	// Revision of the test session
	Revision int32 `json:"revision,omitempty"`

	// Source of the test session
	// Enum: [unknown xtDesktop feedbackDesktop xtWeb feedbackWeb xtDesktop2 sessionInsightsForAll]
	Source interface{} `json:"source,omitempty"`

	// Start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// State of the test session
	// Enum: [unspecified notStarted inProgress paused completed declined]
	State interface{} `json:"state,omitempty"`

	// Title of the test session
	Title string `json:"title,omitempty"`

	// Url of Test Session Resource
	URL string `json:"url,omitempty"`
}

// Validate validates this test session
func (m *TestSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyBag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSession) validateArea(formats strfmt.Registry) error {

	if swag.IsZero(m.Area) { // not required
		return nil
	}

	if m.Area != nil {
		if err := m.Area.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("area")
			}
			return err
		}
	}

	return nil
}

func (m *TestSession) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSession) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if m.LastUpdatedBy != nil {
		if err := m.LastUpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TestSession) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSession) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TestSession) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *TestSession) validatePropertyBag(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyBag) { // not required
		return nil
	}

	if m.PropertyBag != nil {
		if err := m.PropertyBag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("propertyBag")
			}
			return err
		}
	}

	return nil
}

func (m *TestSession) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSession) UnmarshalBinary(b []byte) error {
	var res TestSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
