// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FeedChange A container that encapsulates the state of the feed after a create, update, or delete.
// swagger:model FeedChange
type FeedChange struct {

	// The type of operation.
	// Enum: [addOrUpdate delete]
	ChangeType interface{} `json:"changeType,omitempty"`

	// The state of the feed after a after a create, update, or delete operation completed.
	Feed *Feed `json:"feed,omitempty"`

	// A token that identifies the next change in the log of changes.
	FeedContinuationToken int64 `json:"feedContinuationToken,omitempty"`

	// A token that identifies the latest package change for this feed.  This can be used to quickly determine if there have been any changes to packages in a specific feed.
	LatestPackageContinuationToken int64 `json:"latestPackageContinuationToken,omitempty"`
}

// Validate validates this feed change
func (m *FeedChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedChange) validateFeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Feed) { // not required
		return nil
	}

	if m.Feed != nil {
		if err := m.Feed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedChange) UnmarshalBinary(b []byte) error {
	var res FeedChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
