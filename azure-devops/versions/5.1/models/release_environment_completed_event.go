// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseEnvironmentCompletedEvent release environment completed event
// swagger:model ReleaseEnvironmentCompletedEvent
type ReleaseEnvironmentCompletedEvent struct {

	// created by name
	CreatedByName string `json:"createdByName,omitempty"`

	// definition Id
	DefinitionID int32 `json:"definitionId,omitempty"`

	// definition name
	DefinitionName string `json:"definitionName,omitempty"`

	// environment
	Environment *ReleaseEnvironment `json:"environment,omitempty"`

	// environment Id
	EnvironmentID int32 `json:"environmentId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// reason
	// Enum: [none manual automated scheduled redeployTrigger]
	Reason interface{} `json:"reason,omitempty"`

	// release created by
	ReleaseCreatedBy *IdentityRef `json:"releaseCreatedBy,omitempty"`

	// release logs Uri
	ReleaseLogsURI string `json:"releaseLogsUri,omitempty"`

	// release name
	ReleaseName string `json:"releaseName,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// web access Uri
	WebAccessURI string `json:"webAccessUri,omitempty"`
}

// Validate validates this release environment completed event
func (m *ReleaseEnvironmentCompletedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseEnvironmentCompletedEvent) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseEnvironmentCompletedEvent) validateReleaseCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseCreatedBy) { // not required
		return nil
	}

	if m.ReleaseCreatedBy != nil {
		if err := m.ReleaseCreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseCreatedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseEnvironmentCompletedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseEnvironmentCompletedEvent) UnmarshalBinary(b []byte) error {
	var res ReleaseEnvironmentCompletedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
