// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dashboard Model of a Dashboard.
// swagger:model Dashboard
type Dashboard struct {

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Description of the dashboard.
	Description string `json:"description,omitempty"`

	// Server defined version tracking value, used for edit collision detection.
	ETag string `json:"eTag,omitempty"`

	// ID of the Dashboard. Provided by service at creation time.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Name of the Dashboard.
	Name string `json:"name,omitempty"`

	// ID of the Owner for a dashboard. For any legacy dashboards, this would be the unique identifier for the team associated with the dashboard.
	// Format: uuid
	OwnerID strfmt.UUID `json:"ownerId,omitempty"`

	// Position of the dashboard, within a dashboard group. If unset at creation time, position is decided by the service.
	Position int32 `json:"position,omitempty"`

	// Interval for client to automatically refresh the dashboard. Expressed in minutes.
	RefreshInterval int32 `json:"refreshInterval,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// The set of Widgets on the dashboard.
	Widgets []*Widget `json:"widgets"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidgets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateOwnerID(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerID) { // not required
		return nil
	}

	if err := validate.FormatOf("ownerId", "body", "uuid", m.OwnerID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateWidgets(formats strfmt.Registry) error {

	if swag.IsZero(m.Widgets) { // not required
		return nil
	}

	for i := 0; i < len(m.Widgets); i++ {
		if swag.IsZero(m.Widgets[i]) { // not required
			continue
		}

		if m.Widgets[i] != nil {
			if err := m.Widgets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("widgets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
