// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskGroupStep Represents tasks in the task group.
// swagger:model TaskGroupStep
type TaskGroupStep struct {

	// Gets or sets as 'true' to run the task always, 'false' otherwise.
	AlwaysRun bool `json:"alwaysRun,omitempty"`

	// Gets or sets condition for the task.
	Condition string `json:"condition,omitempty"`

	// Gets or sets as 'true' to continue on error, 'false' otherwise.
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// Gets or sets the display name.
	DisplayName string `json:"displayName,omitempty"`

	// Gets or sets as task is enabled or not.
	Enabled bool `json:"enabled,omitempty"`

	// Gets dictionary of environment variables.
	Environment map[string]string `json:"environment,omitempty"`

	// Gets or sets dictionary of inputs.
	Inputs map[string]string `json:"inputs,omitempty"`

	// Gets or sets the reference of the task.
	Task *TaskDefinitionReference `json:"task,omitempty"`

	// Gets or sets the maximum time, in minutes, that a task is allowed to execute on agent before being cancelled by server. A zero value indicates an infinite timeout.
	TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`
}

// Validate validates this task group step
func (m *TaskGroupStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskGroupStep) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskGroupStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskGroupStep) UnmarshalBinary(b []byte) error {
	var res TaskGroupStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
