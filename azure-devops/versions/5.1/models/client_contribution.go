// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClientContribution Representaion of a ContributionNode that can be used for serialized to clients.
// swagger:model ClientContribution
type ClientContribution struct {

	// Description of the contribution/type
	Description string `json:"description,omitempty"`

	// Fully qualified identifier of the contribution/type
	ID string `json:"id,omitempty"`

	// Includes is a set of contributions that should have this contribution included in their targets list.
	Includes []string `json:"includes"`

	// Properties/attributes of this contribution
	Properties *JObject `json:"properties,omitempty"`

	// The ids of the contribution(s) that this contribution targets. (parent contributions)
	Targets []string `json:"targets"`

	// Id of the Contribution Type
	Type string `json:"type,omitempty"`
}

// Validate validates this client contribution
func (m *ClientContribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientContribution) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientContribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientContribution) UnmarshalBinary(b []byte) error {
	var res ClientContribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
