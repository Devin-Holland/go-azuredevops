// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WebAPIConnectedServiceDetails web Api connected service details
// swagger:model WebApiConnectedServiceDetails
type WebAPIConnectedServiceDetails struct {
	WebAPIConnectedServiceRef

	// Meta data for service connection
	ConnectedServiceMetaData *WebAPIConnectedService `json:"connectedServiceMetaData,omitempty"`

	// Credential info
	CredentialsXML string `json:"credentialsXml,omitempty"`

	// Optional uri to connect directly to the service such as https://windows.azure.com
	EndPoint string `json:"endPoint,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WebAPIConnectedServiceDetails) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WebAPIConnectedServiceRef
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WebAPIConnectedServiceRef = aO0

	// now for regular properties
	var propsWebAPIConnectedServiceDetails struct {
		ConnectedServiceMetaData *WebAPIConnectedService `json:"connectedServiceMetaData,omitempty"`

		CredentialsXML string `json:"credentialsXml,omitempty"`

		EndPoint string `json:"endPoint,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWebAPIConnectedServiceDetails); err != nil {
		return err
	}
	m.ConnectedServiceMetaData = propsWebAPIConnectedServiceDetails.ConnectedServiceMetaData

	m.CredentialsXML = propsWebAPIConnectedServiceDetails.CredentialsXML

	m.EndPoint = propsWebAPIConnectedServiceDetails.EndPoint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WebAPIConnectedServiceDetails) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WebAPIConnectedServiceRef)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWebAPIConnectedServiceDetails struct {
		ConnectedServiceMetaData *WebAPIConnectedService `json:"connectedServiceMetaData,omitempty"`

		CredentialsXML string `json:"credentialsXml,omitempty"`

		EndPoint string `json:"endPoint,omitempty"`
	}
	propsWebAPIConnectedServiceDetails.ConnectedServiceMetaData = m.ConnectedServiceMetaData

	propsWebAPIConnectedServiceDetails.CredentialsXML = m.CredentialsXML

	propsWebAPIConnectedServiceDetails.EndPoint = m.EndPoint

	jsonDataPropsWebAPIConnectedServiceDetails, errWebAPIConnectedServiceDetails := swag.WriteJSON(propsWebAPIConnectedServiceDetails)
	if errWebAPIConnectedServiceDetails != nil {
		return nil, errWebAPIConnectedServiceDetails
	}
	_parts = append(_parts, jsonDataPropsWebAPIConnectedServiceDetails)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this web Api connected service details
func (m *WebAPIConnectedServiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WebAPIConnectedServiceRef
	if err := m.WebAPIConnectedServiceRef.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedServiceMetaData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebAPIConnectedServiceDetails) validateConnectedServiceMetaData(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedServiceMetaData) { // not required
		return nil
	}

	if m.ConnectedServiceMetaData != nil {
		if err := m.ConnectedServiceMetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedServiceMetaData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebAPIConnectedServiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebAPIConnectedServiceDetails) UnmarshalBinary(b []byte) error {
	var res WebAPIConnectedServiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
