// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskOrchestrationPlan task orchestration plan
// swagger:model TaskOrchestrationPlan
type TaskOrchestrationPlan struct {
	TaskOrchestrationPlanReference

	// environment
	Environment *PlanEnvironment `json:"environment,omitempty"`

	// finish time
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// implementation
	Implementation *TaskOrchestrationContainer `json:"implementation,omitempty"`

	// initialization log
	InitializationLog *TaskLogReference `json:"initializationLog,omitempty"`

	// requested by Id
	// Format: uuid
	RequestedByID strfmt.UUID `json:"requestedById,omitempty"`

	// requested for Id
	// Format: uuid
	RequestedForID strfmt.UUID `json:"requestedForId,omitempty"`

	// result
	// Enum: [succeeded succeededWithIssues failed canceled skipped abandoned]
	Result interface{} `json:"result,omitempty"`

	// result code
	ResultCode string `json:"resultCode,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// state
	// Enum: [inProgress queued completed throttled]
	State interface{} `json:"state,omitempty"`

	// timeline
	Timeline *TimelineReference `json:"timeline,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskOrchestrationPlan) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskOrchestrationPlanReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskOrchestrationPlanReference = aO0

	// now for regular properties
	var propsTaskOrchestrationPlan struct {
		Environment *PlanEnvironment `json:"environment,omitempty"`

		FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

		Implementation *TaskOrchestrationContainer `json:"implementation,omitempty"`

		InitializationLog *TaskLogReference `json:"initializationLog,omitempty"`

		RequestedByID strfmt.UUID `json:"requestedById,omitempty"`

		RequestedForID strfmt.UUID `json:"requestedForId,omitempty"`

		Result interface{} `json:"result,omitempty"`

		ResultCode string `json:"resultCode,omitempty"`

		StartTime strfmt.DateTime `json:"startTime,omitempty"`

		State interface{} `json:"state,omitempty"`

		Timeline *TimelineReference `json:"timeline,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskOrchestrationPlan); err != nil {
		return err
	}
	m.Environment = propsTaskOrchestrationPlan.Environment

	m.FinishTime = propsTaskOrchestrationPlan.FinishTime

	m.Implementation = propsTaskOrchestrationPlan.Implementation

	m.InitializationLog = propsTaskOrchestrationPlan.InitializationLog

	m.RequestedByID = propsTaskOrchestrationPlan.RequestedByID

	m.RequestedForID = propsTaskOrchestrationPlan.RequestedForID

	m.Result = propsTaskOrchestrationPlan.Result

	m.ResultCode = propsTaskOrchestrationPlan.ResultCode

	m.StartTime = propsTaskOrchestrationPlan.StartTime

	m.State = propsTaskOrchestrationPlan.State

	m.Timeline = propsTaskOrchestrationPlan.Timeline

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskOrchestrationPlan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskOrchestrationPlanReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskOrchestrationPlan struct {
		Environment *PlanEnvironment `json:"environment,omitempty"`

		FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

		Implementation *TaskOrchestrationContainer `json:"implementation,omitempty"`

		InitializationLog *TaskLogReference `json:"initializationLog,omitempty"`

		RequestedByID strfmt.UUID `json:"requestedById,omitempty"`

		RequestedForID strfmt.UUID `json:"requestedForId,omitempty"`

		Result interface{} `json:"result,omitempty"`

		ResultCode string `json:"resultCode,omitempty"`

		StartTime strfmt.DateTime `json:"startTime,omitempty"`

		State interface{} `json:"state,omitempty"`

		Timeline *TimelineReference `json:"timeline,omitempty"`
	}
	propsTaskOrchestrationPlan.Environment = m.Environment

	propsTaskOrchestrationPlan.FinishTime = m.FinishTime

	propsTaskOrchestrationPlan.Implementation = m.Implementation

	propsTaskOrchestrationPlan.InitializationLog = m.InitializationLog

	propsTaskOrchestrationPlan.RequestedByID = m.RequestedByID

	propsTaskOrchestrationPlan.RequestedForID = m.RequestedForID

	propsTaskOrchestrationPlan.Result = m.Result

	propsTaskOrchestrationPlan.ResultCode = m.ResultCode

	propsTaskOrchestrationPlan.StartTime = m.StartTime

	propsTaskOrchestrationPlan.State = m.State

	propsTaskOrchestrationPlan.Timeline = m.Timeline

	jsonDataPropsTaskOrchestrationPlan, errTaskOrchestrationPlan := swag.WriteJSON(propsTaskOrchestrationPlan)
	if errTaskOrchestrationPlan != nil {
		return nil, errTaskOrchestrationPlan
	}
	_parts = append(_parts, jsonDataPropsTaskOrchestrationPlan)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task orchestration plan
func (m *TaskOrchestrationPlan) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskOrchestrationPlanReference
	if err := m.TaskOrchestrationPlanReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImplementation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitializationLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedForID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskOrchestrationPlan) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateImplementation(formats strfmt.Registry) error {

	if swag.IsZero(m.Implementation) { // not required
		return nil
	}

	if m.Implementation != nil {
		if err := m.Implementation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("implementation")
			}
			return err
		}
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateInitializationLog(formats strfmt.Registry) error {

	if swag.IsZero(m.InitializationLog) { // not required
		return nil
	}

	if m.InitializationLog != nil {
		if err := m.InitializationLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initializationLog")
			}
			return err
		}
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateRequestedByID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedByID) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedById", "body", "uuid", m.RequestedByID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateRequestedForID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedForID) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedForId", "body", "uuid", m.RequestedForID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskOrchestrationPlan) validateTimeline(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeline) { // not required
		return nil
	}

	if m.Timeline != nil {
		if err := m.Timeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeline")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskOrchestrationPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskOrchestrationPlan) UnmarshalBinary(b []byte) error {
	var res TaskOrchestrationPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
