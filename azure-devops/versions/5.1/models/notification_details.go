// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationDetails Defines the data contract of notification details.
// swagger:model NotificationDetails
type NotificationDetails struct {

	// Gets or sets the time that this notification was completed (response received from the consumer)
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Gets or sets this notification detail's consumer action identifier.
	ConsumerActionID string `json:"consumerActionId,omitempty"`

	// Gets or sets this notification detail's consumer identifier.
	ConsumerID string `json:"consumerId,omitempty"`

	// Gets or sets this notification detail's consumer inputs.
	ConsumerInputs map[string]string `json:"consumerInputs,omitempty"`

	// Gets or sets the time that this notification was dequeued for processing
	// Format: date-time
	DequeuedDate strfmt.DateTime `json:"dequeuedDate,omitempty"`

	// Gets or sets this notification detail's error detail.
	ErrorDetail string `json:"errorDetail,omitempty"`

	// Gets or sets this notification detail's error message.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Gets or sets this notification detail's event content.
	Event *Event `json:"event,omitempty"`

	// Gets or sets this notification detail's event type.
	EventType string `json:"eventType,omitempty"`

	// Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)
	// Format: date-time
	ProcessedDate strfmt.DateTime `json:"processedDate,omitempty"`

	// Gets or sets this notification detail's publisher identifier.
	PublisherID string `json:"publisherId,omitempty"`

	// Gets or sets this notification detail's publisher inputs.
	PublisherInputs map[string]string `json:"publisherInputs,omitempty"`

	// Gets or sets the time that this notification was queued (created)
	// Format: date-time
	QueuedDate strfmt.DateTime `json:"queuedDate,omitempty"`

	// Gets or sets this notification detail's request.
	Request string `json:"request,omitempty"`

	// Number of requests attempted to be sent to the consumer
	RequestAttempts int32 `json:"requestAttempts,omitempty"`

	// Duration of the request to the consumer in seconds
	RequestDuration float64 `json:"requestDuration,omitempty"`

	// Gets or sets this notification detail's reponse.
	Response string `json:"response,omitempty"`
}

// Validate validates this notification details
func (m *NotificationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDequeuedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationDetails) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationDetails) validateDequeuedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DequeuedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dequeuedDate", "body", "date-time", m.DequeuedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationDetails) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *NotificationDetails) validateProcessedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processedDate", "body", "date-time", m.ProcessedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotificationDetails) validateQueuedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.QueuedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("queuedDate", "body", "date-time", m.QueuedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationDetails) UnmarshalBinary(b []byte) error {
	var res NotificationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
