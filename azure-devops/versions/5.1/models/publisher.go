// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Publisher Defines the data contract of an event publisher.
// swagger:model Publisher
type Publisher struct {

	// Reference Links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Gets this publisher's localized description.
	Description string `json:"description,omitempty"`

	// Gets this publisher's identifier.
	ID string `json:"id,omitempty"`

	// Publisher-specific inputs
	InputDescriptors []*InputDescriptor `json:"inputDescriptors"`

	// Gets this publisher's localized name.
	Name string `json:"name,omitempty"`

	// The service instance type of the first party publisher.
	ServiceInstanceType string `json:"serviceInstanceType,omitempty"`

	// Gets this publisher's supported event types.
	SupportedEvents []*EventTypeDescriptor `json:"supportedEvents"`

	// The url for this resource
	URL string `json:"url,omitempty"`
}

// Validate validates this publisher
func (m *Publisher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Publisher) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Publisher) validateInputDescriptors(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDescriptors); i++ {
		if swag.IsZero(m.InputDescriptors[i]) { // not required
			continue
		}

		if m.InputDescriptors[i] != nil {
			if err := m.InputDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Publisher) validateSupportedEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedEvents); i++ {
		if swag.IsZero(m.SupportedEvents[i]) { // not required
			continue
		}

		if m.SupportedEvents[i] != nil {
			if err := m.SupportedEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedEvents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Publisher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Publisher) UnmarshalBinary(b []byte) error {
	var res Publisher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
