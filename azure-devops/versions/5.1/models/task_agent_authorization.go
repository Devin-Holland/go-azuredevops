// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentAuthorization Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.
// swagger:model TaskAgentAuthorization
type TaskAgentAuthorization struct {

	// Endpoint used to obtain access tokens from the configured token service.
	AuthorizationURL string `json:"authorizationUrl,omitempty"`

	// Client identifier for this agent.
	// Format: uuid
	ClientID strfmt.UUID `json:"clientId,omitempty"`

	// Public key used to verify the identity of this agent.
	PublicKey *TaskAgentPublicKey `json:"publicKey,omitempty"`
}

// Validate validates this task agent authorization
func (m *TaskAgentAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentAuthorization) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.FormatOf("clientId", "body", "uuid", m.ClientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentAuthorization) validatePublicKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentAuthorization) UnmarshalBinary(b []byte) error {
	var res TaskAgentAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
