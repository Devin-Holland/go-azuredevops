// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// YamlFileSource yaml file source
// swagger:model YamlFileSource
type YamlFileSource struct {

	// Gets or sets definition reference. e.g. {"project":{"id":"fed755ea-49c5-4399-acea-fd5b5aa90a6c","name":"myProject"},"definition":{"id":"1","name":"mybuildDefinition"},"connection":{"id":"1","name":"myConnection"}}
	SourceReference map[string]YamlSourceReference `json:"sourceReference,omitempty"`

	// type
	// Enum: [none tfsGit]
	Type interface{} `json:"type,omitempty"`
}

// Validate validates this yaml file source
func (m *YamlFileSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YamlFileSource) validateSourceReference(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceReference) { // not required
		return nil
	}

	for k := range m.SourceReference {

		if err := validate.Required("sourceReference"+"."+k, "body", m.SourceReference[k]); err != nil {
			return err
		}
		if val, ok := m.SourceReference[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *YamlFileSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YamlFileSource) UnmarshalBinary(b []byte) error {
	var res YamlFileSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
