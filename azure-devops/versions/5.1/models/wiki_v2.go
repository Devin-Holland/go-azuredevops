// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WikiV2 Defines a wiki resource.
// swagger:model WikiV2
type WikiV2 struct {
	WikiCreateBaseParameters

	// ID of the wiki.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Properties of the wiki.
	Properties map[string]string `json:"properties,omitempty"`

	// Remote web url to the wiki.
	RemoteURL string `json:"remoteUrl,omitempty"`

	// REST url for this wiki.
	URL string `json:"url,omitempty"`

	// Versions of the wiki.
	Versions []*GitVersionDescriptor `json:"versions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WikiV2) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WikiCreateBaseParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WikiCreateBaseParameters = aO0

	// now for regular properties
	var propsWikiV2 struct {
		ID strfmt.UUID `json:"id,omitempty"`

		Properties map[string]string `json:"properties,omitempty"`

		RemoteURL string `json:"remoteUrl,omitempty"`

		URL string `json:"url,omitempty"`

		Versions []*GitVersionDescriptor `json:"versions"`
	}
	if err := swag.ReadJSON(raw, &propsWikiV2); err != nil {
		return err
	}
	m.ID = propsWikiV2.ID

	m.Properties = propsWikiV2.Properties

	m.RemoteURL = propsWikiV2.RemoteURL

	m.URL = propsWikiV2.URL

	m.Versions = propsWikiV2.Versions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WikiV2) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WikiCreateBaseParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWikiV2 struct {
		ID strfmt.UUID `json:"id,omitempty"`

		Properties map[string]string `json:"properties,omitempty"`

		RemoteURL string `json:"remoteUrl,omitempty"`

		URL string `json:"url,omitempty"`

		Versions []*GitVersionDescriptor `json:"versions"`
	}
	propsWikiV2.ID = m.ID

	propsWikiV2.Properties = m.Properties

	propsWikiV2.RemoteURL = m.RemoteURL

	propsWikiV2.URL = m.URL

	propsWikiV2.Versions = m.Versions

	jsonDataPropsWikiV2, errWikiV2 := swag.WriteJSON(propsWikiV2)
	if errWikiV2 != nil {
		return nil, errWikiV2
	}
	_parts = append(_parts, jsonDataPropsWikiV2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this wiki v2
func (m *WikiV2) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WikiCreateBaseParameters
	if err := m.WikiCreateBaseParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WikiV2) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WikiV2) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WikiV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WikiV2) UnmarshalBinary(b []byte) error {
	var res WikiV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
