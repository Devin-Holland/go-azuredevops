// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultsFilter results filter
// swagger:model ResultsFilter
type ResultsFilter struct {

	// automated test name
	AutomatedTestName string `json:"automatedTestName,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// executed in
	// Enum: [any tcm tfs]
	ExecutedIn interface{} `json:"executedIn,omitempty"`

	// group by
	GroupBy string `json:"groupBy,omitempty"`

	// max complete date
	// Format: date-time
	MaxCompleteDate strfmt.DateTime `json:"maxCompleteDate,omitempty"`

	// results count
	ResultsCount int32 `json:"resultsCount,omitempty"`

	// test case Id
	TestCaseID int32 `json:"testCaseId,omitempty"`

	// test case reference ids
	TestCaseReferenceIds []int32 `json:"testCaseReferenceIds"`

	// test plan Id
	TestPlanID int32 `json:"testPlanId,omitempty"`

	// test point ids
	TestPointIds []int32 `json:"testPointIds"`

	// test results context
	TestResultsContext *TestResultsContext `json:"testResultsContext,omitempty"`

	// trend days
	TrendDays int32 `json:"trendDays,omitempty"`
}

// Validate validates this results filter
func (m *ResultsFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxCompleteDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestResultsContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultsFilter) validateMaxCompleteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxCompleteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("maxCompleteDate", "body", "date-time", m.MaxCompleteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResultsFilter) validateTestResultsContext(formats strfmt.Registry) error {

	if swag.IsZero(m.TestResultsContext) { // not required
		return nil
	}

	if m.TestResultsContext != nil {
		if err := m.TestResultsContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testResultsContext")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultsFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultsFilter) UnmarshalBinary(b []byte) error {
	var res ResultsFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
