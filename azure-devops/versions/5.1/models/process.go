// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Process process
// swagger:model Process
type Process struct {
	ProcessReference

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// type
	// Enum: [system custom inherited]
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Process) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ProcessReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ProcessReference = aO0

	// now for regular properties
	var propsProcess struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		IsDefault bool `json:"isDefault,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsProcess); err != nil {
		return err
	}
	m.Links = propsProcess.Links

	m.Description = propsProcess.Description

	m.ID = propsProcess.ID

	m.IsDefault = propsProcess.IsDefault

	m.Type = propsProcess.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Process) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ProcessReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsProcess struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		IsDefault bool `json:"isDefault,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	propsProcess.Links = m.Links

	propsProcess.Description = m.Description

	propsProcess.ID = m.ID

	propsProcess.IsDefault = m.IsDefault

	propsProcess.Type = m.Type

	jsonDataPropsProcess, errProcess := swag.WriteJSON(propsProcess)
	if errProcess != nil {
		return nil, errProcess
	}
	_parts = append(_parts, jsonDataPropsProcess)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this process
func (m *Process) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProcessReference
	if err := m.ProcessReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Process) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Process) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Process) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Process) UnmarshalBinary(b []byte) error {
	var res Process
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
