// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SourceRepoTrigger source repo trigger
// swagger:model SourceRepoTrigger
type SourceRepoTrigger struct {
	ReleaseTriggerBase

	// Alias of the source repo trigger.
	Alias string `json:"alias,omitempty"`

	// branch filters
	BranchFilters []string `json:"branchFilters"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SourceRepoTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseTriggerBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseTriggerBase = aO0

	// now for regular properties
	var propsSourceRepoTrigger struct {
		Alias string `json:"alias,omitempty"`

		BranchFilters []string `json:"branchFilters"`
	}
	if err := swag.ReadJSON(raw, &propsSourceRepoTrigger); err != nil {
		return err
	}
	m.Alias = propsSourceRepoTrigger.Alias

	m.BranchFilters = propsSourceRepoTrigger.BranchFilters

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SourceRepoTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseTriggerBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSourceRepoTrigger struct {
		Alias string `json:"alias,omitempty"`

		BranchFilters []string `json:"branchFilters"`
	}
	propsSourceRepoTrigger.Alias = m.Alias

	propsSourceRepoTrigger.BranchFilters = m.BranchFilters

	jsonDataPropsSourceRepoTrigger, errSourceRepoTrigger := swag.WriteJSON(propsSourceRepoTrigger)
	if errSourceRepoTrigger != nil {
		return nil, errSourceRepoTrigger
	}
	_parts = append(_parts, jsonDataPropsSourceRepoTrigger)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this source repo trigger
func (m *SourceRepoTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseTriggerBase
	if err := m.ReleaseTriggerBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SourceRepoTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceRepoTrigger) UnmarshalBinary(b []byte) error {
	var res SourceRepoTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
