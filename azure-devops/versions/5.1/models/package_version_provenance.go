// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageVersionProvenance Provenance for a published package version
// swagger:model PackageVersionProvenance
type PackageVersionProvenance struct {

	// Name or Id of the feed.
	// Format: uuid
	FeedID strfmt.UUID `json:"feedId,omitempty"`

	// Id of the package (GUID Id, not name).
	// Format: uuid
	PackageID strfmt.UUID `json:"packageId,omitempty"`

	// Id of the package version (GUID Id, not name).
	// Format: uuid
	PackageVersionID strfmt.UUID `json:"packageVersionId,omitempty"`

	// Provenance information for this package version.
	Provenance *Provenance `json:"provenance,omitempty"`
}

// Validate validates this package version provenance
func (m *PackageVersionProvenance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvenance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageVersionProvenance) validateFeedID(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedID) { // not required
		return nil
	}

	if err := validate.FormatOf("feedId", "body", "uuid", m.FeedID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageVersionProvenance) validatePackageID(formats strfmt.Registry) error {

	if swag.IsZero(m.PackageID) { // not required
		return nil
	}

	if err := validate.FormatOf("packageId", "body", "uuid", m.PackageID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageVersionProvenance) validatePackageVersionID(formats strfmt.Registry) error {

	if swag.IsZero(m.PackageVersionID) { // not required
		return nil
	}

	if err := validate.FormatOf("packageVersionId", "body", "uuid", m.PackageVersionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageVersionProvenance) validateProvenance(formats strfmt.Registry) error {

	if swag.IsZero(m.Provenance) { // not required
		return nil
	}

	if m.Provenance != nil {
		if err := m.Provenance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provenance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageVersionProvenance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageVersionProvenance) UnmarshalBinary(b []byte) error {
	var res PackageVersionProvenance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
