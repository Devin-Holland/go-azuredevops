// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseGatesPhase release gates phase
// swagger:model ReleaseGatesPhase
type ReleaseGatesPhase struct {
	ReleaseDeployPhase

	// List of ignored gates.
	IgnoredGates []*IgnoredGate `json:"ignoredGates"`

	// Date and time at which stabilization of gates completed.
	// Format: date-time
	StabilizationCompletedOn strfmt.DateTime `json:"stabilizationCompletedOn,omitempty"`

	// Date and time at which all gates executed successfully.
	// Format: date-time
	SucceedingSince strfmt.DateTime `json:"succeedingSince,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReleaseGatesPhase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseDeployPhase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseDeployPhase = aO0

	// now for regular properties
	var propsReleaseGatesPhase struct {
		IgnoredGates []*IgnoredGate `json:"ignoredGates"`

		StabilizationCompletedOn strfmt.DateTime `json:"stabilizationCompletedOn,omitempty"`

		SucceedingSince strfmt.DateTime `json:"succeedingSince,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsReleaseGatesPhase); err != nil {
		return err
	}
	m.IgnoredGates = propsReleaseGatesPhase.IgnoredGates

	m.StabilizationCompletedOn = propsReleaseGatesPhase.StabilizationCompletedOn

	m.SucceedingSince = propsReleaseGatesPhase.SucceedingSince

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReleaseGatesPhase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseDeployPhase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsReleaseGatesPhase struct {
		IgnoredGates []*IgnoredGate `json:"ignoredGates"`

		StabilizationCompletedOn strfmt.DateTime `json:"stabilizationCompletedOn,omitempty"`

		SucceedingSince strfmt.DateTime `json:"succeedingSince,omitempty"`
	}
	propsReleaseGatesPhase.IgnoredGates = m.IgnoredGates

	propsReleaseGatesPhase.StabilizationCompletedOn = m.StabilizationCompletedOn

	propsReleaseGatesPhase.SucceedingSince = m.SucceedingSince

	jsonDataPropsReleaseGatesPhase, errReleaseGatesPhase := swag.WriteJSON(propsReleaseGatesPhase)
	if errReleaseGatesPhase != nil {
		return nil, errReleaseGatesPhase
	}
	_parts = append(_parts, jsonDataPropsReleaseGatesPhase)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this release gates phase
func (m *ReleaseGatesPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseDeployPhase
	if err := m.ReleaseDeployPhase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnoredGates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStabilizationCompletedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSucceedingSince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseGatesPhase) validateIgnoredGates(formats strfmt.Registry) error {

	if swag.IsZero(m.IgnoredGates) { // not required
		return nil
	}

	for i := 0; i < len(m.IgnoredGates); i++ {
		if swag.IsZero(m.IgnoredGates[i]) { // not required
			continue
		}

		if m.IgnoredGates[i] != nil {
			if err := m.IgnoredGates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignoredGates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseGatesPhase) validateStabilizationCompletedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.StabilizationCompletedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("stabilizationCompletedOn", "body", "date-time", m.StabilizationCompletedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseGatesPhase) validateSucceedingSince(formats strfmt.Registry) error {

	if swag.IsZero(m.SucceedingSince) { // not required
		return nil
	}

	if err := validate.FormatOf("succeedingSince", "body", "date-time", m.SucceedingSince.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseGatesPhase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseGatesPhase) UnmarshalBinary(b []byte) error {
	var res ReleaseGatesPhase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
