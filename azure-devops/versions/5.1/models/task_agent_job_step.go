// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentJobStep task agent job step
// swagger:model TaskAgentJobStep
type TaskAgentJobStep struct {

	// condition
	Condition string `json:"condition,omitempty"`

	// continue on error
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// env
	Env map[string]string `json:"env,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// inputs
	Inputs map[string]string `json:"inputs,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// task
	Task *TaskAgentJobTask `json:"task,omitempty"`

	// timeout in minutes
	TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`

	// type
	// Enum: [task action]
	Type interface{} `json:"type,omitempty"`
}

// Validate validates this task agent job step
func (m *TaskAgentJobStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentJobStep) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentJobStep) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentJobStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentJobStep) UnmarshalBinary(b []byte) error {
	var res TaskAgentJobStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
