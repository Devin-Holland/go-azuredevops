// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphMembershipTraversal graph membership traversal
// swagger:model GraphMembershipTraversal
type GraphMembershipTraversal struct {

	// Reason why the subject could not be traversed completely
	IncompletenessReason string `json:"incompletenessReason,omitempty"`

	// When true, the subject is traversed completely
	IsComplete bool `json:"isComplete,omitempty"`

	// The traversed subject descriptor
	SubjectDescriptor string `json:"subjectDescriptor,omitempty"`

	// Subject descriptor ids of the traversed members
	TraversedSubjectIds []strfmt.UUID `json:"traversedSubjectIds"`

	// Subject descriptors of the traversed members
	TraversedSubjects []string `json:"traversedSubjects"`
}

// Validate validates this graph membership traversal
func (m *GraphMembershipTraversal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTraversedSubjectIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphMembershipTraversal) validateTraversedSubjectIds(formats strfmt.Registry) error {

	if swag.IsZero(m.TraversedSubjectIds) { // not required
		return nil
	}

	for i := 0; i < len(m.TraversedSubjectIds); i++ {

		if err := validate.FormatOf("traversedSubjectIds"+"."+strconv.Itoa(i), "body", "uuid", m.TraversedSubjectIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphMembershipTraversal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphMembershipTraversal) UnmarshalBinary(b []byte) error {
	var res GraphMembershipTraversal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
