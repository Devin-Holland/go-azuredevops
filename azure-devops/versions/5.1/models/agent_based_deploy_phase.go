// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AgentBasedDeployPhase agent based deploy phase
// swagger:model AgentBasedDeployPhase
type AgentBasedDeployPhase struct {
	DeployPhase

	// Gets and sets the agent job deployment input
	DeploymentInput *AgentDeploymentInput `json:"deploymentInput,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AgentBasedDeployPhase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DeployPhase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DeployPhase = aO0

	// now for regular properties
	var propsAgentBasedDeployPhase struct {
		DeploymentInput *AgentDeploymentInput `json:"deploymentInput,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsAgentBasedDeployPhase); err != nil {
		return err
	}
	m.DeploymentInput = propsAgentBasedDeployPhase.DeploymentInput

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AgentBasedDeployPhase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DeployPhase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAgentBasedDeployPhase struct {
		DeploymentInput *AgentDeploymentInput `json:"deploymentInput,omitempty"`
	}
	propsAgentBasedDeployPhase.DeploymentInput = m.DeploymentInput

	jsonDataPropsAgentBasedDeployPhase, errAgentBasedDeployPhase := swag.WriteJSON(propsAgentBasedDeployPhase)
	if errAgentBasedDeployPhase != nil {
		return nil, errAgentBasedDeployPhase
	}
	_parts = append(_parts, jsonDataPropsAgentBasedDeployPhase)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this agent based deploy phase
func (m *AgentBasedDeployPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DeployPhase
	if err := m.DeployPhase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentBasedDeployPhase) validateDeploymentInput(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentInput) { // not required
		return nil
	}

	if m.DeploymentInput != nil {
		if err := m.DeploymentInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentInput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentBasedDeployPhase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentBasedDeployPhase) UnmarshalBinary(b []byte) error {
	var res AgentBasedDeployPhase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
