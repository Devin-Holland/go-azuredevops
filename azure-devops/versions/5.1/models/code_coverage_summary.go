// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CodeCoverageSummary Represents the code coverage summary results Used to publish or retrieve code coverage summary against a build
// swagger:model CodeCoverageSummary
type CodeCoverageSummary struct {

	// Uri of build for which data is retrieved/published
	Build *ShallowReference `json:"build,omitempty"`

	// List of coverage data and details for the build
	CoverageData []*CodeCoverageData `json:"coverageData"`

	// Uri of build against which difference in coverage is computed
	DeltaBuild *ShallowReference `json:"deltaBuild,omitempty"`

	// Uri of build against which difference in coverage is computed
	// Enum: [none inProgress completed finalized pending]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this code coverage summary
func (m *CodeCoverageSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverageData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeltaBuild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CodeCoverageSummary) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *CodeCoverageSummary) validateCoverageData(formats strfmt.Registry) error {

	if swag.IsZero(m.CoverageData) { // not required
		return nil
	}

	for i := 0; i < len(m.CoverageData); i++ {
		if swag.IsZero(m.CoverageData[i]) { // not required
			continue
		}

		if m.CoverageData[i] != nil {
			if err := m.CoverageData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coverageData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CodeCoverageSummary) validateDeltaBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.DeltaBuild) { // not required
		return nil
	}

	if m.DeltaBuild != nil {
		if err := m.DeltaBuild.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deltaBuild")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CodeCoverageSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeCoverageSummary) UnmarshalBinary(b []byte) error {
	var res CodeCoverageSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
