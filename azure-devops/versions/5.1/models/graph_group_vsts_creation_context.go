// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GraphGroupVstsCreationContext Use this type to create a new Vsts group that is not backed by an external provider.
// swagger:model GraphGroupVstsCreationContext
type GraphGroupVstsCreationContext struct {
	GraphGroupCreationContext

	// For internal use only in back compat scenarios.
	CrossProject bool `json:"crossProject,omitempty"`

	// Used by VSTS groups; if set this will be the group description, otherwise ignored
	Description string `json:"description,omitempty"`

	// descriptor
	Descriptor string `json:"descriptor,omitempty"`

	// Used by VSTS groups; if set this will be the group DisplayName, otherwise ignored
	DisplayName string `json:"displayName,omitempty"`

	// For internal use only in back compat scenarios.
	RestrictedVisibility bool `json:"restrictedVisibility,omitempty"`

	// For internal use only in back compat scenarios.
	SpecialGroupType string `json:"specialGroupType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GraphGroupVstsCreationContext) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphGroupCreationContext
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphGroupCreationContext = aO0

	// now for regular properties
	var propsGraphGroupVstsCreationContext struct {
		CrossProject bool `json:"crossProject,omitempty"`

		Description string `json:"description,omitempty"`

		Descriptor string `json:"descriptor,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		RestrictedVisibility bool `json:"restrictedVisibility,omitempty"`

		SpecialGroupType string `json:"specialGroupType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsGraphGroupVstsCreationContext); err != nil {
		return err
	}
	m.CrossProject = propsGraphGroupVstsCreationContext.CrossProject

	m.Description = propsGraphGroupVstsCreationContext.Description

	m.Descriptor = propsGraphGroupVstsCreationContext.Descriptor

	m.DisplayName = propsGraphGroupVstsCreationContext.DisplayName

	m.RestrictedVisibility = propsGraphGroupVstsCreationContext.RestrictedVisibility

	m.SpecialGroupType = propsGraphGroupVstsCreationContext.SpecialGroupType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GraphGroupVstsCreationContext) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GraphGroupCreationContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsGraphGroupVstsCreationContext struct {
		CrossProject bool `json:"crossProject,omitempty"`

		Description string `json:"description,omitempty"`

		Descriptor string `json:"descriptor,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		RestrictedVisibility bool `json:"restrictedVisibility,omitempty"`

		SpecialGroupType string `json:"specialGroupType,omitempty"`
	}
	propsGraphGroupVstsCreationContext.CrossProject = m.CrossProject

	propsGraphGroupVstsCreationContext.Description = m.Description

	propsGraphGroupVstsCreationContext.Descriptor = m.Descriptor

	propsGraphGroupVstsCreationContext.DisplayName = m.DisplayName

	propsGraphGroupVstsCreationContext.RestrictedVisibility = m.RestrictedVisibility

	propsGraphGroupVstsCreationContext.SpecialGroupType = m.SpecialGroupType

	jsonDataPropsGraphGroupVstsCreationContext, errGraphGroupVstsCreationContext := swag.WriteJSON(propsGraphGroupVstsCreationContext)
	if errGraphGroupVstsCreationContext != nil {
		return nil, errGraphGroupVstsCreationContext
	}
	_parts = append(_parts, jsonDataPropsGraphGroupVstsCreationContext)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this graph group vsts creation context
func (m *GraphGroupVstsCreationContext) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphGroupCreationContext
	if err := m.GraphGroupCreationContext.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *GraphGroupVstsCreationContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphGroupVstsCreationContext) UnmarshalBinary(b []byte) error {
	var res GraphGroupVstsCreationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
