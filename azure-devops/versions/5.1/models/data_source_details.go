// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DataSourceDetails data source details
// swagger:model DataSourceDetails
type DataSourceDetails struct {

	// data source name
	DataSourceName string `json:"dataSourceName,omitempty"`

	// data source Url
	DataSourceURL string `json:"dataSourceUrl,omitempty"`

	// headers
	Headers []*AuthorizationHeader `json:"headers"`

	// parameters
	Parameters map[string]string `json:"parameters,omitempty"`

	// resource Url
	ResourceURL string `json:"resourceUrl,omitempty"`

	// result selector
	ResultSelector string `json:"resultSelector,omitempty"`
}

// Validate validates this data source details
func (m *DataSourceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSourceDetails) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSourceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSourceDetails) UnmarshalBinary(b []byte) error {
	var res DataSourceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
