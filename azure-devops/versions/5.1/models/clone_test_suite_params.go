// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CloneTestSuiteParams Parameters for Test Suite clone operation
// swagger:model CloneTestSuiteParams
type CloneTestSuiteParams struct {

	// Test Plan Clone create parameters
	CloneOptions *CloneOptions `json:"cloneOptions,omitempty"`

	// Information about destination Test Suite
	DestinationTestSuite *DestinationTestSuiteInfo `json:"destinationTestSuite,omitempty"`

	// Information about source Test Suite
	SourceTestSuite *SourceTestSuiteInfo `json:"sourceTestSuite,omitempty"`
}

// Validate validates this clone test suite params
func (m *CloneTestSuiteParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloneOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationTestSuite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceTestSuite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneTestSuiteParams) validateCloneOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.CloneOptions) { // not required
		return nil
	}

	if m.CloneOptions != nil {
		if err := m.CloneOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CloneTestSuiteParams) validateDestinationTestSuite(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationTestSuite) { // not required
		return nil
	}

	if m.DestinationTestSuite != nil {
		if err := m.DestinationTestSuite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationTestSuite")
			}
			return err
		}
	}

	return nil
}

func (m *CloneTestSuiteParams) validateSourceTestSuite(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceTestSuite) { // not required
		return nil
	}

	if m.SourceTestSuite != nil {
		if err := m.SourceTestSuite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceTestSuite")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneTestSuiteParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneTestSuiteParams) UnmarshalBinary(b []byte) error {
	var res CloneTestSuiteParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
