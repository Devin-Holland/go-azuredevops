// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RequestedExtension A request for an extension (to be installed or have a license assigned)
// swagger:model RequestedExtension
type RequestedExtension struct {

	// The unique name of the extension
	ExtensionName string `json:"extensionName,omitempty"`

	// A list of each request for the extension
	ExtensionRequests []*ExtensionRequest `json:"extensionRequests"`

	// DisplayName of the publisher that owns the extension being published.
	PublisherDisplayName string `json:"publisherDisplayName,omitempty"`

	// Represents the Publisher of the requested extension
	PublisherName string `json:"publisherName,omitempty"`

	// The total number of requests for an extension
	RequestCount int32 `json:"requestCount,omitempty"`
}

// Validate validates this requested extension
func (m *RequestedExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestedExtension) validateExtensionRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionRequests); i++ {
		if swag.IsZero(m.ExtensionRequests[i]) { // not required
			continue
		}

		if m.ExtensionRequests[i] != nil {
			if err := m.ExtensionRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensionRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestedExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestedExtension) UnmarshalBinary(b []byte) error {
	var res RequestedExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
