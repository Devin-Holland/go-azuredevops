// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CreateTestRunRequest create test run request
// swagger:model CreateTestRunRequest
type CreateTestRunRequest struct {

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// results
	Results []*LegacyTestCaseResult `json:"results"`

	// test run
	TestRun *LegacyTestRun `json:"testRun,omitempty"`

	// test settings
	TestSettings *LegacyTestSettings `json:"testSettings,omitempty"`
}

// Validate validates this create test run request
func (m *CreateTestRunRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTestRunRequest) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTestRunRequest) validateTestRun(formats strfmt.Registry) error {

	if swag.IsZero(m.TestRun) { // not required
		return nil
	}

	if m.TestRun != nil {
		if err := m.TestRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testRun")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTestRunRequest) validateTestSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSettings) { // not required
		return nil
	}

	if m.TestSettings != nil {
		if err := m.TestSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTestRunRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTestRunRequest) UnmarshalBinary(b []byte) error {
	var res CreateTestRunRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
