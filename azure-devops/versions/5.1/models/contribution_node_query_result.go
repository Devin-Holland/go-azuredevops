// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContributionNodeQueryResult Result of a contribution node query.  Wraps the resulting contribution nodes and provider details.
// swagger:model ContributionNodeQueryResult
type ContributionNodeQueryResult struct {

	// Map of contribution ids to corresponding node.
	Nodes map[string]ClientContributionNode `json:"nodes,omitempty"`

	// Map of provder ids to the corresponding provider details object.
	ProviderDetails map[string]ClientContributionProviderDetails `json:"providerDetails,omitempty"`
}

// Validate validates this contribution node query result
func (m *ContributionNodeQueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContributionNodeQueryResult) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for k := range m.Nodes {

		if err := validate.Required("nodes"+"."+k, "body", m.Nodes[k]); err != nil {
			return err
		}
		if val, ok := m.Nodes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ContributionNodeQueryResult) validateProviderDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderDetails) { // not required
		return nil
	}

	for k := range m.ProviderDetails {

		if err := validate.Required("providerDetails"+"."+k, "body", m.ProviderDetails[k]); err != nil {
			return err
		}
		if val, ok := m.ProviderDetails[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContributionNodeQueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContributionNodeQueryResult) UnmarshalBinary(b []byte) error {
	var res ContributionNodeQueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
