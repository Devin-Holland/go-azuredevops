// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeploymentGroupMetrics Deployment group metrics.
// swagger:model DeploymentGroupMetrics
type DeploymentGroupMetrics struct {

	// List of deployment group properties. And types of metrics provided for those properties.
	ColumnsHeader *MetricsColumnsHeader `json:"columnsHeader,omitempty"`

	// Deployment group.
	DeploymentGroup *DeploymentGroupReference `json:"deploymentGroup,omitempty"`

	// Values of properties and the metrics. E.g. 1: total count of deployment targets for which 'TargetState' is 'offline'. E.g. 2: Average time of deployment to the deployment targets for which 'LastJobStatus' is 'passed' and 'TargetState' is 'online'.
	Rows []*MetricsRow `json:"rows"`
}

// Validate validates this deployment group metrics
func (m *DeploymentGroupMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnsHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentGroupMetrics) validateColumnsHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.ColumnsHeader) { // not required
		return nil
	}

	if m.ColumnsHeader != nil {
		if err := m.ColumnsHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("columnsHeader")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentGroupMetrics) validateDeploymentGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentGroup) { // not required
		return nil
	}

	if m.DeploymentGroup != nil {
		if err := m.DeploymentGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentGroupMetrics) validateRows(formats strfmt.Registry) error {

	if swag.IsZero(m.Rows) { // not required
		return nil
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentGroupMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentGroupMetrics) UnmarshalBinary(b []byte) error {
	var res DeploymentGroupMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
