// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildServer build server
// swagger:model BuildServer
type BuildServer struct {

	// agents
	Agents []*BuildAgentReference `json:"agents"`

	// controller
	Controller *XamlBuildControllerReference `json:"controller,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is virtual
	IsVirtual bool `json:"isVirtual,omitempty"`

	// message queue Url
	MessageQueueURL string `json:"messageQueueUrl,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// require client certificates
	RequireClientCertificates bool `json:"requireClientCertificates,omitempty"`

	// status
	// Enum: [online offline]
	Status interface{} `json:"status,omitempty"`

	// status changed date
	// Format: date-time
	StatusChangedDate strfmt.DateTime `json:"statusChangedDate,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this build server
func (m *BuildServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildServer) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildServer) validateController(formats strfmt.Registry) error {

	if swag.IsZero(m.Controller) { // not required
		return nil
	}

	if m.Controller != nil {
		if err := m.Controller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controller")
			}
			return err
		}
	}

	return nil
}

func (m *BuildServer) validateStatusChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("statusChangedDate", "body", "date-time", m.StatusChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildServer) UnmarshalBinary(b []byte) error {
	var res BuildServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
