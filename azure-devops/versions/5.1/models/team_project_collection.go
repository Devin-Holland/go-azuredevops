// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TeamProjectCollection Data contract for a TeamProjectCollection.
// swagger:model TeamProjectCollection
type TeamProjectCollection struct {
	TeamProjectCollectionReference

	// The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Project collection description.
	Description string `json:"description,omitempty"`

	// Process customzation type on this collection. It can be Xml or Inherited.
	// Enum: [xml inherited]
	ProcessCustomizationType interface{} `json:"processCustomizationType,omitempty"`

	// Project collection state.
	State string `json:"state,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TeamProjectCollection) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TeamProjectCollectionReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TeamProjectCollectionReference = aO0

	// now for regular properties
	var propsTeamProjectCollection struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`

		ProcessCustomizationType interface{} `json:"processCustomizationType,omitempty"`

		State string `json:"state,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTeamProjectCollection); err != nil {
		return err
	}
	m.Links = propsTeamProjectCollection.Links

	m.Description = propsTeamProjectCollection.Description

	m.ProcessCustomizationType = propsTeamProjectCollection.ProcessCustomizationType

	m.State = propsTeamProjectCollection.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TeamProjectCollection) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TeamProjectCollectionReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTeamProjectCollection struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`

		ProcessCustomizationType interface{} `json:"processCustomizationType,omitempty"`

		State string `json:"state,omitempty"`
	}
	propsTeamProjectCollection.Links = m.Links

	propsTeamProjectCollection.Description = m.Description

	propsTeamProjectCollection.ProcessCustomizationType = m.ProcessCustomizationType

	propsTeamProjectCollection.State = m.State

	jsonDataPropsTeamProjectCollection, errTeamProjectCollection := swag.WriteJSON(propsTeamProjectCollection)
	if errTeamProjectCollection != nil {
		return nil, errTeamProjectCollection
	}
	_parts = append(_parts, jsonDataPropsTeamProjectCollection)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this team project collection
func (m *TeamProjectCollection) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TeamProjectCollectionReference
	if err := m.TeamProjectCollectionReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamProjectCollection) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamProjectCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamProjectCollection) UnmarshalBinary(b []byte) error {
	var res TeamProjectCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
