// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestSuiteReferenceWithProject Test Suite Reference with Project
// swagger:model TestSuiteReferenceWithProject
type TestSuiteReferenceWithProject struct {
	TestSuiteReference

	// Refernce of destination Project
	Project *TeamProjectReference `json:"project,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestSuiteReferenceWithProject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestSuiteReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestSuiteReference = aO0

	// now for regular properties
	var propsTestSuiteReferenceWithProject struct {
		Project *TeamProjectReference `json:"project,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestSuiteReferenceWithProject); err != nil {
		return err
	}
	m.Project = propsTestSuiteReferenceWithProject.Project

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestSuiteReferenceWithProject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestSuiteReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestSuiteReferenceWithProject struct {
		Project *TeamProjectReference `json:"project,omitempty"`
	}
	propsTestSuiteReferenceWithProject.Project = m.Project

	jsonDataPropsTestSuiteReferenceWithProject, errTestSuiteReferenceWithProject := swag.WriteJSON(propsTestSuiteReferenceWithProject)
	if errTestSuiteReferenceWithProject != nil {
		return nil, errTestSuiteReferenceWithProject
	}
	_parts = append(_parts, jsonDataPropsTestSuiteReferenceWithProject)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test suite reference with project
func (m *TestSuiteReferenceWithProject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestSuiteReference
	if err := m.TestSuiteReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSuiteReferenceWithProject) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSuiteReferenceWithProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSuiteReferenceWithProject) UnmarshalBinary(b []byte) error {
	var res TestSuiteReferenceWithProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
