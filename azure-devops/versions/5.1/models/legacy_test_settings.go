// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LegacyTestSettings legacy test settings
// swagger:model LegacyTestSettings
type LegacyTestSettings struct {

	// area Id
	AreaID int32 `json:"areaId,omitempty"`

	// area path
	AreaPath string `json:"areaPath,omitempty"`

	// created by
	// Format: uuid
	CreatedBy strfmt.UUID `json:"createdBy,omitempty"`

	// created by name
	CreatedByName string `json:"createdByName,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is automated
	IsAutomated bool `json:"isAutomated,omitempty"`

	// is public
	IsPublic bool `json:"isPublic,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// last updated by
	// Format: uuid
	LastUpdatedBy strfmt.UUID `json:"lastUpdatedBy,omitempty"`

	// last updated by name
	LastUpdatedByName string `json:"lastUpdatedByName,omitempty"`

	// machine roles
	MachineRoles []*TestSettingsMachineRole `json:"machineRoles"`

	// name
	Name string `json:"name,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// settings
	Settings string `json:"settings,omitempty"`

	// team project Uri
	TeamProjectURI string `json:"teamProjectUri,omitempty"`
}

// Validate validates this legacy test settings
func (m *LegacyTestSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LegacyTestSettings) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBy", "body", "uuid", m.CreatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LegacyTestSettings) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LegacyTestSettings) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LegacyTestSettings) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedBy", "body", "uuid", m.LastUpdatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LegacyTestSettings) validateMachineRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineRoles); i++ {
		if swag.IsZero(m.MachineRoles[i]) { // not required
			continue
		}

		if m.MachineRoles[i] != nil {
			if err := m.MachineRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machineRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LegacyTestSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LegacyTestSettings) UnmarshalBinary(b []byte) error {
	var res LegacyTestSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
