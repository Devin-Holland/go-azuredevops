// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CloneTestPlanParams Parameters for Test Plan clone operation
// swagger:model CloneTestPlanParams
type CloneTestPlanParams struct {

	// Test Plan Clone create parameters
	CloneOptions *CloneOptions `json:"cloneOptions,omitempty"`

	// Information about destination Test Plan
	DestinationTestPlan *DestinationTestPlanCloneParams `json:"destinationTestPlan,omitempty"`

	// Information about source Test Plan
	SourceTestPlan *SourceTestPlanInfo `json:"sourceTestPlan,omitempty"`
}

// Validate validates this clone test plan params
func (m *CloneTestPlanParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloneOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationTestPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceTestPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneTestPlanParams) validateCloneOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.CloneOptions) { // not required
		return nil
	}

	if m.CloneOptions != nil {
		if err := m.CloneOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CloneTestPlanParams) validateDestinationTestPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationTestPlan) { // not required
		return nil
	}

	if m.DestinationTestPlan != nil {
		if err := m.DestinationTestPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationTestPlan")
			}
			return err
		}
	}

	return nil
}

func (m *CloneTestPlanParams) validateSourceTestPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceTestPlan) { // not required
		return nil
	}

	if m.SourceTestPlan != nil {
		if err := m.SourceTestPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceTestPlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneTestPlanParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneTestPlanParams) UnmarshalBinary(b []byte) error {
	var res CloneTestPlanParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
