// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BatchResponse batch response
// swagger:model BatchResponse
type BatchResponse struct {

	// error
	Error string `json:"error,omitempty"`

	// responses
	Responses []*Response `json:"responses"`

	// status
	// Enum: [continue switchingProtocols ok created accepted nonAuthoritativeInformation noContent resetContent partialContent multipleChoices ambiguous movedPermanently moved found redirect seeOther redirectMethod notModified useProxy unused temporaryRedirect redirectKeepVerb badRequest unauthorized paymentRequired forbidden notFound methodNotAllowed notAcceptable proxyAuthenticationRequired requestTimeout conflict gone lengthRequired preconditionFailed requestEntityTooLarge requestUriTooLong unsupportedMediaType requestedRangeNotSatisfiable expectationFailed upgradeRequired internalServerError notImplemented badGateway serviceUnavailable gatewayTimeout httpVersionNotSupported]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this batch response
func (m *BatchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchResponse) validateResponses(formats strfmt.Registry) error {

	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	for i := 0; i < len(m.Responses); i++ {
		if swag.IsZero(m.Responses[i]) { // not required
			continue
		}

		if m.Responses[i] != nil {
			if err := m.Responses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchResponse) UnmarshalBinary(b []byte) error {
	var res BatchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
