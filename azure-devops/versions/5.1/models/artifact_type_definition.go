// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ArtifactTypeDefinition artifact type definition
// swagger:model ArtifactTypeDefinition
type ArtifactTypeDefinition struct {

	// Gets or sets the artifact trigger configuration of artifact type defintion.
	ArtifactTriggerConfiguration *ArtifactTriggerConfiguration `json:"artifactTriggerConfiguration,omitempty"`

	// Gets or sets the artifact type of artifact type defintion. Valid values are 'Build', 'Package', 'Source' or 'ContainerImage'.
	ArtifactType string `json:"artifactType,omitempty"`

	// Gets or sets the display name of artifact type defintion.
	DisplayName string `json:"displayName,omitempty"`

	// Gets or sets the endpoint type id of artifact type defintion.
	EndpointTypeID string `json:"endpointTypeId,omitempty"`

	// Gets or sets the input descriptors of artifact type defintion.
	InputDescriptors []*InputDescriptor `json:"inputDescriptors"`

	// Gets or sets the name of artifact type defintion.
	Name string `json:"name,omitempty"`

	// Gets or sets the unique source identifier of artifact type defintion.
	UniqueSourceIdentifier string `json:"uniqueSourceIdentifier,omitempty"`
}

// Validate validates this artifact type definition
func (m *ArtifactTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactTriggerConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactTypeDefinition) validateArtifactTriggerConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactTriggerConfiguration) { // not required
		return nil
	}

	if m.ArtifactTriggerConfiguration != nil {
		if err := m.ArtifactTriggerConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactTriggerConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ArtifactTypeDefinition) validateInputDescriptors(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDescriptors); i++ {
		if swag.IsZero(m.InputDescriptors[i]) { // not required
			continue
		}

		if m.InputDescriptors[i] != nil {
			if err := m.InputDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactTypeDefinition) UnmarshalBinary(b []byte) error {
	var res ArtifactTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
