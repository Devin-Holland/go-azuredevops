// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamSettingsIteration Represents a shallow ref for a single iteration.
// swagger:model TeamSettingsIteration
type TeamSettingsIteration struct {
	TeamSettingsDataContractBase

	// Attributes of the iteration such as start and end date.
	Attributes *TeamIterationAttributes `json:"attributes,omitempty"`

	// Id of the iteration.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Name of the iteration.
	Name string `json:"name,omitempty"`

	// Relative path of the iteration.
	Path string `json:"path,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TeamSettingsIteration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TeamSettingsDataContractBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TeamSettingsDataContractBase = aO0

	// now for regular properties
	var propsTeamSettingsIteration struct {
		Attributes *TeamIterationAttributes `json:"attributes,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		Path string `json:"path,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTeamSettingsIteration); err != nil {
		return err
	}
	m.Attributes = propsTeamSettingsIteration.Attributes

	m.ID = propsTeamSettingsIteration.ID

	m.Name = propsTeamSettingsIteration.Name

	m.Path = propsTeamSettingsIteration.Path

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TeamSettingsIteration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TeamSettingsDataContractBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTeamSettingsIteration struct {
		Attributes *TeamIterationAttributes `json:"attributes,omitempty"`

		ID strfmt.UUID `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		Path string `json:"path,omitempty"`
	}
	propsTeamSettingsIteration.Attributes = m.Attributes

	propsTeamSettingsIteration.ID = m.ID

	propsTeamSettingsIteration.Name = m.Name

	propsTeamSettingsIteration.Path = m.Path

	jsonDataPropsTeamSettingsIteration, errTeamSettingsIteration := swag.WriteJSON(propsTeamSettingsIteration)
	if errTeamSettingsIteration != nil {
		return nil, errTeamSettingsIteration
	}
	_parts = append(_parts, jsonDataPropsTeamSettingsIteration)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this team settings iteration
func (m *TeamSettingsIteration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TeamSettingsDataContractBase
	if err := m.TeamSettingsDataContractBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamSettingsIteration) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *TeamSettingsIteration) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamSettingsIteration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamSettingsIteration) UnmarshalBinary(b []byte) error {
	var res TeamSettingsIteration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
