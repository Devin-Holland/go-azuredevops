// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WikiUpdatedNotificationMessage wiki updated notification message
// swagger:model WikiUpdatedNotificationMessage
type WikiUpdatedNotificationMessage struct {

	// Collection host Id for which the wikis are updated.
	// Format: uuid
	CollectionID strfmt.UUID `json:"collectionId,omitempty"`

	// Project Id for which the wikis are updated.
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// Repository Id associated with the particular wiki which is added, updated or deleted.
	// Format: uuid
	RepositoryID strfmt.UUID `json:"repositoryId,omitempty"`
}

// Validate validates this wiki updated notification message
func (m *WikiUpdatedNotificationMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WikiUpdatedNotificationMessage) validateCollectionID(formats strfmt.Registry) error {

	if swag.IsZero(m.CollectionID) { // not required
		return nil
	}

	if err := validate.FormatOf("collectionId", "body", "uuid", m.CollectionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WikiUpdatedNotificationMessage) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WikiUpdatedNotificationMessage) validateRepositoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.RepositoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("repositoryId", "body", "uuid", m.RepositoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WikiUpdatedNotificationMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WikiUpdatedNotificationMessage) UnmarshalBinary(b []byte) error {
	var res WikiUpdatedNotificationMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
