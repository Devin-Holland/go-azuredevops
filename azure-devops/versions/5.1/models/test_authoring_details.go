// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestAuthoringDetails test authoring details
// swagger:model TestAuthoringDetails
type TestAuthoringDetails struct {

	// configuration Id
	ConfigurationID int32 `json:"configurationId,omitempty"`

	// is automated
	IsAutomated bool `json:"isAutomated,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// point Id
	PointID int32 `json:"pointId,omitempty"`

	// priority
	// Format: byte
	Priority strfmt.Base64 `json:"priority,omitempty"`

	// run by
	// Format: uuid
	RunBy strfmt.UUID `json:"runBy,omitempty"`

	// state
	// Enum: [none ready completed notReady inProgress maxValue]
	State interface{} `json:"state,omitempty"`

	// suite Id
	SuiteID int32 `json:"suiteId,omitempty"`

	// tester Id
	// Format: uuid
	TesterID strfmt.UUID `json:"testerId,omitempty"`
}

// Validate validates this test authoring details
func (m *TestAuthoringDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTesterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestAuthoringDetails) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestAuthoringDetails) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestAuthoringDetails) validateRunBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RunBy) { // not required
		return nil
	}

	if err := validate.FormatOf("runBy", "body", "uuid", m.RunBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestAuthoringDetails) validateTesterID(formats strfmt.Registry) error {

	if swag.IsZero(m.TesterID) { // not required
		return nil
	}

	if err := validate.FormatOf("testerId", "body", "uuid", m.TesterID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestAuthoringDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestAuthoringDetails) UnmarshalBinary(b []byte) error {
	var res TestAuthoringDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
