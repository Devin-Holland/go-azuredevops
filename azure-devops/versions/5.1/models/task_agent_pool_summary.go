// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskAgentPoolSummary task agent pool summary
// swagger:model TaskAgentPoolSummary
type TaskAgentPoolSummary struct {

	// columns header
	ColumnsHeader *MetricsColumnsHeader `json:"columnsHeader,omitempty"`

	// deployment groups
	DeploymentGroups []*DeploymentGroupReference `json:"deploymentGroups"`

	// pool
	Pool *TaskAgentPoolReference `json:"pool,omitempty"`

	// queues
	Queues []*TaskAgentQueue `json:"queues"`

	// rows
	Rows []*MetricsRow `json:"rows"`
}

// Validate validates this task agent pool summary
func (m *TaskAgentPoolSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnsHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentPoolSummary) validateColumnsHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.ColumnsHeader) { // not required
		return nil
	}

	if m.ColumnsHeader != nil {
		if err := m.ColumnsHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("columnsHeader")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPoolSummary) validateDeploymentGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentGroups); i++ {
		if swag.IsZero(m.DeploymentGroups[i]) { // not required
			continue
		}

		if m.DeploymentGroups[i] != nil {
			if err := m.DeploymentGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deploymentGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskAgentPoolSummary) validatePool(formats strfmt.Registry) error {

	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentPoolSummary) validateQueues(formats strfmt.Registry) error {

	if swag.IsZero(m.Queues) { // not required
		return nil
	}

	for i := 0; i < len(m.Queues); i++ {
		if swag.IsZero(m.Queues[i]) { // not required
			continue
		}

		if m.Queues[i] != nil {
			if err := m.Queues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskAgentPoolSummary) validateRows(formats strfmt.Registry) error {

	if swag.IsZero(m.Rows) { // not required
		return nil
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentPoolSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentPoolSummary) UnmarshalBinary(b []byte) error {
	var res TaskAgentPoolSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
