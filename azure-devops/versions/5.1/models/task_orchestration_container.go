// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskOrchestrationContainer task orchestration container
// swagger:model TaskOrchestrationContainer
type TaskOrchestrationContainer struct {
	TaskOrchestrationItem

	// children
	Children []*TaskOrchestrationItem `json:"children"`

	// continue on error
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// data
	Data map[string]string `json:"data,omitempty"`

	// max concurrency
	MaxConcurrency int32 `json:"maxConcurrency,omitempty"`

	// parallel
	Parallel bool `json:"parallel,omitempty"`

	// rollback
	Rollback *TaskOrchestrationContainer `json:"rollback,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskOrchestrationContainer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskOrchestrationItem
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskOrchestrationItem = aO0

	// now for regular properties
	var propsTaskOrchestrationContainer struct {
		Children []*TaskOrchestrationItem `json:"children"`

		ContinueOnError bool `json:"continueOnError,omitempty"`

		Data map[string]string `json:"data,omitempty"`

		MaxConcurrency int32 `json:"maxConcurrency,omitempty"`

		Parallel bool `json:"parallel,omitempty"`

		Rollback *TaskOrchestrationContainer `json:"rollback,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskOrchestrationContainer); err != nil {
		return err
	}
	m.Children = propsTaskOrchestrationContainer.Children

	m.ContinueOnError = propsTaskOrchestrationContainer.ContinueOnError

	m.Data = propsTaskOrchestrationContainer.Data

	m.MaxConcurrency = propsTaskOrchestrationContainer.MaxConcurrency

	m.Parallel = propsTaskOrchestrationContainer.Parallel

	m.Rollback = propsTaskOrchestrationContainer.Rollback

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskOrchestrationContainer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskOrchestrationItem)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskOrchestrationContainer struct {
		Children []*TaskOrchestrationItem `json:"children"`

		ContinueOnError bool `json:"continueOnError,omitempty"`

		Data map[string]string `json:"data,omitempty"`

		MaxConcurrency int32 `json:"maxConcurrency,omitempty"`

		Parallel bool `json:"parallel,omitempty"`

		Rollback *TaskOrchestrationContainer `json:"rollback,omitempty"`
	}
	propsTaskOrchestrationContainer.Children = m.Children

	propsTaskOrchestrationContainer.ContinueOnError = m.ContinueOnError

	propsTaskOrchestrationContainer.Data = m.Data

	propsTaskOrchestrationContainer.MaxConcurrency = m.MaxConcurrency

	propsTaskOrchestrationContainer.Parallel = m.Parallel

	propsTaskOrchestrationContainer.Rollback = m.Rollback

	jsonDataPropsTaskOrchestrationContainer, errTaskOrchestrationContainer := swag.WriteJSON(propsTaskOrchestrationContainer)
	if errTaskOrchestrationContainer != nil {
		return nil, errTaskOrchestrationContainer
	}
	_parts = append(_parts, jsonDataPropsTaskOrchestrationContainer)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task orchestration container
func (m *TaskOrchestrationContainer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskOrchestrationItem
	if err := m.TaskOrchestrationItem.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollback(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskOrchestrationContainer) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskOrchestrationContainer) validateRollback(formats strfmt.Registry) error {

	if swag.IsZero(m.Rollback) { // not required
		return nil
	}

	if m.Rollback != nil {
		if err := m.Rollback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollback")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskOrchestrationContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskOrchestrationContainer) UnmarshalBinary(b []byte) error {
	var res TaskOrchestrationContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
