// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CardFieldSettings Card settings, such as fields and rules
// swagger:model CardFieldSettings
type CardFieldSettings struct {

	// A collection of field information of additional fields on cards. The index in the collection signifies the order of the field among the additional fields. Currently unused. Should be used with User Story 691539: Card setting: additional fields
	AdditionalFields []*FieldInfo `json:"additionalFields"`

	// Display format for the assigned to field
	// Enum: [avatarOnly fullName avatarAndFullName]
	AssignedToDisplayFormat interface{} `json:"assignedToDisplayFormat,omitempty"`

	// A collection of field information of rendered core fields on cards.
	CoreFields []*FieldInfo `json:"coreFields"`

	// Flag indicating whether to show assigned to field on cards. When true, AssignedToDisplayFormat will determine how the field will be displayed
	ShowAssignedTo bool `json:"showAssignedTo,omitempty"`

	// Flag indicating whether to show empty fields on cards
	ShowEmptyFields bool `json:"showEmptyFields,omitempty"`

	// Flag indicating whether to show ID on cards
	ShowID bool `json:"showId,omitempty"`

	// Flag indicating whether to show state field on cards
	ShowState bool `json:"showState,omitempty"`

	// Flag indicating whether to show tags on cards
	ShowTags bool `json:"showTags,omitempty"`
}

// Validate validates this card field settings
func (m *CardFieldSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoreFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardFieldSettings) validateAdditionalFields(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalFields) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalFields); i++ {
		if swag.IsZero(m.AdditionalFields[i]) { // not required
			continue
		}

		if m.AdditionalFields[i] != nil {
			if err := m.AdditionalFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CardFieldSettings) validateCoreFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CoreFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CoreFields); i++ {
		if swag.IsZero(m.CoreFields[i]) { // not required
			continue
		}

		if m.CoreFields[i] != nil {
			if err := m.CoreFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coreFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardFieldSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardFieldSettings) UnmarshalBinary(b []byte) error {
	var res CardFieldSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
