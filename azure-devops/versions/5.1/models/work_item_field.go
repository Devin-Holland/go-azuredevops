// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemField Describes a field on a work item and it's properties specific to that work item type.
// swagger:model WorkItemField
type WorkItemField struct {
	WorkItemTrackingResource

	// Indicates whether the field is sortable in server queries.
	CanSortBy bool `json:"canSortBy,omitempty"`

	// The description of the field.
	Description string `json:"description,omitempty"`

	// Indicates whether this field is an identity field.
	IsIdentity bool `json:"isIdentity,omitempty"`

	// Indicates whether this instance is picklist.
	IsPicklist bool `json:"isPicklist,omitempty"`

	// Indicates whether this instance is a suggested picklist .
	IsPicklistSuggested bool `json:"isPicklistSuggested,omitempty"`

	// Indicates whether the field can be queried in the server.
	IsQueryable bool `json:"isQueryable,omitempty"`

	// The name of the field.
	Name string `json:"name,omitempty"`

	// If this field is picklist, the identifier of the picklist associated, otherwise null
	// Format: uuid
	PicklistID strfmt.UUID `json:"picklistId,omitempty"`

	// Indicates whether the field is [read only].
	ReadOnly bool `json:"readOnly,omitempty"`

	// The reference name of the field.
	ReferenceName string `json:"referenceName,omitempty"`

	// The supported operations on this field.
	SupportedOperations []*WorkItemFieldOperation `json:"supportedOperations"`

	// The type of the field.
	// Enum: [string integer dateTime plainText html treePath history double guid boolean identity picklistString picklistInteger picklistDouble]
	Type interface{} `json:"type,omitempty"`

	// The usage of the field.
	// Enum: [none workItem workItemLink tree workItemTypeExtension]
	Usage interface{} `json:"usage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemField) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemField struct {
		CanSortBy bool `json:"canSortBy,omitempty"`

		Description string `json:"description,omitempty"`

		IsIdentity bool `json:"isIdentity,omitempty"`

		IsPicklist bool `json:"isPicklist,omitempty"`

		IsPicklistSuggested bool `json:"isPicklistSuggested,omitempty"`

		IsQueryable bool `json:"isQueryable,omitempty"`

		Name string `json:"name,omitempty"`

		PicklistID strfmt.UUID `json:"picklistId,omitempty"`

		ReadOnly bool `json:"readOnly,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		SupportedOperations []*WorkItemFieldOperation `json:"supportedOperations"`

		Type interface{} `json:"type,omitempty"`

		Usage interface{} `json:"usage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemField); err != nil {
		return err
	}
	m.CanSortBy = propsWorkItemField.CanSortBy

	m.Description = propsWorkItemField.Description

	m.IsIdentity = propsWorkItemField.IsIdentity

	m.IsPicklist = propsWorkItemField.IsPicklist

	m.IsPicklistSuggested = propsWorkItemField.IsPicklistSuggested

	m.IsQueryable = propsWorkItemField.IsQueryable

	m.Name = propsWorkItemField.Name

	m.PicklistID = propsWorkItemField.PicklistID

	m.ReadOnly = propsWorkItemField.ReadOnly

	m.ReferenceName = propsWorkItemField.ReferenceName

	m.SupportedOperations = propsWorkItemField.SupportedOperations

	m.Type = propsWorkItemField.Type

	m.Usage = propsWorkItemField.Usage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemField) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemField struct {
		CanSortBy bool `json:"canSortBy,omitempty"`

		Description string `json:"description,omitempty"`

		IsIdentity bool `json:"isIdentity,omitempty"`

		IsPicklist bool `json:"isPicklist,omitempty"`

		IsPicklistSuggested bool `json:"isPicklistSuggested,omitempty"`

		IsQueryable bool `json:"isQueryable,omitempty"`

		Name string `json:"name,omitempty"`

		PicklistID strfmt.UUID `json:"picklistId,omitempty"`

		ReadOnly bool `json:"readOnly,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		SupportedOperations []*WorkItemFieldOperation `json:"supportedOperations"`

		Type interface{} `json:"type,omitempty"`

		Usage interface{} `json:"usage,omitempty"`
	}
	propsWorkItemField.CanSortBy = m.CanSortBy

	propsWorkItemField.Description = m.Description

	propsWorkItemField.IsIdentity = m.IsIdentity

	propsWorkItemField.IsPicklist = m.IsPicklist

	propsWorkItemField.IsPicklistSuggested = m.IsPicklistSuggested

	propsWorkItemField.IsQueryable = m.IsQueryable

	propsWorkItemField.Name = m.Name

	propsWorkItemField.PicklistID = m.PicklistID

	propsWorkItemField.ReadOnly = m.ReadOnly

	propsWorkItemField.ReferenceName = m.ReferenceName

	propsWorkItemField.SupportedOperations = m.SupportedOperations

	propsWorkItemField.Type = m.Type

	propsWorkItemField.Usage = m.Usage

	jsonDataPropsWorkItemField, errWorkItemField := swag.WriteJSON(propsWorkItemField)
	if errWorkItemField != nil {
		return nil, errWorkItemField
	}
	_parts = append(_parts, jsonDataPropsWorkItemField)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item field
func (m *WorkItemField) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePicklistID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemField) validatePicklistID(formats strfmt.Registry) error {

	if swag.IsZero(m.PicklistID) { // not required
		return nil
	}

	if err := validate.FormatOf("picklistId", "body", "uuid", m.PicklistID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkItemField) validateSupportedOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedOperations) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedOperations); i++ {
		if swag.IsZero(m.SupportedOperations[i]) { // not required
			continue
		}

		if m.SupportedOperations[i] != nil {
			if err := m.SupportedOperations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedOperations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemField) UnmarshalBinary(b []byte) error {
	var res WorkItemField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
