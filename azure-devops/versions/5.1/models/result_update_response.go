// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultUpdateResponse result update response
// swagger:model ResultUpdateResponse
type ResultUpdateResponse struct {

	// attachment ids
	AttachmentIds []int32 `json:"attachmentIds"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// last updated by
	// Format: uuid
	LastUpdatedBy strfmt.UUID `json:"lastUpdatedBy,omitempty"`

	// last updated by name
	LastUpdatedByName string `json:"lastUpdatedByName,omitempty"`

	// max reserved sub result Id
	MaxReservedSubResultID int32 `json:"maxReservedSubResultId,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// test plan Id
	TestPlanID int32 `json:"testPlanId,omitempty"`

	// test result Id
	TestResultID int32 `json:"testResultId,omitempty"`
}

// Validate validates this result update response
func (m *ResultUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultUpdateResponse) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResultUpdateResponse) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedBy", "body", "uuid", m.LastUpdatedBy.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultUpdateResponse) UnmarshalBinary(b []byte) error {
	var res ResultUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
