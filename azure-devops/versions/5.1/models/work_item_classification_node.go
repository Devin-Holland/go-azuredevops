// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemClassificationNode Defines a classification node for work item tracking.
// swagger:model WorkItemClassificationNode
type WorkItemClassificationNode struct {
	WorkItemTrackingResource

	// Dictionary that has node attributes like start/finish date for iteration nodes.
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// List of child nodes fetched.
	Children []*WorkItemClassificationNode `json:"children"`

	// Flag that indicates if the classification node has any child nodes.
	HasChildren bool `json:"hasChildren,omitempty"`

	// Integer ID of the classification node.
	ID int32 `json:"id,omitempty"`

	// GUID ID of the classification node.
	// Format: uuid
	Identifier strfmt.UUID `json:"identifier,omitempty"`

	// Name of the classification node.
	Name string `json:"name,omitempty"`

	// Path of the classification node.
	Path string `json:"path,omitempty"`

	// Node structure type.
	// Enum: [area iteration]
	StructureType interface{} `json:"structureType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemClassificationNode) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemClassificationNode struct {
		Attributes map[string]interface{} `json:"attributes,omitempty"`

		Children []*WorkItemClassificationNode `json:"children"`

		HasChildren bool `json:"hasChildren,omitempty"`

		ID int32 `json:"id,omitempty"`

		Identifier strfmt.UUID `json:"identifier,omitempty"`

		Name string `json:"name,omitempty"`

		Path string `json:"path,omitempty"`

		StructureType interface{} `json:"structureType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemClassificationNode); err != nil {
		return err
	}
	m.Attributes = propsWorkItemClassificationNode.Attributes

	m.Children = propsWorkItemClassificationNode.Children

	m.HasChildren = propsWorkItemClassificationNode.HasChildren

	m.ID = propsWorkItemClassificationNode.ID

	m.Identifier = propsWorkItemClassificationNode.Identifier

	m.Name = propsWorkItemClassificationNode.Name

	m.Path = propsWorkItemClassificationNode.Path

	m.StructureType = propsWorkItemClassificationNode.StructureType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemClassificationNode) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemClassificationNode struct {
		Attributes map[string]interface{} `json:"attributes,omitempty"`

		Children []*WorkItemClassificationNode `json:"children"`

		HasChildren bool `json:"hasChildren,omitempty"`

		ID int32 `json:"id,omitempty"`

		Identifier strfmt.UUID `json:"identifier,omitempty"`

		Name string `json:"name,omitempty"`

		Path string `json:"path,omitempty"`

		StructureType interface{} `json:"structureType,omitempty"`
	}
	propsWorkItemClassificationNode.Attributes = m.Attributes

	propsWorkItemClassificationNode.Children = m.Children

	propsWorkItemClassificationNode.HasChildren = m.HasChildren

	propsWorkItemClassificationNode.ID = m.ID

	propsWorkItemClassificationNode.Identifier = m.Identifier

	propsWorkItemClassificationNode.Name = m.Name

	propsWorkItemClassificationNode.Path = m.Path

	propsWorkItemClassificationNode.StructureType = m.StructureType

	jsonDataPropsWorkItemClassificationNode, errWorkItemClassificationNode := swag.WriteJSON(propsWorkItemClassificationNode)
	if errWorkItemClassificationNode != nil {
		return nil, errWorkItemClassificationNode
	}
	_parts = append(_parts, jsonDataPropsWorkItemClassificationNode)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item classification node
func (m *WorkItemClassificationNode) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemClassificationNode) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemClassificationNode) validateIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if err := validate.FormatOf("identifier", "body", "uuid", m.Identifier.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemClassificationNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemClassificationNode) UnmarshalBinary(b []byte) error {
	var res WorkItemClassificationNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
