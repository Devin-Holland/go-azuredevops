// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentSession Represents a session for performing message exchanges from an agent.
// swagger:model TaskAgentSession
type TaskAgentSession struct {

	// Gets or sets the agent which is the target of the session.
	Agent *TaskAgentReference `json:"agent,omitempty"`

	// Gets the key used to encrypt message traffic for this session.
	EncryptionKey *TaskAgentSessionKey `json:"encryptionKey,omitempty"`

	// Gets or sets the owner name of this session. Generally this will be the machine of origination.
	OwnerName string `json:"ownerName,omitempty"`

	// Gets the unique identifier for this session.
	// Format: uuid
	SessionID strfmt.UUID `json:"sessionId,omitempty"`

	// system capabilities
	SystemCapabilities map[string]string `json:"systemCapabilities,omitempty"`
}

// Validate validates this task agent session
func (m *TaskAgentSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentSession) validateAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentSession) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionKey) { // not required
		return nil
	}

	if m.EncryptionKey != nil {
		if err := m.EncryptionKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionKey")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentSession) validateSessionID(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionID) { // not required
		return nil
	}

	if err := validate.FormatOf("sessionId", "body", "uuid", m.SessionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentSession) UnmarshalBinary(b []byte) error {
	var res TaskAgentSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
