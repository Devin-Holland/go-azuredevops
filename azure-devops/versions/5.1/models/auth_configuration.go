// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthConfiguration auth configuration
// swagger:model AuthConfiguration
type AuthConfiguration struct {
	OAuthConfiguration

	// Gets or sets parameters contained in configuration object.
	Parameters map[string]Parameter `json:"parameters,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AuthConfiguration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 OAuthConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.OAuthConfiguration = aO0

	// now for regular properties
	var propsAuthConfiguration struct {
		Parameters map[string]Parameter `json:"parameters,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsAuthConfiguration); err != nil {
		return err
	}
	m.Parameters = propsAuthConfiguration.Parameters

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AuthConfiguration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.OAuthConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAuthConfiguration struct {
		Parameters map[string]Parameter `json:"parameters,omitempty"`
	}
	propsAuthConfiguration.Parameters = m.Parameters

	jsonDataPropsAuthConfiguration, errAuthConfiguration := swag.WriteJSON(propsAuthConfiguration)
	if errAuthConfiguration != nil {
		return nil, errAuthConfiguration
	}
	_parts = append(_parts, jsonDataPropsAuthConfiguration)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this auth configuration
func (m *AuthConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with OAuthConfiguration
	if err := m.OAuthConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthConfiguration) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for k := range m.Parameters {

		if err := validate.Required("parameters"+"."+k, "body", m.Parameters[k]); err != nil {
			return err
		}
		if val, ok := m.Parameters[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthConfiguration) UnmarshalBinary(b []byte) error {
	var res AuthConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
