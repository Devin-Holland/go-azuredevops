// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServerTarget Represents a phase target that runs on the server.
// swagger:model ServerTarget
type ServerTarget struct {
	PhaseTarget

	// The execution options.
	ExecutionOptions *ServerTargetExecutionOptions `json:"executionOptions,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ServerTarget) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PhaseTarget
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PhaseTarget = aO0

	// now for regular properties
	var propsServerTarget struct {
		ExecutionOptions *ServerTargetExecutionOptions `json:"executionOptions,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsServerTarget); err != nil {
		return err
	}
	m.ExecutionOptions = propsServerTarget.ExecutionOptions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ServerTarget) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PhaseTarget)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsServerTarget struct {
		ExecutionOptions *ServerTargetExecutionOptions `json:"executionOptions,omitempty"`
	}
	propsServerTarget.ExecutionOptions = m.ExecutionOptions

	jsonDataPropsServerTarget, errServerTarget := swag.WriteJSON(propsServerTarget)
	if errServerTarget != nil {
		return nil, errServerTarget
	}
	_parts = append(_parts, jsonDataPropsServerTarget)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this server target
func (m *ServerTarget) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PhaseTarget
	if err := m.PhaseTarget.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerTarget) validateExecutionOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionOptions) { // not required
		return nil
	}

	if m.ExecutionOptions != nil {
		if err := m.ExecutionOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executionOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerTarget) UnmarshalBinary(b []byte) error {
	var res ServerTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
