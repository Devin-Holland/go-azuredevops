// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MavenPomMetadata maven pom metadata
// swagger:model MavenPomMetadata
type MavenPomMetadata struct {
	MavenPomGav

	// build
	Build *MavenPomBuild `json:"build,omitempty"`

	// ci management
	CiManagement *MavenPomCi `json:"ciManagement,omitempty"`

	// contributors
	Contributors []*MavenPomPerson `json:"contributors"`

	// dependencies
	Dependencies []*MavenPomDependency `json:"dependencies"`

	// dependency management
	DependencyManagement *MavenPomDependencyManagement `json:"dependencyManagement,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// developers
	Developers []*MavenPomPerson `json:"developers"`

	// distribution management
	DistributionManagement *MavenDistributionManagement `json:"distributionManagement,omitempty"`

	// inception year
	InceptionYear string `json:"inceptionYear,omitempty"`

	// issue management
	IssueManagement *MavenPomIssueManagement `json:"issueManagement,omitempty"`

	// licenses
	Licenses []*MavenPomLicense `json:"licenses"`

	// mailing lists
	MailingLists []*MavenPomMailingList `json:"mailingLists"`

	// model version
	ModelVersion string `json:"modelVersion,omitempty"`

	// modules
	Modules []string `json:"modules"`

	// name
	Name string `json:"name,omitempty"`

	// organization
	Organization *MavenPomOrganization `json:"organization,omitempty"`

	// packaging
	Packaging string `json:"packaging,omitempty"`

	// parent
	Parent *MavenPomParent `json:"parent,omitempty"`

	// prerequisites
	Prerequisites map[string]string `json:"prerequisites,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// scm
	Scm *MavenPomScm `json:"scm,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MavenPomMetadata) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MavenPomGav
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MavenPomGav = aO0

	// now for regular properties
	var propsMavenPomMetadata struct {
		Build *MavenPomBuild `json:"build,omitempty"`

		CiManagement *MavenPomCi `json:"ciManagement,omitempty"`

		Contributors []*MavenPomPerson `json:"contributors"`

		Dependencies []*MavenPomDependency `json:"dependencies"`

		DependencyManagement *MavenPomDependencyManagement `json:"dependencyManagement,omitempty"`

		Description string `json:"description,omitempty"`

		Developers []*MavenPomPerson `json:"developers"`

		DistributionManagement *MavenDistributionManagement `json:"distributionManagement,omitempty"`

		InceptionYear string `json:"inceptionYear,omitempty"`

		IssueManagement *MavenPomIssueManagement `json:"issueManagement,omitempty"`

		Licenses []*MavenPomLicense `json:"licenses"`

		MailingLists []*MavenPomMailingList `json:"mailingLists"`

		ModelVersion string `json:"modelVersion,omitempty"`

		Modules []string `json:"modules"`

		Name string `json:"name,omitempty"`

		Organization *MavenPomOrganization `json:"organization,omitempty"`

		Packaging string `json:"packaging,omitempty"`

		Parent *MavenPomParent `json:"parent,omitempty"`

		Prerequisites map[string]string `json:"prerequisites,omitempty"`

		Properties map[string]string `json:"properties,omitempty"`

		Scm *MavenPomScm `json:"scm,omitempty"`

		URL string `json:"url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsMavenPomMetadata); err != nil {
		return err
	}
	m.Build = propsMavenPomMetadata.Build

	m.CiManagement = propsMavenPomMetadata.CiManagement

	m.Contributors = propsMavenPomMetadata.Contributors

	m.Dependencies = propsMavenPomMetadata.Dependencies

	m.DependencyManagement = propsMavenPomMetadata.DependencyManagement

	m.Description = propsMavenPomMetadata.Description

	m.Developers = propsMavenPomMetadata.Developers

	m.DistributionManagement = propsMavenPomMetadata.DistributionManagement

	m.InceptionYear = propsMavenPomMetadata.InceptionYear

	m.IssueManagement = propsMavenPomMetadata.IssueManagement

	m.Licenses = propsMavenPomMetadata.Licenses

	m.MailingLists = propsMavenPomMetadata.MailingLists

	m.ModelVersion = propsMavenPomMetadata.ModelVersion

	m.Modules = propsMavenPomMetadata.Modules

	m.Name = propsMavenPomMetadata.Name

	m.Organization = propsMavenPomMetadata.Organization

	m.Packaging = propsMavenPomMetadata.Packaging

	m.Parent = propsMavenPomMetadata.Parent

	m.Prerequisites = propsMavenPomMetadata.Prerequisites

	m.Properties = propsMavenPomMetadata.Properties

	m.Scm = propsMavenPomMetadata.Scm

	m.URL = propsMavenPomMetadata.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MavenPomMetadata) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.MavenPomGav)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsMavenPomMetadata struct {
		Build *MavenPomBuild `json:"build,omitempty"`

		CiManagement *MavenPomCi `json:"ciManagement,omitempty"`

		Contributors []*MavenPomPerson `json:"contributors"`

		Dependencies []*MavenPomDependency `json:"dependencies"`

		DependencyManagement *MavenPomDependencyManagement `json:"dependencyManagement,omitempty"`

		Description string `json:"description,omitempty"`

		Developers []*MavenPomPerson `json:"developers"`

		DistributionManagement *MavenDistributionManagement `json:"distributionManagement,omitempty"`

		InceptionYear string `json:"inceptionYear,omitempty"`

		IssueManagement *MavenPomIssueManagement `json:"issueManagement,omitempty"`

		Licenses []*MavenPomLicense `json:"licenses"`

		MailingLists []*MavenPomMailingList `json:"mailingLists"`

		ModelVersion string `json:"modelVersion,omitempty"`

		Modules []string `json:"modules"`

		Name string `json:"name,omitempty"`

		Organization *MavenPomOrganization `json:"organization,omitempty"`

		Packaging string `json:"packaging,omitempty"`

		Parent *MavenPomParent `json:"parent,omitempty"`

		Prerequisites map[string]string `json:"prerequisites,omitempty"`

		Properties map[string]string `json:"properties,omitempty"`

		Scm *MavenPomScm `json:"scm,omitempty"`

		URL string `json:"url,omitempty"`
	}
	propsMavenPomMetadata.Build = m.Build

	propsMavenPomMetadata.CiManagement = m.CiManagement

	propsMavenPomMetadata.Contributors = m.Contributors

	propsMavenPomMetadata.Dependencies = m.Dependencies

	propsMavenPomMetadata.DependencyManagement = m.DependencyManagement

	propsMavenPomMetadata.Description = m.Description

	propsMavenPomMetadata.Developers = m.Developers

	propsMavenPomMetadata.DistributionManagement = m.DistributionManagement

	propsMavenPomMetadata.InceptionYear = m.InceptionYear

	propsMavenPomMetadata.IssueManagement = m.IssueManagement

	propsMavenPomMetadata.Licenses = m.Licenses

	propsMavenPomMetadata.MailingLists = m.MailingLists

	propsMavenPomMetadata.ModelVersion = m.ModelVersion

	propsMavenPomMetadata.Modules = m.Modules

	propsMavenPomMetadata.Name = m.Name

	propsMavenPomMetadata.Organization = m.Organization

	propsMavenPomMetadata.Packaging = m.Packaging

	propsMavenPomMetadata.Parent = m.Parent

	propsMavenPomMetadata.Prerequisites = m.Prerequisites

	propsMavenPomMetadata.Properties = m.Properties

	propsMavenPomMetadata.Scm = m.Scm

	propsMavenPomMetadata.URL = m.URL

	jsonDataPropsMavenPomMetadata, errMavenPomMetadata := swag.WriteJSON(propsMavenPomMetadata)
	if errMavenPomMetadata != nil {
		return nil, errMavenPomMetadata
	}
	_parts = append(_parts, jsonDataPropsMavenPomMetadata)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this maven pom metadata
func (m *MavenPomMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MavenPomGav
	if err := m.MavenPomGav.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContributors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencyManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevelopers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributionManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailingLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MavenPomMetadata) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateCiManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.CiManagement) { // not required
		return nil
	}

	if m.CiManagement != nil {
		if err := m.CiManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciManagement")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateContributors(formats strfmt.Registry) error {

	if swag.IsZero(m.Contributors) { // not required
		return nil
	}

	for i := 0; i < len(m.Contributors); i++ {
		if swag.IsZero(m.Contributors[i]) { // not required
			continue
		}

		if m.Contributors[i] != nil {
			if err := m.Contributors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MavenPomMetadata) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MavenPomMetadata) validateDependencyManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.DependencyManagement) { // not required
		return nil
	}

	if m.DependencyManagement != nil {
		if err := m.DependencyManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencyManagement")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateDevelopers(formats strfmt.Registry) error {

	if swag.IsZero(m.Developers) { // not required
		return nil
	}

	for i := 0; i < len(m.Developers); i++ {
		if swag.IsZero(m.Developers[i]) { // not required
			continue
		}

		if m.Developers[i] != nil {
			if err := m.Developers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("developers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MavenPomMetadata) validateDistributionManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.DistributionManagement) { // not required
		return nil
	}

	if m.DistributionManagement != nil {
		if err := m.DistributionManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionManagement")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateIssueManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueManagement) { // not required
		return nil
	}

	if m.IssueManagement != nil {
		if err := m.IssueManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueManagement")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateLicenses(formats strfmt.Registry) error {

	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MavenPomMetadata) validateMailingLists(formats strfmt.Registry) error {

	if swag.IsZero(m.MailingLists) { // not required
		return nil
	}

	for i := 0; i < len(m.MailingLists); i++ {
		if swag.IsZero(m.MailingLists[i]) { // not required
			continue
		}

		if m.MailingLists[i] != nil {
			if err := m.MailingLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mailingLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MavenPomMetadata) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *MavenPomMetadata) validateScm(formats strfmt.Registry) error {

	if swag.IsZero(m.Scm) { // not required
		return nil
	}

	if m.Scm != nil {
		if err := m.Scm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MavenPomMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MavenPomMetadata) UnmarshalBinary(b []byte) error {
	var res MavenPomMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
