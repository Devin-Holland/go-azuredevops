// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckTemplateExistenceResult Describes result of a check template existence request.
// swagger:model CheckTemplateExistenceResult
type CheckTemplateExistenceResult struct {

	// Indicates whether a template exists.
	DoesTemplateExist bool `json:"doesTemplateExist,omitempty"`

	// The name of the existing template.
	ExistingTemplateName string `json:"existingTemplateName,omitempty"`

	// The existing template type identifier.
	// Format: uuid
	ExistingTemplateTypeID strfmt.UUID `json:"existingTemplateTypeId,omitempty"`

	// The name of the requested template.
	RequestedTemplateName string `json:"requestedTemplateName,omitempty"`
}

// Validate validates this check template existence result
func (m *CheckTemplateExistenceResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExistingTemplateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckTemplateExistenceResult) validateExistingTemplateTypeID(formats strfmt.Registry) error {

	if swag.IsZero(m.ExistingTemplateTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("existingTemplateTypeId", "body", "uuid", m.ExistingTemplateTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckTemplateExistenceResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckTemplateExistenceResult) UnmarshalBinary(b []byte) error {
	var res CheckTemplateExistenceResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
