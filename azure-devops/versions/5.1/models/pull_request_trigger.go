// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PullRequestTrigger pull request trigger
// swagger:model PullRequestTrigger
type PullRequestTrigger struct {
	ReleaseTriggerBase

	// Artifact alias trigger is linked to.
	ArtifactAlias string `json:"artifactAlias,omitempty"`

	// Code reference details of pull request.
	PullRequestConfiguration *PullRequestConfiguration `json:"pullRequestConfiguration,omitempty"`

	// Policy name using which status will be published to pull request.
	StatusPolicyName string `json:"statusPolicyName,omitempty"`

	// List of filters applied while trigger.
	TriggerConditions []*PullRequestFilter `json:"triggerConditions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PullRequestTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseTriggerBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseTriggerBase = aO0

	// now for regular properties
	var propsPullRequestTrigger struct {
		ArtifactAlias string `json:"artifactAlias,omitempty"`

		PullRequestConfiguration *PullRequestConfiguration `json:"pullRequestConfiguration,omitempty"`

		StatusPolicyName string `json:"statusPolicyName,omitempty"`

		TriggerConditions []*PullRequestFilter `json:"triggerConditions"`
	}
	if err := swag.ReadJSON(raw, &propsPullRequestTrigger); err != nil {
		return err
	}
	m.ArtifactAlias = propsPullRequestTrigger.ArtifactAlias

	m.PullRequestConfiguration = propsPullRequestTrigger.PullRequestConfiguration

	m.StatusPolicyName = propsPullRequestTrigger.StatusPolicyName

	m.TriggerConditions = propsPullRequestTrigger.TriggerConditions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PullRequestTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseTriggerBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsPullRequestTrigger struct {
		ArtifactAlias string `json:"artifactAlias,omitempty"`

		PullRequestConfiguration *PullRequestConfiguration `json:"pullRequestConfiguration,omitempty"`

		StatusPolicyName string `json:"statusPolicyName,omitempty"`

		TriggerConditions []*PullRequestFilter `json:"triggerConditions"`
	}
	propsPullRequestTrigger.ArtifactAlias = m.ArtifactAlias

	propsPullRequestTrigger.PullRequestConfiguration = m.PullRequestConfiguration

	propsPullRequestTrigger.StatusPolicyName = m.StatusPolicyName

	propsPullRequestTrigger.TriggerConditions = m.TriggerConditions

	jsonDataPropsPullRequestTrigger, errPullRequestTrigger := swag.WriteJSON(propsPullRequestTrigger)
	if errPullRequestTrigger != nil {
		return nil, errPullRequestTrigger
	}
	_parts = append(_parts, jsonDataPropsPullRequestTrigger)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pull request trigger
func (m *PullRequestTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseTriggerBase
	if err := m.ReleaseTriggerBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequestConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestTrigger) validatePullRequestConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.PullRequestConfiguration) { // not required
		return nil
	}

	if m.PullRequestConfiguration != nil {
		if err := m.PullRequestConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequestConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PullRequestTrigger) validateTriggerConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerConditions); i++ {
		if swag.IsZero(m.TriggerConditions[i]) { // not required
			continue
		}

		if m.TriggerConditions[i] != nil {
			if err := m.TriggerConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullRequestTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullRequestTrigger) UnmarshalBinary(b []byte) error {
	var res PullRequestTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
