// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskDefinition task definition
// swagger:model TaskDefinition
type TaskDefinition struct {

	// agent execution
	AgentExecution *TaskExecution `json:"agentExecution,omitempty"`

	// author
	Author string `json:"author,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// contents uploaded
	ContentsUploaded bool `json:"contentsUploaded,omitempty"`

	// contribution identifier
	ContributionIdentifier string `json:"contributionIdentifier,omitempty"`

	// contribution version
	ContributionVersion string `json:"contributionVersion,omitempty"`

	// data source bindings
	DataSourceBindings []*DataSourceBinding `json:"dataSourceBindings"`

	// definition type
	DefinitionType string `json:"definitionType,omitempty"`

	// demands
	Demands []*Demand `json:"demands"`

	// deprecated
	Deprecated bool `json:"deprecated,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// execution
	Execution map[string]JObject `json:"execution,omitempty"`

	// friendly name
	FriendlyName string `json:"friendlyName,omitempty"`

	// groups
	Groups []*TaskGroupDefinition `json:"groups"`

	// help mark down
	HelpMarkDown string `json:"helpMarkDown,omitempty"`

	// help Url
	HelpURL string `json:"helpUrl,omitempty"`

	// host type
	HostType string `json:"hostType,omitempty"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// inputs
	Inputs []*TaskInputDefinition `json:"inputs"`

	// instance name format
	InstanceNameFormat string `json:"instanceNameFormat,omitempty"`

	// minimum agent version
	MinimumAgentVersion string `json:"minimumAgentVersion,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// output variables
	OutputVariables []*TaskOutputVariable `json:"outputVariables"`

	// package location
	PackageLocation string `json:"packageLocation,omitempty"`

	// package type
	PackageType string `json:"packageType,omitempty"`

	// post job execution
	PostJobExecution map[string]JObject `json:"postJobExecution,omitempty"`

	// pre job execution
	PreJobExecution map[string]JObject `json:"preJobExecution,omitempty"`

	// preview
	Preview bool `json:"preview,omitempty"`

	// release notes
	ReleaseNotes string `json:"releaseNotes,omitempty"`

	// runs on
	RunsOn []string `json:"runsOn"`

	// satisfies
	Satisfies []string `json:"satisfies"`

	// server owned
	ServerOwned bool `json:"serverOwned,omitempty"`

	// show environment variables
	ShowEnvironmentVariables bool `json:"showEnvironmentVariables,omitempty"`

	// source definitions
	SourceDefinitions []*TaskSourceDefinition `json:"sourceDefinitions"`

	// source location
	SourceLocation string `json:"sourceLocation,omitempty"`

	// version
	Version *TaskVersion `json:"version,omitempty"`

	// visibility
	Visibility []string `json:"visibility"`
}

// Validate validates this task definition
func (m *TaskDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostJobExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreJobExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskDefinition) validateAgentExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentExecution) { // not required
		return nil
	}

	if m.AgentExecution != nil {
		if err := m.AgentExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentExecution")
			}
			return err
		}
	}

	return nil
}

func (m *TaskDefinition) validateDataSourceBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSourceBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSourceBindings); i++ {
		if swag.IsZero(m.DataSourceBindings[i]) { // not required
			continue
		}

		if m.DataSourceBindings[i] != nil {
			if err := m.DataSourceBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataSourceBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateDemands(formats strfmt.Registry) error {

	if swag.IsZero(m.Demands) { // not required
		return nil
	}

	for i := 0; i < len(m.Demands); i++ {
		if swag.IsZero(m.Demands[i]) { // not required
			continue
		}

		if m.Demands[i] != nil {
			if err := m.Demands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("demands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.Execution) { // not required
		return nil
	}

	for k := range m.Execution {

		if err := validate.Required("execution"+"."+k, "body", m.Execution[k]); err != nil {
			return err
		}
		if val, ok := m.Execution[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskDefinition) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateOutputVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputVariables) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputVariables); i++ {
		if swag.IsZero(m.OutputVariables[i]) { // not required
			continue
		}

		if m.OutputVariables[i] != nil {
			if err := m.OutputVariables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validatePostJobExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.PostJobExecution) { // not required
		return nil
	}

	for k := range m.PostJobExecution {

		if err := validate.Required("postJobExecution"+"."+k, "body", m.PostJobExecution[k]); err != nil {
			return err
		}
		if val, ok := m.PostJobExecution[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validatePreJobExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.PreJobExecution) { // not required
		return nil
	}

	for k := range m.PreJobExecution {

		if err := validate.Required("preJobExecution"+"."+k, "body", m.PreJobExecution[k]); err != nil {
			return err
		}
		if val, ok := m.PreJobExecution[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateSourceDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceDefinitions) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceDefinitions); i++ {
		if swag.IsZero(m.SourceDefinitions[i]) { // not required
			continue
		}

		if m.SourceDefinitions[i] != nil {
			if err := m.SourceDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceDefinitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDefinition) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskDefinition) UnmarshalBinary(b []byte) error {
	var res TaskDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
