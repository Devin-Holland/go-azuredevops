// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestPlan The test plan resource.
// swagger:model TestPlan
type TestPlan struct {
	TestPlanUpdateParams

	// Relevant links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// ID of the test plan.
	ID int32 `json:"id,omitempty"`

	// Previous build Id assocaited with the test plan
	PreviousBuildID int32 `json:"previousBuildId,omitempty"`

	// Project which contains the test plan.
	Project *TeamProjectReference `json:"project,omitempty"`

	// Root test suite of the test plan.
	RootSuite *TestSuiteReference `json:"rootSuite,omitempty"`

	// Identity Reference for the last update of the test plan
	UpdatedBy *IdentityRef `json:"updatedBy,omitempty"`

	// Updated date of the test plan
	// Format: date-time
	UpdatedDate strfmt.DateTime `json:"updatedDate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestPlan) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestPlanUpdateParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestPlanUpdateParams = aO0

	// now for regular properties
	var propsTestPlan struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		ID int32 `json:"id,omitempty"`

		PreviousBuildID int32 `json:"previousBuildId,omitempty"`

		Project *TeamProjectReference `json:"project,omitempty"`

		RootSuite *TestSuiteReference `json:"rootSuite,omitempty"`

		UpdatedBy *IdentityRef `json:"updatedBy,omitempty"`

		UpdatedDate strfmt.DateTime `json:"updatedDate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestPlan); err != nil {
		return err
	}
	m.Links = propsTestPlan.Links

	m.ID = propsTestPlan.ID

	m.PreviousBuildID = propsTestPlan.PreviousBuildID

	m.Project = propsTestPlan.Project

	m.RootSuite = propsTestPlan.RootSuite

	m.UpdatedBy = propsTestPlan.UpdatedBy

	m.UpdatedDate = propsTestPlan.UpdatedDate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestPlan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestPlanUpdateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestPlan struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		ID int32 `json:"id,omitempty"`

		PreviousBuildID int32 `json:"previousBuildId,omitempty"`

		Project *TeamProjectReference `json:"project,omitempty"`

		RootSuite *TestSuiteReference `json:"rootSuite,omitempty"`

		UpdatedBy *IdentityRef `json:"updatedBy,omitempty"`

		UpdatedDate strfmt.DateTime `json:"updatedDate,omitempty"`
	}
	propsTestPlan.Links = m.Links

	propsTestPlan.ID = m.ID

	propsTestPlan.PreviousBuildID = m.PreviousBuildID

	propsTestPlan.Project = m.Project

	propsTestPlan.RootSuite = m.RootSuite

	propsTestPlan.UpdatedBy = m.UpdatedBy

	propsTestPlan.UpdatedDate = m.UpdatedDate

	jsonDataPropsTestPlan, errTestPlan := swag.WriteJSON(propsTestPlan)
	if errTestPlan != nil {
		return nil, errTestPlan
	}
	_parts = append(_parts, jsonDataPropsTestPlan)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test plan
func (m *TestPlan) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestPlanUpdateParams
	if err := m.TestPlanUpdateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootSuite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlan) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlan) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlan) validateRootSuite(formats strfmt.Registry) error {

	if swag.IsZero(m.RootSuite) { // not required
		return nil
	}

	if m.RootSuite != nil {
		if err := m.RootSuite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootSuite")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlan) validateUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlan) validateUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedDate", "body", "date-time", m.UpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPlan) UnmarshalBinary(b []byte) error {
	var res TestPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
