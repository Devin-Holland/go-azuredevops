// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildCompletedEvent build completed event
// swagger:model BuildCompletedEvent
type BuildCompletedEvent struct {
	BuildUpdatedEvent

	// Changes associated with a build used for build notifications
	Changes []*Change `json:"changes"`

	// Pull request for the build used for build notifications
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Test results associated with a build used for build notifications
	TestResults *AggregatedResultsAnalysis `json:"testResults,omitempty"`

	// Timeline records associated with a build used for build notifications
	TimelineRecords []*TimelineRecord `json:"timelineRecords"`

	// Work items associated with a build used for build notifications
	WorkItems []*AssociatedWorkItem `json:"workItems"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BuildCompletedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BuildUpdatedEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BuildUpdatedEvent = aO0

	// now for regular properties
	var propsBuildCompletedEvent struct {
		Changes []*Change `json:"changes"`

		PullRequest *PullRequest `json:"pullRequest,omitempty"`

		TestResults *AggregatedResultsAnalysis `json:"testResults,omitempty"`

		TimelineRecords []*TimelineRecord `json:"timelineRecords"`

		WorkItems []*AssociatedWorkItem `json:"workItems"`
	}
	if err := swag.ReadJSON(raw, &propsBuildCompletedEvent); err != nil {
		return err
	}
	m.Changes = propsBuildCompletedEvent.Changes

	m.PullRequest = propsBuildCompletedEvent.PullRequest

	m.TestResults = propsBuildCompletedEvent.TestResults

	m.TimelineRecords = propsBuildCompletedEvent.TimelineRecords

	m.WorkItems = propsBuildCompletedEvent.WorkItems

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BuildCompletedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BuildUpdatedEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBuildCompletedEvent struct {
		Changes []*Change `json:"changes"`

		PullRequest *PullRequest `json:"pullRequest,omitempty"`

		TestResults *AggregatedResultsAnalysis `json:"testResults,omitempty"`

		TimelineRecords []*TimelineRecord `json:"timelineRecords"`

		WorkItems []*AssociatedWorkItem `json:"workItems"`
	}
	propsBuildCompletedEvent.Changes = m.Changes

	propsBuildCompletedEvent.PullRequest = m.PullRequest

	propsBuildCompletedEvent.TestResults = m.TestResults

	propsBuildCompletedEvent.TimelineRecords = m.TimelineRecords

	propsBuildCompletedEvent.WorkItems = m.WorkItems

	jsonDataPropsBuildCompletedEvent, errBuildCompletedEvent := swag.WriteJSON(propsBuildCompletedEvent)
	if errBuildCompletedEvent != nil {
		return nil, errBuildCompletedEvent
	}
	_parts = append(_parts, jsonDataPropsBuildCompletedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this build completed event
func (m *BuildCompletedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BuildUpdatedEvent
	if err := m.BuildUpdatedEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildCompletedEvent) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildCompletedEvent) validatePullRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.PullRequest) { // not required
		return nil
	}

	if m.PullRequest != nil {
		if err := m.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequest")
			}
			return err
		}
	}

	return nil
}

func (m *BuildCompletedEvent) validateTestResults(formats strfmt.Registry) error {

	if swag.IsZero(m.TestResults) { // not required
		return nil
	}

	if m.TestResults != nil {
		if err := m.TestResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testResults")
			}
			return err
		}
	}

	return nil
}

func (m *BuildCompletedEvent) validateTimelineRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineRecords) { // not required
		return nil
	}

	for i := 0; i < len(m.TimelineRecords); i++ {
		if swag.IsZero(m.TimelineRecords[i]) { // not required
			continue
		}

		if m.TimelineRecords[i] != nil {
			if err := m.TimelineRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timelineRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildCompletedEvent) validateWorkItems(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItems) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItems); i++ {
		if swag.IsZero(m.WorkItems[i]) { // not required
			continue
		}

		if m.WorkItems[i] != nil {
			if err := m.WorkItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildCompletedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildCompletedEvent) UnmarshalBinary(b []byte) error {
	var res BuildCompletedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
