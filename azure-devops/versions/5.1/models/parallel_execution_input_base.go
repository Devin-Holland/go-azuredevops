// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ParallelExecutionInputBase parallel execution input base
// swagger:model ParallelExecutionInputBase
type ParallelExecutionInputBase struct {
	ExecutionInput

	// Indicate whether continue execution of deployment on error or not.
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// Maximum number of agents used while parallel execution.
	MaxNumberOfAgents int32 `json:"maxNumberOfAgents,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ParallelExecutionInputBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ExecutionInput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ExecutionInput = aO0

	// now for regular properties
	var propsParallelExecutionInputBase struct {
		ContinueOnError bool `json:"continueOnError,omitempty"`

		MaxNumberOfAgents int32 `json:"maxNumberOfAgents,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsParallelExecutionInputBase); err != nil {
		return err
	}
	m.ContinueOnError = propsParallelExecutionInputBase.ContinueOnError

	m.MaxNumberOfAgents = propsParallelExecutionInputBase.MaxNumberOfAgents

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ParallelExecutionInputBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ExecutionInput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsParallelExecutionInputBase struct {
		ContinueOnError bool `json:"continueOnError,omitempty"`

		MaxNumberOfAgents int32 `json:"maxNumberOfAgents,omitempty"`
	}
	propsParallelExecutionInputBase.ContinueOnError = m.ContinueOnError

	propsParallelExecutionInputBase.MaxNumberOfAgents = m.MaxNumberOfAgents

	jsonDataPropsParallelExecutionInputBase, errParallelExecutionInputBase := swag.WriteJSON(propsParallelExecutionInputBase)
	if errParallelExecutionInputBase != nil {
		return nil, errParallelExecutionInputBase
	}
	_parts = append(_parts, jsonDataPropsParallelExecutionInputBase)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this parallel execution input base
func (m *ParallelExecutionInputBase) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ExecutionInput
	if err := m.ExecutionInput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ParallelExecutionInputBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParallelExecutionInputBase) UnmarshalBinary(b []byte) error {
	var res ParallelExecutionInputBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
