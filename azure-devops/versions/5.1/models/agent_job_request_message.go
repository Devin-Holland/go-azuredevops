// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentJobRequestMessage agent job request message
// swagger:model AgentJobRequestMessage
type AgentJobRequestMessage struct {
	JobRequestMessage

	// lock token
	// Format: uuid
	LockToken strfmt.UUID `json:"lockToken,omitempty"`

	// locked until
	// Format: date-time
	LockedUntil strfmt.DateTime `json:"lockedUntil,omitempty"`

	// request Id
	RequestID int64 `json:"requestId,omitempty"`

	// tasks
	Tasks []*TaskInstance `json:"tasks"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AgentJobRequestMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobRequestMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobRequestMessage = aO0

	// now for regular properties
	var propsAgentJobRequestMessage struct {
		LockToken strfmt.UUID `json:"lockToken,omitempty"`

		LockedUntil strfmt.DateTime `json:"lockedUntil,omitempty"`

		RequestID int64 `json:"requestId,omitempty"`

		Tasks []*TaskInstance `json:"tasks"`
	}
	if err := swag.ReadJSON(raw, &propsAgentJobRequestMessage); err != nil {
		return err
	}
	m.LockToken = propsAgentJobRequestMessage.LockToken

	m.LockedUntil = propsAgentJobRequestMessage.LockedUntil

	m.RequestID = propsAgentJobRequestMessage.RequestID

	m.Tasks = propsAgentJobRequestMessage.Tasks

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AgentJobRequestMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.JobRequestMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAgentJobRequestMessage struct {
		LockToken strfmt.UUID `json:"lockToken,omitempty"`

		LockedUntil strfmt.DateTime `json:"lockedUntil,omitempty"`

		RequestID int64 `json:"requestId,omitempty"`

		Tasks []*TaskInstance `json:"tasks"`
	}
	propsAgentJobRequestMessage.LockToken = m.LockToken

	propsAgentJobRequestMessage.LockedUntil = m.LockedUntil

	propsAgentJobRequestMessage.RequestID = m.RequestID

	propsAgentJobRequestMessage.Tasks = m.Tasks

	jsonDataPropsAgentJobRequestMessage, errAgentJobRequestMessage := swag.WriteJSON(propsAgentJobRequestMessage)
	if errAgentJobRequestMessage != nil {
		return nil, errAgentJobRequestMessage
	}
	_parts = append(_parts, jsonDataPropsAgentJobRequestMessage)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this agent job request message
func (m *AgentJobRequestMessage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobRequestMessage
	if err := m.JobRequestMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentJobRequestMessage) validateLockToken(formats strfmt.Registry) error {

	if swag.IsZero(m.LockToken) { // not required
		return nil
	}

	if err := validate.FormatOf("lockToken", "body", "uuid", m.LockToken.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgentJobRequestMessage) validateLockedUntil(formats strfmt.Registry) error {

	if swag.IsZero(m.LockedUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("lockedUntil", "body", "date-time", m.LockedUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgentJobRequestMessage) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentJobRequestMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentJobRequestMessage) UnmarshalBinary(b []byte) error {
	var res AgentJobRequestMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
