// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRunBasic test run basic
// swagger:model TestRunBasic
type TestRunBasic struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// deleted by
	DeletedBy string `json:"deletedBy,omitempty"`

	// deleted date
	// Format: date-time
	DeletedDate strfmt.DateTime `json:"deletedDate,omitempty"`

	// finished date
	// Format: date-time
	FinishedDate strfmt.DateTime `json:"finishedDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// load generation geo locations
	LoadGenerationGeoLocations []*LoadGenerationGeoLocation `json:"loadGenerationGeoLocations"`

	// load test file name
	LoadTestFileName string `json:"loadTestFileName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// run number
	RunNumber int32 `json:"runNumber,omitempty"`

	// run source
	RunSource string `json:"runSource,omitempty"`

	// run specific details
	RunSpecificDetails *LoadTestRunDetails `json:"runSpecificDetails,omitempty"`

	// run type
	// Enum: [visualStudioLoadTest jMeterLoadTest]
	RunType interface{} `json:"runType,omitempty"`

	// state
	// Enum: [pending queued inProgress stopping completed aborted error]
	State interface{} `json:"state,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this test run basic
func (m *TestRunBasic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadGenerationGeoLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSpecificDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunBasic) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRunBasic) validateDeletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedDate", "body", "date-time", m.DeletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRunBasic) validateFinishedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("finishedDate", "body", "date-time", m.FinishedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRunBasic) validateLoadGenerationGeoLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadGenerationGeoLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadGenerationGeoLocations); i++ {
		if swag.IsZero(m.LoadGenerationGeoLocations[i]) { // not required
			continue
		}

		if m.LoadGenerationGeoLocations[i] != nil {
			if err := m.LoadGenerationGeoLocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loadGenerationGeoLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestRunBasic) validateRunSpecificDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSpecificDetails) { // not required
		return nil
	}

	if m.RunSpecificDetails != nil {
		if err := m.RunSpecificDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runSpecificDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestRunBasic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRunBasic) UnmarshalBinary(b []byte) error {
	var res TestRunBasic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
