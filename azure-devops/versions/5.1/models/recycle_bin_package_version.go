// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecycleBinPackageVersion A single package version within the recycle bin.
// swagger:model RecycleBinPackageVersion
type RecycleBinPackageVersion struct {
	PackageVersion

	// UTC date on which the package will automatically be removed from the recycle bin and permanently deleted.
	// Format: date-time
	ScheduledPermanentDeleteDate strfmt.DateTime `json:"scheduledPermanentDeleteDate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecycleBinPackageVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PackageVersion
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PackageVersion = aO0

	// now for regular properties
	var propsRecycleBinPackageVersion struct {
		ScheduledPermanentDeleteDate strfmt.DateTime `json:"scheduledPermanentDeleteDate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRecycleBinPackageVersion); err != nil {
		return err
	}
	m.ScheduledPermanentDeleteDate = propsRecycleBinPackageVersion.ScheduledPermanentDeleteDate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecycleBinPackageVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PackageVersion)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRecycleBinPackageVersion struct {
		ScheduledPermanentDeleteDate strfmt.DateTime `json:"scheduledPermanentDeleteDate,omitempty"`
	}
	propsRecycleBinPackageVersion.ScheduledPermanentDeleteDate = m.ScheduledPermanentDeleteDate

	jsonDataPropsRecycleBinPackageVersion, errRecycleBinPackageVersion := swag.WriteJSON(propsRecycleBinPackageVersion)
	if errRecycleBinPackageVersion != nil {
		return nil, errRecycleBinPackageVersion
	}
	_parts = append(_parts, jsonDataPropsRecycleBinPackageVersion)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recycle bin package version
func (m *RecycleBinPackageVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PackageVersion
	if err := m.PackageVersion.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPermanentDeleteDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecycleBinPackageVersion) validateScheduledPermanentDeleteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledPermanentDeleteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledPermanentDeleteDate", "body", "date-time", m.ScheduledPermanentDeleteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecycleBinPackageVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecycleBinPackageVersion) UnmarshalBinary(b []byte) error {
	var res RecycleBinPackageVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
