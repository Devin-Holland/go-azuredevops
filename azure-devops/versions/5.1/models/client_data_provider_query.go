// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientDataProviderQuery A client data provider are the details needed to make the data provider request from the client.
// swagger:model ClientDataProviderQuery
type ClientDataProviderQuery struct {
	DataProviderQuery

	// The Id of the service instance type that should be communicated with in order to resolve the data providers from the client given the query values.
	// Format: uuid
	QueryServiceInstanceType strfmt.UUID `json:"queryServiceInstanceType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ClientDataProviderQuery) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DataProviderQuery
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DataProviderQuery = aO0

	// now for regular properties
	var propsClientDataProviderQuery struct {
		QueryServiceInstanceType strfmt.UUID `json:"queryServiceInstanceType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsClientDataProviderQuery); err != nil {
		return err
	}
	m.QueryServiceInstanceType = propsClientDataProviderQuery.QueryServiceInstanceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ClientDataProviderQuery) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DataProviderQuery)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsClientDataProviderQuery struct {
		QueryServiceInstanceType strfmt.UUID `json:"queryServiceInstanceType,omitempty"`
	}
	propsClientDataProviderQuery.QueryServiceInstanceType = m.QueryServiceInstanceType

	jsonDataPropsClientDataProviderQuery, errClientDataProviderQuery := swag.WriteJSON(propsClientDataProviderQuery)
	if errClientDataProviderQuery != nil {
		return nil, errClientDataProviderQuery
	}
	_parts = append(_parts, jsonDataPropsClientDataProviderQuery)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client data provider query
func (m *ClientDataProviderQuery) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DataProviderQuery
	if err := m.DataProviderQuery.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryServiceInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientDataProviderQuery) validateQueryServiceInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryServiceInstanceType) { // not required
		return nil
	}

	if err := validate.FormatOf("queryServiceInstanceType", "body", "uuid", m.QueryServiceInstanceType.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientDataProviderQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientDataProviderQuery) UnmarshalBinary(b []byte) error {
	var res ClientDataProviderQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
