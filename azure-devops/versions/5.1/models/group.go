// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Group Represent a group in the form that holds controls in it.
// swagger:model Group
type Group struct {

	// Contribution for the group.
	Contribution *WitContribution `json:"contribution,omitempty"`

	// Controls to be put in the group.
	Controls []*Control `json:"controls"`

	// The height for the contribution.
	Height int32 `json:"height,omitempty"`

	// The id for the layout node.
	ID string `json:"id,omitempty"`

	// A value indicating whether this layout node has been inherited from a parent layout.  This is expected to only be only set by the combiner.
	Inherited bool `json:"inherited,omitempty"`

	// A value indicating if the layout node is contribution are not.
	IsContribution bool `json:"isContribution,omitempty"`

	// Label for the group.
	Label string `json:"label,omitempty"`

	// Order in which the group should appear in the section.
	Order int32 `json:"order,omitempty"`

	// A value indicating whether this layout node has been overridden by a child layout.
	Overridden bool `json:"overridden,omitempty"`

	// A value indicating if the group should be hidden or not.
	Visible bool `json:"visible,omitempty"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateContribution(formats strfmt.Registry) error {

	if swag.IsZero(m.Contribution) { // not required
		return nil
	}

	if m.Contribution != nil {
		if err := m.Contribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

func (m *Group) validateControls(formats strfmt.Registry) error {

	if swag.IsZero(m.Controls) { // not required
		return nil
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
