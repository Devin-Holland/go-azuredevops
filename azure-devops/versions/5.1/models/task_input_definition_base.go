// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskInputDefinitionBase task input definition base
// swagger:model TaskInputDefinitionBase
type TaskInputDefinitionBase struct {

	// aliases
	Aliases []string `json:"aliases"`

	// default value
	DefaultValue string `json:"defaultValue,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// help mark down
	HelpMarkDown string `json:"helpMarkDown,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// options
	Options map[string]string `json:"options,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// required
	Required bool `json:"required,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// validation
	Validation *TaskInputValidation `json:"validation,omitempty"`

	// visible rule
	VisibleRule string `json:"visibleRule,omitempty"`
}

// Validate validates this task input definition base
func (m *TaskInputDefinitionBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskInputDefinitionBase) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.Validation) { // not required
		return nil
	}

	if m.Validation != nil {
		if err := m.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskInputDefinitionBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskInputDefinitionBase) UnmarshalBinary(b []byte) error {
	var res TaskInputDefinitionBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
