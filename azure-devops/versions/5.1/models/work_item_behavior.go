// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemBehavior work item behavior
// swagger:model WorkItemBehavior
type WorkItemBehavior struct {

	// abstract
	Abstract bool `json:"abstract,omitempty"`

	// color
	Color string `json:"color,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fields
	Fields []*WorkItemBehaviorField `json:"fields"`

	// id
	ID string `json:"id,omitempty"`

	// inherits
	Inherits *WorkItemBehaviorReference `json:"inherits,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// overriden
	Overriden bool `json:"overriden,omitempty"`

	// rank
	Rank int32 `json:"rank,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this work item behavior
func (m *WorkItemBehavior) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInherits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemBehavior) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemBehavior) validateInherits(formats strfmt.Registry) error {

	if swag.IsZero(m.Inherits) { // not required
		return nil
	}

	if m.Inherits != nil {
		if err := m.Inherits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inherits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemBehavior) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemBehavior) UnmarshalBinary(b []byte) error {
	var res WorkItemBehavior
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
