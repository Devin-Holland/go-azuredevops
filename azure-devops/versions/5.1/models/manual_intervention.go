// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManualIntervention manual intervention
// swagger:model ManualIntervention
type ManualIntervention struct {

	// Gets or sets the identity who should approve.
	Approver *IdentityRef `json:"approver,omitempty"`

	// Gets or sets comments for approval.
	Comments string `json:"comments,omitempty"`

	// Gets date on which it got created.
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// Gets the unique identifier for manual intervention.
	ID int32 `json:"id,omitempty"`

	// Gets or sets instructions for approval.
	Instructions string `json:"instructions,omitempty"`

	// Gets date on which it got modified.
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modifiedOn,omitempty"`

	// Gets or sets the name.
	Name string `json:"name,omitempty"`

	// Gets releaseReference for manual intervention.
	Release *ReleaseShallowReference `json:"release,omitempty"`

	// Gets releaseDefinitionReference for manual intervention.
	ReleaseDefinition *ReleaseDefinitionShallowReference `json:"releaseDefinition,omitempty"`

	// Gets releaseEnvironmentReference for manual intervention.
	ReleaseEnvironment *ReleaseEnvironmentShallowReference `json:"releaseEnvironment,omitempty"`

	// Gets or sets the status of the manual intervention.
	// Enum: [unknown pending rejected approved canceled]
	Status interface{} `json:"status,omitempty"`

	// Get task instance identifier.
	// Format: uuid
	TaskInstanceID strfmt.UUID `json:"taskInstanceId,omitempty"`

	// Gets url to access the manual intervention.
	URL string `json:"url,omitempty"`
}

// Validate validates this manual intervention
func (m *ManualIntervention) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManualIntervention) validateApprover(formats strfmt.Registry) error {

	if swag.IsZero(m.Approver) { // not required
		return nil
	}

	if m.Approver != nil {
		if err := m.Approver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approver")
			}
			return err
		}
	}

	return nil
}

func (m *ManualIntervention) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ManualIntervention) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ManualIntervention) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *ManualIntervention) validateReleaseDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDefinition) { // not required
		return nil
	}

	if m.ReleaseDefinition != nil {
		if err := m.ReleaseDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *ManualIntervention) validateReleaseEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEnvironment) { // not required
		return nil
	}

	if m.ReleaseEnvironment != nil {
		if err := m.ReleaseEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *ManualIntervention) validateTaskInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInstanceID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskInstanceId", "body", "uuid", m.TaskInstanceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManualIntervention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManualIntervention) UnmarshalBinary(b []byte) error {
	var res ManualIntervention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
