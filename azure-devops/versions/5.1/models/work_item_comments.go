// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemComments Collection of comments.
// swagger:model WorkItemComments
type WorkItemComments struct {
	WorkItemTrackingResource

	// Comments collection.
	Comments []*WorkItemComment `json:"comments"`

	// The count of comments.
	Count int32 `json:"count,omitempty"`

	// Count of comments from the revision.
	FromRevisionCount int32 `json:"fromRevisionCount,omitempty"`

	// Total count of comments.
	TotalCount int32 `json:"totalCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemComments) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemComments struct {
		Comments []*WorkItemComment `json:"comments"`

		Count int32 `json:"count,omitempty"`

		FromRevisionCount int32 `json:"fromRevisionCount,omitempty"`

		TotalCount int32 `json:"totalCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemComments); err != nil {
		return err
	}
	m.Comments = propsWorkItemComments.Comments

	m.Count = propsWorkItemComments.Count

	m.FromRevisionCount = propsWorkItemComments.FromRevisionCount

	m.TotalCount = propsWorkItemComments.TotalCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemComments) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemComments struct {
		Comments []*WorkItemComment `json:"comments"`

		Count int32 `json:"count,omitempty"`

		FromRevisionCount int32 `json:"fromRevisionCount,omitempty"`

		TotalCount int32 `json:"totalCount,omitempty"`
	}
	propsWorkItemComments.Comments = m.Comments

	propsWorkItemComments.Count = m.Count

	propsWorkItemComments.FromRevisionCount = m.FromRevisionCount

	propsWorkItemComments.TotalCount = m.TotalCount

	jsonDataPropsWorkItemComments, errWorkItemComments := swag.WriteJSON(propsWorkItemComments)
	if errWorkItemComments != nil {
		return nil, errWorkItemComments
	}
	_parts = append(_parts, jsonDataPropsWorkItemComments)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item comments
func (m *WorkItemComments) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemComments) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemComments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemComments) UnmarshalBinary(b []byte) error {
	var res WorkItemComments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
