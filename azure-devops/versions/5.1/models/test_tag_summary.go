// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestTagSummary Test tag summary for build or release grouped by test run.
// swagger:model TestTagSummary
type TestTagSummary struct {

	// Dictionary which contains tags associated with a test run.
	TagsGroupByTestArtifact map[string][]TestTag `json:"tagsGroupByTestArtifact,omitempty"`
}

// Validate validates this test tag summary
func (m *TestTagSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagsGroupByTestArtifact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestTagSummary) validateTagsGroupByTestArtifact(formats strfmt.Registry) error {

	if swag.IsZero(m.TagsGroupByTestArtifact) { // not required
		return nil
	}

	for k := range m.TagsGroupByTestArtifact {

		if err := validate.Required("tagsGroupByTestArtifact"+"."+k, "body", m.TagsGroupByTestArtifact[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.TagsGroupByTestArtifact[k]); i++ {

			if err := m.TagsGroupByTestArtifact[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsGroupByTestArtifact" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestTagSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestTagSummary) UnmarshalBinary(b []byte) error {
	var res TestTagSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
