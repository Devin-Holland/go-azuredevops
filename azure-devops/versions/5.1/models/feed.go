// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feed A container for artifacts.
// swagger:model Feed
type Feed struct {
	FeedCore

	// Related REST links.
	Links *ReferenceLinks `json:"_links,omitempty"`

	// If set, this feed supports generation of package badges.
	BadgesEnabled bool `json:"badgesEnabled,omitempty"`

	// The view that the feed administrator has indicated is the default experience for readers.
	// Format: uuid
	DefaultViewID strfmt.UUID `json:"defaultViewId,omitempty"`

	// The date that this feed was deleted.
	// Format: date-time
	DeletedDate strfmt.DateTime `json:"deletedDate,omitempty"`

	// A description for the feed.  Descriptions must not exceed 255 characters.
	Description string `json:"description,omitempty"`

	// If set, the feed will hide all deleted/unpublished versions
	HideDeletedPackageVersions bool `json:"hideDeletedPackageVersions,omitempty"`

	// Explicit permissions for the feed.
	Permissions []*FeedPermission `json:"permissions"`

	// If set, time that the UpstreamEnabled property was changed. Will be null if UpstreamEnabled was never changed after Feed creation.
	// Format: date-time
	UpstreamEnabledChangedDate strfmt.DateTime `json:"upstreamEnabledChangedDate,omitempty"`

	// The URL of the base feed in GUID form.
	URL string `json:"url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Feed) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FeedCore
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FeedCore = aO0

	// now for regular properties
	var propsFeed struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		BadgesEnabled bool `json:"badgesEnabled,omitempty"`

		DefaultViewID strfmt.UUID `json:"defaultViewId,omitempty"`

		DeletedDate strfmt.DateTime `json:"deletedDate,omitempty"`

		Description string `json:"description,omitempty"`

		HideDeletedPackageVersions bool `json:"hideDeletedPackageVersions,omitempty"`

		Permissions []*FeedPermission `json:"permissions"`

		UpstreamEnabledChangedDate strfmt.DateTime `json:"upstreamEnabledChangedDate,omitempty"`

		URL string `json:"url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsFeed); err != nil {
		return err
	}
	m.Links = propsFeed.Links

	m.BadgesEnabled = propsFeed.BadgesEnabled

	m.DefaultViewID = propsFeed.DefaultViewID

	m.DeletedDate = propsFeed.DeletedDate

	m.Description = propsFeed.Description

	m.HideDeletedPackageVersions = propsFeed.HideDeletedPackageVersions

	m.Permissions = propsFeed.Permissions

	m.UpstreamEnabledChangedDate = propsFeed.UpstreamEnabledChangedDate

	m.URL = propsFeed.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Feed) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.FeedCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsFeed struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		BadgesEnabled bool `json:"badgesEnabled,omitempty"`

		DefaultViewID strfmt.UUID `json:"defaultViewId,omitempty"`

		DeletedDate strfmt.DateTime `json:"deletedDate,omitempty"`

		Description string `json:"description,omitempty"`

		HideDeletedPackageVersions bool `json:"hideDeletedPackageVersions,omitempty"`

		Permissions []*FeedPermission `json:"permissions"`

		UpstreamEnabledChangedDate strfmt.DateTime `json:"upstreamEnabledChangedDate,omitempty"`

		URL string `json:"url,omitempty"`
	}
	propsFeed.Links = m.Links

	propsFeed.BadgesEnabled = m.BadgesEnabled

	propsFeed.DefaultViewID = m.DefaultViewID

	propsFeed.DeletedDate = m.DeletedDate

	propsFeed.Description = m.Description

	propsFeed.HideDeletedPackageVersions = m.HideDeletedPackageVersions

	propsFeed.Permissions = m.Permissions

	propsFeed.UpstreamEnabledChangedDate = m.UpstreamEnabledChangedDate

	propsFeed.URL = m.URL

	jsonDataPropsFeed, errFeed := swag.WriteJSON(propsFeed)
	if errFeed != nil {
		return nil, errFeed
	}
	_parts = append(_parts, jsonDataPropsFeed)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this feed
func (m *Feed) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FeedCore
	if err := m.FeedCore.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultViewID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamEnabledChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feed) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Feed) validateDefaultViewID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultViewID) { // not required
		return nil
	}

	if err := validate.FormatOf("defaultViewId", "body", "uuid", m.DefaultViewID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateDeletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedDate", "body", "date-time", m.DeletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feed) validateUpstreamEnabledChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.UpstreamEnabledChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("upstreamEnabledChangedDate", "body", "date-time", m.UpstreamEnabledChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Feed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feed) UnmarshalBinary(b []byte) error {
	var res Feed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
