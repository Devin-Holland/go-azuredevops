// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LoadTestRunDetails load test run details
// swagger:model LoadTestRunDetails
type LoadTestRunDetails struct {
	LoadTestRunSettings

	// virtual user count
	VirtualUserCount int32 `json:"virtualUserCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LoadTestRunDetails) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 LoadTestRunSettings
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.LoadTestRunSettings = aO0

	// now for regular properties
	var propsLoadTestRunDetails struct {
		VirtualUserCount int32 `json:"virtualUserCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsLoadTestRunDetails); err != nil {
		return err
	}
	m.VirtualUserCount = propsLoadTestRunDetails.VirtualUserCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LoadTestRunDetails) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.LoadTestRunSettings)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsLoadTestRunDetails struct {
		VirtualUserCount int32 `json:"virtualUserCount,omitempty"`
	}
	propsLoadTestRunDetails.VirtualUserCount = m.VirtualUserCount

	jsonDataPropsLoadTestRunDetails, errLoadTestRunDetails := swag.WriteJSON(propsLoadTestRunDetails)
	if errLoadTestRunDetails != nil {
		return nil, errLoadTestRunDetails
	}
	_parts = append(_parts, jsonDataPropsLoadTestRunDetails)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this load test run details
func (m *LoadTestRunDetails) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with LoadTestRunSettings
	if err := m.LoadTestRunSettings.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *LoadTestRunDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoadTestRunDetails) UnmarshalBinary(b []byte) error {
	var res LoadTestRunDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
