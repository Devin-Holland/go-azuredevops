// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemType Describes a work item type.
// swagger:model WorkItemType
type WorkItemType struct {
	WorkItemTrackingResource

	// The color.
	Color string `json:"color,omitempty"`

	// The description of the work item type.
	Description string `json:"description,omitempty"`

	// The fields that exist on the work item type.
	FieldInstances []*WorkItemTypeFieldInstance `json:"fieldInstances"`

	// The fields that exist on the work item type.
	Fields []*WorkItemTypeFieldInstance `json:"fields"`

	// The icon of the work item type.
	Icon *WorkItemIcon `json:"icon,omitempty"`

	// True if work item type is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// Gets the name of the work item type.
	Name string `json:"name,omitempty"`

	// The reference name of the work item type.
	ReferenceName string `json:"referenceName,omitempty"`

	// Gets state information for the work item type.
	States []*WorkItemStateColor `json:"states"`

	// Gets the various state transition mappings in the work item type.
	Transitions map[string][]WorkItemStateTransition `json:"transitions,omitempty"`

	// The XML form.
	XMLForm string `json:"xmlForm,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemType) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemType struct {
		Color string `json:"color,omitempty"`

		Description string `json:"description,omitempty"`

		FieldInstances []*WorkItemTypeFieldInstance `json:"fieldInstances"`

		Fields []*WorkItemTypeFieldInstance `json:"fields"`

		Icon *WorkItemIcon `json:"icon,omitempty"`

		IsDisabled bool `json:"isDisabled,omitempty"`

		Name string `json:"name,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		States []*WorkItemStateColor `json:"states"`

		Transitions map[string][]WorkItemStateTransition `json:"transitions,omitempty"`

		XMLForm string `json:"xmlForm,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemType); err != nil {
		return err
	}
	m.Color = propsWorkItemType.Color

	m.Description = propsWorkItemType.Description

	m.FieldInstances = propsWorkItemType.FieldInstances

	m.Fields = propsWorkItemType.Fields

	m.Icon = propsWorkItemType.Icon

	m.IsDisabled = propsWorkItemType.IsDisabled

	m.Name = propsWorkItemType.Name

	m.ReferenceName = propsWorkItemType.ReferenceName

	m.States = propsWorkItemType.States

	m.Transitions = propsWorkItemType.Transitions

	m.XMLForm = propsWorkItemType.XMLForm

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemType struct {
		Color string `json:"color,omitempty"`

		Description string `json:"description,omitempty"`

		FieldInstances []*WorkItemTypeFieldInstance `json:"fieldInstances"`

		Fields []*WorkItemTypeFieldInstance `json:"fields"`

		Icon *WorkItemIcon `json:"icon,omitempty"`

		IsDisabled bool `json:"isDisabled,omitempty"`

		Name string `json:"name,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		States []*WorkItemStateColor `json:"states"`

		Transitions map[string][]WorkItemStateTransition `json:"transitions,omitempty"`

		XMLForm string `json:"xmlForm,omitempty"`
	}
	propsWorkItemType.Color = m.Color

	propsWorkItemType.Description = m.Description

	propsWorkItemType.FieldInstances = m.FieldInstances

	propsWorkItemType.Fields = m.Fields

	propsWorkItemType.Icon = m.Icon

	propsWorkItemType.IsDisabled = m.IsDisabled

	propsWorkItemType.Name = m.Name

	propsWorkItemType.ReferenceName = m.ReferenceName

	propsWorkItemType.States = m.States

	propsWorkItemType.Transitions = m.Transitions

	propsWorkItemType.XMLForm = m.XMLForm

	jsonDataPropsWorkItemType, errWorkItemType := swag.WriteJSON(propsWorkItemType)
	if errWorkItemType != nil {
		return nil, errWorkItemType
	}
	_parts = append(_parts, jsonDataPropsWorkItemType)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item type
func (m *WorkItemType) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemType) validateFieldInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldInstances) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldInstances); i++ {
		if swag.IsZero(m.FieldInstances[i]) { // not required
			continue
		}

		if m.FieldInstances[i] != nil {
			if err := m.FieldInstances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldInstances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemType) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemType) validateIcon(formats strfmt.Registry) error {

	if swag.IsZero(m.Icon) { // not required
		return nil
	}

	if m.Icon != nil {
		if err := m.Icon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icon")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemType) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemType) validateTransitions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transitions) { // not required
		return nil
	}

	for k := range m.Transitions {

		if err := validate.Required("transitions"+"."+k, "body", m.Transitions[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Transitions[k]); i++ {

			if err := m.Transitions[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transitions" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemType) UnmarshalBinary(b []byte) error {
	var res WorkItemType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
