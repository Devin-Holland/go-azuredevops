// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GraphScope Container where a graph entity is defined (organization, project, team)
// swagger:model GraphScope
type GraphScope struct {
	GraphSubject

	// The subject descriptor that references the administrators group for this scope. Only members of this group can change the contents of this scope or assign other users permissions to access this scope.
	AdministratorDescriptor string `json:"administratorDescriptor,omitempty"`

	// When true, this scope is also a securing host for one or more scopes.
	IsGlobal bool `json:"isGlobal,omitempty"`

	// The subject descriptor for the closest account or organization in the ancestor tree of this scope.
	ParentDescriptor string `json:"parentDescriptor,omitempty"`

	// The type of this scope. Typically ServiceHost or TeamProject.
	// Enum: [generic serviceHost teamProject]
	ScopeType interface{} `json:"scopeType,omitempty"`

	// The subject descriptor for the containing organization in the ancestor tree of this scope.
	SecuringHostDescriptor string `json:"securingHostDescriptor,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GraphScope) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphSubject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphSubject = aO0

	// now for regular properties
	var propsGraphScope struct {
		AdministratorDescriptor string `json:"administratorDescriptor,omitempty"`

		IsGlobal bool `json:"isGlobal,omitempty"`

		ParentDescriptor string `json:"parentDescriptor,omitempty"`

		ScopeType interface{} `json:"scopeType,omitempty"`

		SecuringHostDescriptor string `json:"securingHostDescriptor,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsGraphScope); err != nil {
		return err
	}
	m.AdministratorDescriptor = propsGraphScope.AdministratorDescriptor

	m.IsGlobal = propsGraphScope.IsGlobal

	m.ParentDescriptor = propsGraphScope.ParentDescriptor

	m.ScopeType = propsGraphScope.ScopeType

	m.SecuringHostDescriptor = propsGraphScope.SecuringHostDescriptor

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GraphScope) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GraphSubject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsGraphScope struct {
		AdministratorDescriptor string `json:"administratorDescriptor,omitempty"`

		IsGlobal bool `json:"isGlobal,omitempty"`

		ParentDescriptor string `json:"parentDescriptor,omitempty"`

		ScopeType interface{} `json:"scopeType,omitempty"`

		SecuringHostDescriptor string `json:"securingHostDescriptor,omitempty"`
	}
	propsGraphScope.AdministratorDescriptor = m.AdministratorDescriptor

	propsGraphScope.IsGlobal = m.IsGlobal

	propsGraphScope.ParentDescriptor = m.ParentDescriptor

	propsGraphScope.ScopeType = m.ScopeType

	propsGraphScope.SecuringHostDescriptor = m.SecuringHostDescriptor

	jsonDataPropsGraphScope, errGraphScope := swag.WriteJSON(propsGraphScope)
	if errGraphScope != nil {
		return nil, errGraphScope
	}
	_parts = append(_parts, jsonDataPropsGraphScope)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this graph scope
func (m *GraphScope) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphSubject
	if err := m.GraphSubject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *GraphScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphScope) UnmarshalBinary(b []byte) error {
	var res GraphScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
