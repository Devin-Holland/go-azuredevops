// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemCommentVersionRef Represents the reference to a specific version of a comment on a Work Item.
// swagger:model WorkItemCommentVersionRef
type WorkItemCommentVersionRef struct {
	WorkItemTrackingResourceReference

	// The id assigned to the comment.
	CommentID int32 `json:"commentId,omitempty"`

	// [Internal] The work item revision where this comment was originally added.
	CreatedInRevision int32 `json:"createdInRevision,omitempty"`

	// [Internal] Specifies whether comment was deleted.
	IsDeleted bool `json:"isDeleted,omitempty"`

	// [Internal] The text of the comment.
	Text string `json:"text,omitempty"`

	// The version number.
	Version int32 `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemCommentVersionRef) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResourceReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResourceReference = aO0

	// now for regular properties
	var propsWorkItemCommentVersionRef struct {
		CommentID int32 `json:"commentId,omitempty"`

		CreatedInRevision int32 `json:"createdInRevision,omitempty"`

		IsDeleted bool `json:"isDeleted,omitempty"`

		Text string `json:"text,omitempty"`

		Version int32 `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemCommentVersionRef); err != nil {
		return err
	}
	m.CommentID = propsWorkItemCommentVersionRef.CommentID

	m.CreatedInRevision = propsWorkItemCommentVersionRef.CreatedInRevision

	m.IsDeleted = propsWorkItemCommentVersionRef.IsDeleted

	m.Text = propsWorkItemCommentVersionRef.Text

	m.Version = propsWorkItemCommentVersionRef.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemCommentVersionRef) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResourceReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemCommentVersionRef struct {
		CommentID int32 `json:"commentId,omitempty"`

		CreatedInRevision int32 `json:"createdInRevision,omitempty"`

		IsDeleted bool `json:"isDeleted,omitempty"`

		Text string `json:"text,omitempty"`

		Version int32 `json:"version,omitempty"`
	}
	propsWorkItemCommentVersionRef.CommentID = m.CommentID

	propsWorkItemCommentVersionRef.CreatedInRevision = m.CreatedInRevision

	propsWorkItemCommentVersionRef.IsDeleted = m.IsDeleted

	propsWorkItemCommentVersionRef.Text = m.Text

	propsWorkItemCommentVersionRef.Version = m.Version

	jsonDataPropsWorkItemCommentVersionRef, errWorkItemCommentVersionRef := swag.WriteJSON(propsWorkItemCommentVersionRef)
	if errWorkItemCommentVersionRef != nil {
		return nil, errWorkItemCommentVersionRef
	}
	_parts = append(_parts, jsonDataPropsWorkItemCommentVersionRef)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item comment version ref
func (m *WorkItemCommentVersionRef) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResourceReference
	if err := m.WorkItemTrackingResourceReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemCommentVersionRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemCommentVersionRef) UnmarshalBinary(b []byte) error {
	var res WorkItemCommentVersionRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
