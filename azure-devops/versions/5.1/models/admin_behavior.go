// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AdminBehavior Describes an admin behavior for a process.
// swagger:model AdminBehavior
type AdminBehavior struct {

	// Is the behavior abstract (i.e. can not be associated with any work item type).
	Abstract bool `json:"abstract,omitempty"`

	// The color associated with the behavior.
	Color string `json:"color,omitempty"`

	// Indicates if the behavior is custom.
	Custom bool `json:"custom,omitempty"`

	// The description of the behavior.
	Description string `json:"description,omitempty"`

	// List of behavior fields.
	Fields []*AdminBehaviorField `json:"fields"`

	// Behavior ID.
	ID string `json:"id,omitempty"`

	// Parent behavior reference.
	Inherits string `json:"inherits,omitempty"`

	// The behavior name.
	Name string `json:"name,omitempty"`

	// Is the behavior overrides a behavior from system process.
	Overriden bool `json:"overriden,omitempty"`

	// The rank.
	Rank int32 `json:"rank,omitempty"`
}

// Validate validates this admin behavior
func (m *AdminBehavior) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminBehavior) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminBehavior) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminBehavior) UnmarshalBinary(b []byte) error {
	var res AdminBehavior
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
