// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowTask workflow task
// swagger:model WorkflowTask
type WorkflowTask struct {

	// Gets or sets as the task always run or not.
	AlwaysRun bool `json:"alwaysRun,omitempty"`

	// Gets or sets the task condition.
	Condition string `json:"condition,omitempty"`

	// Gets or sets as the task continue run on error or not.
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// Gets or sets the task definition type. Example:- 'Agent', DeploymentGroup', 'Server' or 'ServerGate'.
	DefinitionType string `json:"definitionType,omitempty"`

	// Gets or sets as the task enabled or not.
	Enabled bool `json:"enabled,omitempty"`

	// Gets or sets the task environment variables.
	Environment map[string]string `json:"environment,omitempty"`

	// Gets or sets the task inputs.
	Inputs map[string]string `json:"inputs,omitempty"`

	// Gets or sets the name of the task.
	Name string `json:"name,omitempty"`

	// Gets or sets the task override inputs.
	OverrideInputs map[string]string `json:"overrideInputs,omitempty"`

	// Gets or sets the reference name of the task.
	RefName string `json:"refName,omitempty"`

	// Gets or sets the ID of the task.
	// Format: uuid
	TaskID strfmt.UUID `json:"taskId,omitempty"`

	// Gets or sets the task timeout.
	TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`

	// Gets or sets the version of the task.
	Version string `json:"version,omitempty"`
}

// Validate validates this workflow task
func (m *WorkflowTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowTask) validateTaskID(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskID) { // not required
		return nil
	}

	if err := validate.FormatOf("taskId", "body", "uuid", m.TaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTask) UnmarshalBinary(b []byte) error {
	var res WorkflowTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
