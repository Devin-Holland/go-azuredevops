// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceEndpointAuthenticationScheme service endpoint authentication scheme
// swagger:model ServiceEndpointAuthenticationScheme
type ServiceEndpointAuthenticationScheme struct {

	// Gets or sets the authorization headers of service endpoint authentication scheme.
	AuthorizationHeaders []*AuthorizationHeader `json:"authorizationHeaders"`

	// Gets or sets the certificates of service endpoint authentication scheme.
	ClientCertificates []*ClientCertificate `json:"clientCertificates"`

	// Gets or sets the display name for the service endpoint authentication scheme.
	DisplayName string `json:"displayName,omitempty"`

	// Gets or sets the input descriptors for the service endpoint authentication scheme.
	InputDescriptors []*InputDescriptor `json:"inputDescriptors"`

	// Gets or sets the scheme for service endpoint authentication.
	Scheme string `json:"scheme,omitempty"`
}

// Validate validates this service endpoint authentication scheme
func (m *ServiceEndpointAuthenticationScheme) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEndpointAuthenticationScheme) validateAuthorizationHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationHeaders) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthorizationHeaders); i++ {
		if swag.IsZero(m.AuthorizationHeaders[i]) { // not required
			continue
		}

		if m.AuthorizationHeaders[i] != nil {
			if err := m.AuthorizationHeaders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorizationHeaders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpointAuthenticationScheme) validateClientCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.ClientCertificates); i++ {
		if swag.IsZero(m.ClientCertificates[i]) { // not required
			continue
		}

		if m.ClientCertificates[i] != nil {
			if err := m.ClientCertificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientCertificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpointAuthenticationScheme) validateInputDescriptors(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDescriptors); i++ {
		if swag.IsZero(m.InputDescriptors[i]) { // not required
			continue
		}

		if m.InputDescriptors[i] != nil {
			if err := m.InputDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEndpointAuthenticationScheme) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEndpointAuthenticationScheme) UnmarshalBinary(b []byte) error {
	var res ServiceEndpointAuthenticationScheme
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
