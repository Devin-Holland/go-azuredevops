// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseEnvironmentStatusUpdatedEvent release environment status updated event
// swagger:model ReleaseEnvironmentStatusUpdatedEvent
type ReleaseEnvironmentStatusUpdatedEvent struct {
	RealtimeReleaseDefinitionEvent

	// environment Id
	EnvironmentID int32 `json:"environmentId,omitempty"`

	// environment status
	// Enum: [undefined notStarted inProgress succeeded canceled rejected queued scheduled partiallySucceeded]
	EnvironmentStatus interface{} `json:"environmentStatus,omitempty"`

	// latest deployment operation status
	// Enum: [undefined queued scheduled pending approved rejected deferred queuedForAgent phaseInProgress phaseSucceeded phasePartiallySucceeded phaseFailed canceled phaseCanceled manualInterventionPending queuedForPipeline cancelling evaluatingGates gateFailed all]
	LatestDeploymentOperationStatus interface{} `json:"latestDeploymentOperationStatus,omitempty"`

	// latest deployment status
	// Enum: [undefined notDeployed inProgress succeeded partiallySucceeded failed all]
	LatestDeploymentStatus interface{} `json:"latestDeploymentStatus,omitempty"`

	// release Id
	ReleaseID int32 `json:"releaseId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReleaseEnvironmentStatusUpdatedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RealtimeReleaseDefinitionEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RealtimeReleaseDefinitionEvent = aO0

	// now for regular properties
	var propsReleaseEnvironmentStatusUpdatedEvent struct {
		EnvironmentID int32 `json:"environmentId,omitempty"`

		EnvironmentStatus interface{} `json:"environmentStatus,omitempty"`

		LatestDeploymentOperationStatus interface{} `json:"latestDeploymentOperationStatus,omitempty"`

		LatestDeploymentStatus interface{} `json:"latestDeploymentStatus,omitempty"`

		ReleaseID int32 `json:"releaseId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsReleaseEnvironmentStatusUpdatedEvent); err != nil {
		return err
	}
	m.EnvironmentID = propsReleaseEnvironmentStatusUpdatedEvent.EnvironmentID

	m.EnvironmentStatus = propsReleaseEnvironmentStatusUpdatedEvent.EnvironmentStatus

	m.LatestDeploymentOperationStatus = propsReleaseEnvironmentStatusUpdatedEvent.LatestDeploymentOperationStatus

	m.LatestDeploymentStatus = propsReleaseEnvironmentStatusUpdatedEvent.LatestDeploymentStatus

	m.ReleaseID = propsReleaseEnvironmentStatusUpdatedEvent.ReleaseID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReleaseEnvironmentStatusUpdatedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RealtimeReleaseDefinitionEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsReleaseEnvironmentStatusUpdatedEvent struct {
		EnvironmentID int32 `json:"environmentId,omitempty"`

		EnvironmentStatus interface{} `json:"environmentStatus,omitempty"`

		LatestDeploymentOperationStatus interface{} `json:"latestDeploymentOperationStatus,omitempty"`

		LatestDeploymentStatus interface{} `json:"latestDeploymentStatus,omitempty"`

		ReleaseID int32 `json:"releaseId,omitempty"`
	}
	propsReleaseEnvironmentStatusUpdatedEvent.EnvironmentID = m.EnvironmentID

	propsReleaseEnvironmentStatusUpdatedEvent.EnvironmentStatus = m.EnvironmentStatus

	propsReleaseEnvironmentStatusUpdatedEvent.LatestDeploymentOperationStatus = m.LatestDeploymentOperationStatus

	propsReleaseEnvironmentStatusUpdatedEvent.LatestDeploymentStatus = m.LatestDeploymentStatus

	propsReleaseEnvironmentStatusUpdatedEvent.ReleaseID = m.ReleaseID

	jsonDataPropsReleaseEnvironmentStatusUpdatedEvent, errReleaseEnvironmentStatusUpdatedEvent := swag.WriteJSON(propsReleaseEnvironmentStatusUpdatedEvent)
	if errReleaseEnvironmentStatusUpdatedEvent != nil {
		return nil, errReleaseEnvironmentStatusUpdatedEvent
	}
	_parts = append(_parts, jsonDataPropsReleaseEnvironmentStatusUpdatedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this release environment status updated event
func (m *ReleaseEnvironmentStatusUpdatedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RealtimeReleaseDefinitionEvent
	if err := m.RealtimeReleaseDefinitionEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseEnvironmentStatusUpdatedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseEnvironmentStatusUpdatedEvent) UnmarshalBinary(b []byte) error {
	var res ReleaseEnvironmentStatusUpdatedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
