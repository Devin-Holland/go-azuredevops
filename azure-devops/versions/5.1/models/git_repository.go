// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitRepository git repository
// swagger:model GitRepository
type GitRepository struct {

	// links
	Links string `json:"_links,omitempty"`

	// default branch
	DefaultBranch string `json:"defaultBranch,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// True if the repository was created as a fork
	IsFork bool `json:"isFork,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent repository
	ParentRepository *GitRepositoryRef `json:"parentRepository,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// remote Url
	RemoteURL string `json:"remoteUrl,omitempty"`

	// Compressed size (bytes) of the repository.
	Size int64 `json:"size,omitempty"`

	// ssh Url
	SSHURL string `json:"sshUrl,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// valid remote urls
	ValidRemoteUrls []string `json:"validRemoteUrls"`

	// web Url
	WebURL string `json:"webUrl,omitempty"`
}

// Validate validates this git repository
func (m *GitRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitRepository) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GitRepository) validateParentRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentRepository) { // not required
		return nil
	}

	if m.ParentRepository != nil {
		if err := m.ParentRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentRepository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitRepository) UnmarshalBinary(b []byte) error {
	var res GitRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
