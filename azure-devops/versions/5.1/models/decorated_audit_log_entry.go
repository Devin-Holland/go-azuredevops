// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DecoratedAuditLogEntry decorated audit log entry
// swagger:model DecoratedAuditLogEntry
type DecoratedAuditLogEntry struct {

	// The action if for the event, i.e Git.CreateRepo, Project.RenameProject
	ActionID string `json:"actionId,omitempty"`

	// ActivityId
	// Format: uuid
	ActivityID strfmt.UUID `json:"activityId,omitempty"`

	// The Actor's CUID
	// Format: uuid
	ActorCUID strfmt.UUID `json:"actorCUID,omitempty"`

	// DisplayName of the user who initiated the action
	ActorDisplayName string `json:"actorDisplayName,omitempty"`

	// URL of Actor's Profile image
	ActorImageURL string `json:"actorImageUrl,omitempty"`

	// The Actor's User Id
	// Format: uuid
	ActorUserID strfmt.UUID `json:"actorUserId,omitempty"`

	// Area of Azure DevOps the action occurred
	Area string `json:"area,omitempty"`

	// Type of authentication used by the actor
	AuthenticationMechanism string `json:"authenticationMechanism,omitempty"`

	// Type of action executed
	// Enum: [unknown modify remove create access]
	Category interface{} `json:"category,omitempty"`

	// DisplayName of the category
	CategoryDisplayName string `json:"categoryDisplayName,omitempty"`

	// This allows related audit entires to be grouped together. Generally this occurs when a single action cases a cascade of audit entries. For example, project creation.
	// Format: uuid
	CorrelationID strfmt.UUID `json:"correlationId,omitempty"`

	// External data such as CUIDs, item names, etc.
	Data map[string]interface{} `json:"data,omitempty"`

	// Decorated details
	Details string `json:"details,omitempty"`

	// EventId - Needs to be unique per service
	ID string `json:"id,omitempty"`

	// IP Address where the event was originated
	IPAddress string `json:"ipAddress,omitempty"`

	// DisplayName of the scope
	ScopeDisplayName string `json:"scopeDisplayName,omitempty"`

	// The organization or project Id
	// Format: uuid
	ScopeID strfmt.UUID `json:"scopeId,omitempty"`

	// The type of the scope, Organization or Project
	// Enum: [unknown deployment enterprise organization project]
	ScopeType interface{} `json:"scopeType,omitempty"`

	// The time when the event occurred in UTC
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// The user agent from the request
	UserAgent string `json:"userAgent,omitempty"`
}

// Validate validates this decorated audit log entry
func (m *DecoratedAuditLogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActorCUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActorUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorrelationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DecoratedAuditLogEntry) validateActivityID(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityID) { // not required
		return nil
	}

	if err := validate.FormatOf("activityId", "body", "uuid", m.ActivityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DecoratedAuditLogEntry) validateActorCUID(formats strfmt.Registry) error {

	if swag.IsZero(m.ActorCUID) { // not required
		return nil
	}

	if err := validate.FormatOf("actorCUID", "body", "uuid", m.ActorCUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DecoratedAuditLogEntry) validateActorUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.ActorUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("actorUserId", "body", "uuid", m.ActorUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DecoratedAuditLogEntry) validateCorrelationID(formats strfmt.Registry) error {

	if swag.IsZero(m.CorrelationID) { // not required
		return nil
	}

	if err := validate.FormatOf("correlationId", "body", "uuid", m.CorrelationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DecoratedAuditLogEntry) validateScopeID(formats strfmt.Registry) error {

	if swag.IsZero(m.ScopeID) { // not required
		return nil
	}

	if err := validate.FormatOf("scopeId", "body", "uuid", m.ScopeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DecoratedAuditLogEntry) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DecoratedAuditLogEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DecoratedAuditLogEntry) UnmarshalBinary(b []byte) error {
	var res DecoratedAuditLogEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
