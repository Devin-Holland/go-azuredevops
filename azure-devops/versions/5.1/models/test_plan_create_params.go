// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestPlanCreateParams The test plan cerate parameters.
// swagger:model TestPlanCreateParams
type TestPlanCreateParams struct {

	// Area of the test plan.
	AreaPath string `json:"areaPath,omitempty"`

	// The Build Definition that generates a build associated with this test plan.
	BuildDefinition *BuildDefinitionReference `json:"buildDefinition,omitempty"`

	// Build to be tested.
	BuildID int32 `json:"buildId,omitempty"`

	// Description of the test plan.
	Description string `json:"description,omitempty"`

	// End date for the test plan.
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Iteration path of the test plan.
	Iteration string `json:"iteration,omitempty"`

	// Name of the test plan.
	Name string `json:"name,omitempty"`

	// Owner of the test plan.
	Owner *IdentityRef `json:"owner,omitempty"`

	// Release Environment to be used to deploy the build and run automated tests from this test plan.
	ReleaseEnvironmentDefinition *ReleaseEnvironmentDefinitionReference `json:"releaseEnvironmentDefinition,omitempty"`

	// Start date for the test plan.
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// State of the test plan.
	State string `json:"state,omitempty"`

	// Value to configure how same tests across test suites under a test plan need to behave
	TestOutcomeSettings *TestOutcomeSettings `json:"testOutcomeSettings,omitempty"`
}

// Validate validates this test plan create params
func (m *TestPlanCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEnvironmentDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestOutcomeSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlanCreateParams) validateBuildDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildDefinition) { // not required
		return nil
	}

	if m.BuildDefinition != nil {
		if err := m.BuildDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlanCreateParams) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestPlanCreateParams) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlanCreateParams) validateReleaseEnvironmentDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEnvironmentDefinition) { // not required
		return nil
	}

	if m.ReleaseEnvironmentDefinition != nil {
		if err := m.ReleaseEnvironmentDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseEnvironmentDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlanCreateParams) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestPlanCreateParams) validateTestOutcomeSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TestOutcomeSettings) { // not required
		return nil
	}

	if m.TestOutcomeSettings != nil {
		if err := m.TestOutcomeSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testOutcomeSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPlanCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPlanCreateParams) UnmarshalBinary(b []byte) error {
	var res TestPlanCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
