// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IdentityRef identity ref
// swagger:model IdentityRef
type IdentityRef struct {
	GraphSubjectBase

	// Deprecated - Can be retrieved by querying the Graph user referenced in the "self" entry of the IdentityRef "_links" dictionary
	DirectoryAlias string `json:"directoryAlias,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Deprecated - Available in the "avatar" entry of the IdentityRef "_links" dictionary
	ImageURL string `json:"imageUrl,omitempty"`

	// Deprecated - Can be retrieved by querying the Graph membership state referenced in the "membershipState" entry of the GraphUser "_links" dictionary
	Inactive bool `json:"inactive,omitempty"`

	// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)
	IsAadIdentity bool `json:"isAadIdentity,omitempty"`

	// Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)
	IsContainer bool `json:"isContainer,omitempty"`

	// is deleted in origin
	IsDeletedInOrigin bool `json:"isDeletedInOrigin,omitempty"`

	// Deprecated - not in use in most preexisting implementations of ToIdentityRef
	ProfileURL string `json:"profileUrl,omitempty"`

	// Deprecated - use Domain+PrincipalName instead
	UniqueName string `json:"uniqueName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IdentityRef) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphSubjectBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphSubjectBase = aO0

	// now for regular properties
	var propsIdentityRef struct {
		DirectoryAlias string `json:"directoryAlias,omitempty"`

		ID string `json:"id,omitempty"`

		ImageURL string `json:"imageUrl,omitempty"`

		Inactive bool `json:"inactive,omitempty"`

		IsAadIdentity bool `json:"isAadIdentity,omitempty"`

		IsContainer bool `json:"isContainer,omitempty"`

		IsDeletedInOrigin bool `json:"isDeletedInOrigin,omitempty"`

		ProfileURL string `json:"profileUrl,omitempty"`

		UniqueName string `json:"uniqueName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsIdentityRef); err != nil {
		return err
	}
	m.DirectoryAlias = propsIdentityRef.DirectoryAlias

	m.ID = propsIdentityRef.ID

	m.ImageURL = propsIdentityRef.ImageURL

	m.Inactive = propsIdentityRef.Inactive

	m.IsAadIdentity = propsIdentityRef.IsAadIdentity

	m.IsContainer = propsIdentityRef.IsContainer

	m.IsDeletedInOrigin = propsIdentityRef.IsDeletedInOrigin

	m.ProfileURL = propsIdentityRef.ProfileURL

	m.UniqueName = propsIdentityRef.UniqueName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IdentityRef) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GraphSubjectBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsIdentityRef struct {
		DirectoryAlias string `json:"directoryAlias,omitempty"`

		ID string `json:"id,omitempty"`

		ImageURL string `json:"imageUrl,omitempty"`

		Inactive bool `json:"inactive,omitempty"`

		IsAadIdentity bool `json:"isAadIdentity,omitempty"`

		IsContainer bool `json:"isContainer,omitempty"`

		IsDeletedInOrigin bool `json:"isDeletedInOrigin,omitempty"`

		ProfileURL string `json:"profileUrl,omitempty"`

		UniqueName string `json:"uniqueName,omitempty"`
	}
	propsIdentityRef.DirectoryAlias = m.DirectoryAlias

	propsIdentityRef.ID = m.ID

	propsIdentityRef.ImageURL = m.ImageURL

	propsIdentityRef.Inactive = m.Inactive

	propsIdentityRef.IsAadIdentity = m.IsAadIdentity

	propsIdentityRef.IsContainer = m.IsContainer

	propsIdentityRef.IsDeletedInOrigin = m.IsDeletedInOrigin

	propsIdentityRef.ProfileURL = m.ProfileURL

	propsIdentityRef.UniqueName = m.UniqueName

	jsonDataPropsIdentityRef, errIdentityRef := swag.WriteJSON(propsIdentityRef)
	if errIdentityRef != nil {
		return nil, errIdentityRef
	}
	_parts = append(_parts, jsonDataPropsIdentityRef)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this identity ref
func (m *IdentityRef) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphSubjectBase
	if err := m.GraphSubjectBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IdentityRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityRef) UnmarshalBinary(b []byte) error {
	var res IdentityRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
