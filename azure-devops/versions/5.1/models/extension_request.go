// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionRequest A request for an extension (to be installed or have a license assigned)
// swagger:model ExtensionRequest
type ExtensionRequest struct {

	// Required message supplied if the request is rejected
	RejectMessage string `json:"rejectMessage,omitempty"`

	// Date at which the request was made
	// Format: date-time
	RequestDate strfmt.DateTime `json:"requestDate,omitempty"`

	// Optional message supplied by the requester justifying the request
	RequestMessage string `json:"requestMessage,omitempty"`

	// Represents the state of the request
	// Enum: [open accepted rejected]
	RequestState interface{} `json:"requestState,omitempty"`

	// Represents the user who made the request
	RequestedBy *IdentityRef `json:"requestedBy,omitempty"`

	// Date at which the request was resolved
	// Format: date-time
	ResolveDate strfmt.DateTime `json:"resolveDate,omitempty"`

	// Represents the user who resolved the request
	ResolvedBy *IdentityRef `json:"resolvedBy,omitempty"`
}

// Validate validates this extension request
func (m *ExtensionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionRequest) validateRequestDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestDate", "body", "date-time", m.RequestDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionRequest) validateRequestedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedBy) { // not required
		return nil
	}

	if m.RequestedBy != nil {
		if err := m.RequestedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionRequest) validateResolveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ResolveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("resolveDate", "body", "date-time", m.ResolveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionRequest) validateResolvedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ResolvedBy) { // not required
		return nil
	}

	if m.ResolvedBy != nil {
		if err := m.ResolvedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolvedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionRequest) UnmarshalBinary(b []byte) error {
	var res ExtensionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
