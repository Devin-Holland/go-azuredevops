// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestFieldsEx2 test fields ex2
// swagger:model TestFieldsEx2
type TestFieldsEx2 struct {

	// field Id
	FieldID int32 `json:"fieldId,omitempty"`

	// field name
	FieldName string `json:"fieldName,omitempty"`

	// field type
	// Format: byte
	FieldType strfmt.Base64 `json:"fieldType,omitempty"`

	// is result scoped
	IsResultScoped bool `json:"isResultScoped,omitempty"`

	// is run scoped
	IsRunScoped bool `json:"isRunScoped,omitempty"`

	// is system field
	IsSystemField bool `json:"isSystemField,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`
}

// Validate validates this test fields ex2
func (m *TestFieldsEx2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestFieldsEx2) validateFieldType(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldType) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestFieldsEx2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestFieldsEx2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestFieldsEx2) UnmarshalBinary(b []byte) error {
	var res TestFieldsEx2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
