// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DefinitionReference Represents a reference to a definition.
// swagger:model DefinitionReference
type DefinitionReference struct {

	// The date this version of the definition was created.
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// The ID of the referenced definition.
	ID int32 `json:"id,omitempty"`

	// The name of the referenced definition.
	Name string `json:"name,omitempty"`

	// The folder path of the definition.
	Path string `json:"path,omitempty"`

	// A reference to the project.
	Project *TeamProjectReference `json:"project,omitempty"`

	// A value that indicates whether builds can be queued against this definition.
	// Enum: [enabled paused disabled]
	QueueStatus interface{} `json:"queueStatus,omitempty"`

	// The definition revision number.
	Revision int32 `json:"revision,omitempty"`

	// The type of the definition.
	// Enum: [xaml build]
	Type interface{} `json:"type,omitempty"`

	// The definition's URI.
	URI string `json:"uri,omitempty"`

	// The REST URL of the definition.
	URL string `json:"url,omitempty"`
}

// Validate validates this definition reference
func (m *DefinitionReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefinitionReference) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DefinitionReference) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefinitionReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefinitionReference) UnmarshalBinary(b []byte) error {
	var res DefinitionReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
