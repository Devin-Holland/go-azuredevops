// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemTypeModel work item type model
// swagger:model WorkItemTypeModel
type WorkItemTypeModel struct {

	// behaviors
	Behaviors []*WorkItemTypeBehavior `json:"behaviors"`

	// class
	// Enum: [system derived custom]
	Class interface{} `json:"class,omitempty"`

	// color
	Color string `json:"color,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Parent WIT Id/Internal ReferenceName that it inherits from
	Inherits string `json:"inherits,omitempty"`

	// is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// layout
	Layout *FormLayout `json:"layout,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// states
	States []*WorkItemStateResultModel `json:"states"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this work item type model
func (m *WorkItemTypeModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBehaviors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemTypeModel) validateBehaviors(formats strfmt.Registry) error {

	if swag.IsZero(m.Behaviors) { // not required
		return nil
	}

	for i := 0; i < len(m.Behaviors); i++ {
		if swag.IsZero(m.Behaviors[i]) { // not required
			continue
		}

		if m.Behaviors[i] != nil {
			if err := m.Behaviors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("behaviors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemTypeModel) validateLayout(formats strfmt.Registry) error {

	if swag.IsZero(m.Layout) { // not required
		return nil
	}

	if m.Layout != nil {
		if err := m.Layout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layout")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemTypeModel) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemTypeModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemTypeModel) UnmarshalBinary(b []byte) error {
	var res WorkItemTypeModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
