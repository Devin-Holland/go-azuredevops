// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRunExtended2 test run extended2
// swagger:model TestRunExtended2
type TestRunExtended2 struct {

	// aut environment Url
	AutEnvironmentURL string `json:"autEnvironmentUrl,omitempty"`

	// csm content
	CsmContent string `json:"csmContent,omitempty"`

	// csm parameters
	CsmParameters string `json:"csmParameters,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// source filter
	SourceFilter string `json:"sourceFilter,omitempty"`

	// subscription name
	SubscriptionName string `json:"subscriptionName,omitempty"`

	// substate
	// Format: byte
	Substate strfmt.Base64 `json:"substate,omitempty"`

	// test case filter
	TestCaseFilter string `json:"testCaseFilter,omitempty"`

	// test environment Url
	TestEnvironmentURL string `json:"testEnvironmentUrl,omitempty"`

	// test run Id
	TestRunID int32 `json:"testRunId,omitempty"`
}

// Validate validates this test run extended2
func (m *TestRunExtended2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubstate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunExtended2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRunExtended2) validateSubstate(formats strfmt.Registry) error {

	if swag.IsZero(m.Substate) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

// MarshalBinary interface implementation
func (m *TestRunExtended2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRunExtended2) UnmarshalBinary(b []byte) error {
	var res TestRunExtended2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
