// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// YamlPipelineProcess yaml pipeline process
// swagger:model YamlPipelineProcess
type YamlPipelineProcess struct {
	PipelineProcess

	// errors
	Errors []string `json:"errors"`

	// file source
	FileSource *YamlFileSource `json:"fileSource,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// resources
	Resources *YamlPipelineProcessResources `json:"resources,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *YamlPipelineProcess) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PipelineProcess
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PipelineProcess = aO0

	// now for regular properties
	var propsYamlPipelineProcess struct {
		Errors []string `json:"errors"`

		FileSource *YamlFileSource `json:"fileSource,omitempty"`

		Filename string `json:"filename,omitempty"`

		Resources *YamlPipelineProcessResources `json:"resources,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsYamlPipelineProcess); err != nil {
		return err
	}
	m.Errors = propsYamlPipelineProcess.Errors

	m.FileSource = propsYamlPipelineProcess.FileSource

	m.Filename = propsYamlPipelineProcess.Filename

	m.Resources = propsYamlPipelineProcess.Resources

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m YamlPipelineProcess) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PipelineProcess)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsYamlPipelineProcess struct {
		Errors []string `json:"errors"`

		FileSource *YamlFileSource `json:"fileSource,omitempty"`

		Filename string `json:"filename,omitempty"`

		Resources *YamlPipelineProcessResources `json:"resources,omitempty"`
	}
	propsYamlPipelineProcess.Errors = m.Errors

	propsYamlPipelineProcess.FileSource = m.FileSource

	propsYamlPipelineProcess.Filename = m.Filename

	propsYamlPipelineProcess.Resources = m.Resources

	jsonDataPropsYamlPipelineProcess, errYamlPipelineProcess := swag.WriteJSON(propsYamlPipelineProcess)
	if errYamlPipelineProcess != nil {
		return nil, errYamlPipelineProcess
	}
	_parts = append(_parts, jsonDataPropsYamlPipelineProcess)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this yaml pipeline process
func (m *YamlPipelineProcess) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PipelineProcess
	if err := m.PipelineProcess.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YamlPipelineProcess) validateFileSource(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSource) { // not required
		return nil
	}

	if m.FileSource != nil {
		if err := m.FileSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSource")
			}
			return err
		}
	}

	return nil
}

func (m *YamlPipelineProcess) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *YamlPipelineProcess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YamlPipelineProcess) UnmarshalBinary(b []byte) error {
	var res YamlPipelineProcess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
