// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskAgentCloudRequest task agent cloud request
// swagger:model TaskAgentCloudRequest
type TaskAgentCloudRequest struct {

	// agent
	Agent *TaskAgentReference `json:"agent,omitempty"`

	// agent cloud Id
	AgentCloudID int32 `json:"agentCloudId,omitempty"`

	// agent connected time
	// Format: date-time
	AgentConnectedTime strfmt.DateTime `json:"agentConnectedTime,omitempty"`

	// agent data
	AgentData *JObject `json:"agentData,omitempty"`

	// agent specification
	AgentSpecification *JObject `json:"agentSpecification,omitempty"`

	// pool
	Pool *TaskAgentPoolReference `json:"pool,omitempty"`

	// provision request time
	// Format: date-time
	ProvisionRequestTime strfmt.DateTime `json:"provisionRequestTime,omitempty"`

	// provisioned time
	// Format: date-time
	ProvisionedTime strfmt.DateTime `json:"provisionedTime,omitempty"`

	// release request time
	// Format: date-time
	ReleaseRequestTime strfmt.DateTime `json:"releaseRequestTime,omitempty"`

	// request Id
	// Format: uuid
	RequestID strfmt.UUID `json:"requestId,omitempty"`
}

// Validate validates this task agent cloud request
func (m *TaskAgentCloudRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentConnectedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAgentCloudRequest) validateAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateAgentConnectedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentConnectedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("agentConnectedTime", "body", "date-time", m.AgentConnectedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateAgentData(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentData) { // not required
		return nil
	}

	if m.AgentData != nil {
		if err := m.AgentData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentData")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateAgentSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentSpecification) { // not required
		return nil
	}

	if m.AgentSpecification != nil {
		if err := m.AgentSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentCloudRequest) validatePool(formats strfmt.Registry) error {

	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateProvisionRequestTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisionRequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("provisionRequestTime", "body", "date-time", m.ProvisionRequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateProvisionedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisionedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("provisionedTime", "body", "date-time", m.ProvisionedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateReleaseRequestTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseRequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseRequestTime", "body", "date-time", m.ReleaseRequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskAgentCloudRequest) validateRequestID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestID) { // not required
		return nil
	}

	if err := validate.FormatOf("requestId", "body", "uuid", m.RequestID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskAgentCloudRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskAgentCloudRequest) UnmarshalBinary(b []byte) error {
	var res TaskAgentCloudRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
