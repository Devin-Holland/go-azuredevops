// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TeamProject Represents a Team Project object.
// swagger:model TeamProject
type TeamProject struct {
	TeamProjectReference

	// The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Set of capabilities this project has (such as process template & version control).
	Capabilities map[string]map[string]string `json:"capabilities,omitempty"`

	// The shallow ref to the default team.
	DefaultTeam *WebAPITeamRef `json:"defaultTeam,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TeamProject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TeamProjectReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TeamProjectReference = aO0

	// now for regular properties
	var propsTeamProject struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Capabilities map[string]map[string]string `json:"capabilities,omitempty"`

		DefaultTeam *WebAPITeamRef `json:"defaultTeam,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTeamProject); err != nil {
		return err
	}
	m.Links = propsTeamProject.Links

	m.Capabilities = propsTeamProject.Capabilities

	m.DefaultTeam = propsTeamProject.DefaultTeam

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TeamProject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TeamProjectReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTeamProject struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Capabilities map[string]map[string]string `json:"capabilities,omitempty"`

		DefaultTeam *WebAPITeamRef `json:"defaultTeam,omitempty"`
	}
	propsTeamProject.Links = m.Links

	propsTeamProject.Capabilities = m.Capabilities

	propsTeamProject.DefaultTeam = m.DefaultTeam

	jsonDataPropsTeamProject, errTeamProject := swag.WriteJSON(propsTeamProject)
	if errTeamProject != nil {
		return nil, errTeamProject
	}
	_parts = append(_parts, jsonDataPropsTeamProject)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this team project
func (m *TeamProject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TeamProjectReference
	if err := m.TeamProjectReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTeam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamProject) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *TeamProject) validateDefaultTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultTeam) { // not required
		return nil
	}

	if m.DefaultTeam != nil {
		if err := m.DefaultTeam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultTeam")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamProject) UnmarshalBinary(b []byte) error {
	var res TeamProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
