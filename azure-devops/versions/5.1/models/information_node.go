// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InformationNode Data representation of an information node associated with a build
// swagger:model InformationNode
type InformationNode struct {

	// Fields of the information node
	Fields map[string]string `json:"fields,omitempty"`

	// Process or person that last modified this node
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// Date this node was last modified
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// Node Id of this information node
	NodeID int32 `json:"nodeId,omitempty"`

	// Id of parent node (xml tree)
	ParentID int32 `json:"parentId,omitempty"`

	// The type of the information node
	Type string `json:"type,omitempty"`
}

// Validate validates this information node
func (m *InformationNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InformationNode) validateLastModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InformationNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InformationNode) UnmarshalBinary(b []byte) error {
	var res InformationNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
