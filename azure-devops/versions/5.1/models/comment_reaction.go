// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CommentReaction Contains information about work item comment reaction for a particular reaction type.
// swagger:model CommentReaction
type CommentReaction struct {
	WorkItemTrackingResource

	// The id of the comment this reaction belongs to.
	CommentID int32 `json:"commentId,omitempty"`

	// Total number of reactions for the CommentReactionType.
	Count int32 `json:"count,omitempty"`

	// Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
	IsCurrentUserEngaged bool `json:"isCurrentUserEngaged,omitempty"`

	// Type of the reaction.
	// Enum: [like dislike heart hooray smile confused]
	Type interface{} `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommentReaction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsCommentReaction struct {
		CommentID int32 `json:"commentId,omitempty"`

		Count int32 `json:"count,omitempty"`

		IsCurrentUserEngaged bool `json:"isCurrentUserEngaged,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsCommentReaction); err != nil {
		return err
	}
	m.CommentID = propsCommentReaction.CommentID

	m.Count = propsCommentReaction.Count

	m.IsCurrentUserEngaged = propsCommentReaction.IsCurrentUserEngaged

	m.Type = propsCommentReaction.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommentReaction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsCommentReaction struct {
		CommentID int32 `json:"commentId,omitempty"`

		Count int32 `json:"count,omitempty"`

		IsCurrentUserEngaged bool `json:"isCurrentUserEngaged,omitempty"`

		Type interface{} `json:"type,omitempty"`
	}
	propsCommentReaction.CommentID = m.CommentID

	propsCommentReaction.Count = m.Count

	propsCommentReaction.IsCurrentUserEngaged = m.IsCurrentUserEngaged

	propsCommentReaction.Type = m.Type

	jsonDataPropsCommentReaction, errCommentReaction := swag.WriteJSON(propsCommentReaction)
	if errCommentReaction != nil {
		return nil, errCommentReaction
	}
	_parts = append(_parts, jsonDataPropsCommentReaction)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this comment reaction
func (m *CommentReaction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CommentReaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommentReaction) UnmarshalBinary(b []byte) error {
	var res CommentReaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
