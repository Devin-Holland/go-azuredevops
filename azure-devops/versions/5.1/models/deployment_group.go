// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeploymentGroup Deployment group.
// swagger:model DeploymentGroup
type DeploymentGroup struct {
	DeploymentGroupReference

	// Description of the deployment group.
	Description string `json:"description,omitempty"`

	// Number of deployment targets in the deployment group.
	MachineCount int32 `json:"machineCount,omitempty"`

	// List of unique tags across all deployment targets in the deployment group.
	MachineTags []string `json:"machineTags"`

	// List of deployment targets in the deployment group.
	Machines []*DeploymentMachine `json:"machines"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DeploymentGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DeploymentGroupReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DeploymentGroupReference = aO0

	// now for regular properties
	var propsDeploymentGroup struct {
		Description string `json:"description,omitempty"`

		MachineCount int32 `json:"machineCount,omitempty"`

		MachineTags []string `json:"machineTags"`

		Machines []*DeploymentMachine `json:"machines"`
	}
	if err := swag.ReadJSON(raw, &propsDeploymentGroup); err != nil {
		return err
	}
	m.Description = propsDeploymentGroup.Description

	m.MachineCount = propsDeploymentGroup.MachineCount

	m.MachineTags = propsDeploymentGroup.MachineTags

	m.Machines = propsDeploymentGroup.Machines

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DeploymentGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DeploymentGroupReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDeploymentGroup struct {
		Description string `json:"description,omitempty"`

		MachineCount int32 `json:"machineCount,omitempty"`

		MachineTags []string `json:"machineTags"`

		Machines []*DeploymentMachine `json:"machines"`
	}
	propsDeploymentGroup.Description = m.Description

	propsDeploymentGroup.MachineCount = m.MachineCount

	propsDeploymentGroup.MachineTags = m.MachineTags

	propsDeploymentGroup.Machines = m.Machines

	jsonDataPropsDeploymentGroup, errDeploymentGroup := swag.WriteJSON(propsDeploymentGroup)
	if errDeploymentGroup != nil {
		return nil, errDeploymentGroup
	}
	_parts = append(_parts, jsonDataPropsDeploymentGroup)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this deployment group
func (m *DeploymentGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DeploymentGroupReference
	if err := m.DeploymentGroupReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentGroup) validateMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.Machines) { // not required
		return nil
	}

	for i := 0; i < len(m.Machines); i++ {
		if swag.IsZero(m.Machines[i]) { // not required
			continue
		}

		if m.Machines[i] != nil {
			if err := m.Machines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentGroup) UnmarshalBinary(b []byte) error {
	var res DeploymentGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
