// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskOrchestrationJob task orchestration job
// swagger:model TaskOrchestrationJob
type TaskOrchestrationJob struct {
	TaskOrchestrationItem

	// demands
	Demands []*Demand `json:"demands"`

	// execute as
	ExecuteAs *IdentityRef `json:"executeAs,omitempty"`

	// execution mode
	ExecutionMode string `json:"executionMode,omitempty"`

	// execution timeout
	ExecutionTimeout string `json:"executionTimeout,omitempty"`

	// instance Id
	// Format: uuid
	InstanceID strfmt.UUID `json:"instanceId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ref name
	RefName string `json:"refName,omitempty"`

	// tasks
	Tasks []*TaskInstance `json:"tasks"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskOrchestrationJob) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskOrchestrationItem
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskOrchestrationItem = aO0

	// now for regular properties
	var propsTaskOrchestrationJob struct {
		Demands []*Demand `json:"demands"`

		ExecuteAs *IdentityRef `json:"executeAs,omitempty"`

		ExecutionMode string `json:"executionMode,omitempty"`

		ExecutionTimeout string `json:"executionTimeout,omitempty"`

		InstanceID strfmt.UUID `json:"instanceId,omitempty"`

		Name string `json:"name,omitempty"`

		RefName string `json:"refName,omitempty"`

		Tasks []*TaskInstance `json:"tasks"`

		Variables map[string]string `json:"variables,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskOrchestrationJob); err != nil {
		return err
	}
	m.Demands = propsTaskOrchestrationJob.Demands

	m.ExecuteAs = propsTaskOrchestrationJob.ExecuteAs

	m.ExecutionMode = propsTaskOrchestrationJob.ExecutionMode

	m.ExecutionTimeout = propsTaskOrchestrationJob.ExecutionTimeout

	m.InstanceID = propsTaskOrchestrationJob.InstanceID

	m.Name = propsTaskOrchestrationJob.Name

	m.RefName = propsTaskOrchestrationJob.RefName

	m.Tasks = propsTaskOrchestrationJob.Tasks

	m.Variables = propsTaskOrchestrationJob.Variables

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskOrchestrationJob) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskOrchestrationItem)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskOrchestrationJob struct {
		Demands []*Demand `json:"demands"`

		ExecuteAs *IdentityRef `json:"executeAs,omitempty"`

		ExecutionMode string `json:"executionMode,omitempty"`

		ExecutionTimeout string `json:"executionTimeout,omitempty"`

		InstanceID strfmt.UUID `json:"instanceId,omitempty"`

		Name string `json:"name,omitempty"`

		RefName string `json:"refName,omitempty"`

		Tasks []*TaskInstance `json:"tasks"`

		Variables map[string]string `json:"variables,omitempty"`
	}
	propsTaskOrchestrationJob.Demands = m.Demands

	propsTaskOrchestrationJob.ExecuteAs = m.ExecuteAs

	propsTaskOrchestrationJob.ExecutionMode = m.ExecutionMode

	propsTaskOrchestrationJob.ExecutionTimeout = m.ExecutionTimeout

	propsTaskOrchestrationJob.InstanceID = m.InstanceID

	propsTaskOrchestrationJob.Name = m.Name

	propsTaskOrchestrationJob.RefName = m.RefName

	propsTaskOrchestrationJob.Tasks = m.Tasks

	propsTaskOrchestrationJob.Variables = m.Variables

	jsonDataPropsTaskOrchestrationJob, errTaskOrchestrationJob := swag.WriteJSON(propsTaskOrchestrationJob)
	if errTaskOrchestrationJob != nil {
		return nil, errTaskOrchestrationJob
	}
	_parts = append(_parts, jsonDataPropsTaskOrchestrationJob)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task orchestration job
func (m *TaskOrchestrationJob) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskOrchestrationItem
	if err := m.TaskOrchestrationItem.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteAs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskOrchestrationJob) validateDemands(formats strfmt.Registry) error {

	if swag.IsZero(m.Demands) { // not required
		return nil
	}

	for i := 0; i < len(m.Demands); i++ {
		if swag.IsZero(m.Demands[i]) { // not required
			continue
		}

		if m.Demands[i] != nil {
			if err := m.Demands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("demands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskOrchestrationJob) validateExecuteAs(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecuteAs) { // not required
		return nil
	}

	if m.ExecuteAs != nil {
		if err := m.ExecuteAs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executeAs")
			}
			return err
		}
	}

	return nil
}

func (m *TaskOrchestrationJob) validateInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if err := validate.FormatOf("instanceId", "body", "uuid", m.InstanceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskOrchestrationJob) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskOrchestrationJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskOrchestrationJob) UnmarshalBinary(b []byte) error {
	var res TaskOrchestrationJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
