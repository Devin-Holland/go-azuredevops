// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExtensionAcquisitionRequest Contract for handling the extension acquisition process
// swagger:model ExtensionAcquisitionRequest
type ExtensionAcquisitionRequest struct {

	// How the item is being assigned
	// Enum: [none me all]
	AssignmentType interface{} `json:"assignmentType,omitempty"`

	// The id of the subscription used for purchase
	BillingID string `json:"billingId,omitempty"`

	// The marketplace id (publisherName.extensionName) for the item
	ItemID string `json:"itemId,omitempty"`

	// The type of operation, such as install, request, purchase
	// Enum: [get install buy try request none purchaseRequest]
	OperationType interface{} `json:"operationType,omitempty"`

	// Additional properties which can be added to the request.
	Properties *JObject `json:"properties,omitempty"`

	// How many licenses should be purchased
	Quantity int32 `json:"quantity,omitempty"`
}

// Validate validates this extension acquisition request
func (m *ExtensionAcquisitionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionAcquisitionRequest) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtensionAcquisitionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtensionAcquisitionRequest) UnmarshalBinary(b []byte) error {
	var res ExtensionAcquisitionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
