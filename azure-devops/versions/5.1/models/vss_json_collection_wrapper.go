// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VssJSONCollectionWrapper This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole
// swagger:model VssJsonCollectionWrapper
type VssJSONCollectionWrapper struct {
	VssJSONCollectionWrapperBase

	// value
	Value string `json:"value,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VssJSONCollectionWrapper) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VssJSONCollectionWrapperBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VssJSONCollectionWrapperBase = aO0

	// now for regular properties
	var propsVssJSONCollectionWrapper struct {
		Value string `json:"value,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsVssJSONCollectionWrapper); err != nil {
		return err
	}
	m.Value = propsVssJSONCollectionWrapper.Value

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VssJSONCollectionWrapper) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.VssJSONCollectionWrapperBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsVssJSONCollectionWrapper struct {
		Value string `json:"value,omitempty"`
	}
	propsVssJSONCollectionWrapper.Value = m.Value

	jsonDataPropsVssJSONCollectionWrapper, errVssJSONCollectionWrapper := swag.WriteJSON(propsVssJSONCollectionWrapper)
	if errVssJSONCollectionWrapper != nil {
		return nil, errVssJSONCollectionWrapper
	}
	_parts = append(_parts, jsonDataPropsVssJSONCollectionWrapper)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vss Json collection wrapper
func (m *VssJSONCollectionWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VssJSONCollectionWrapperBase
	if err := m.VssJSONCollectionWrapperBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VssJSONCollectionWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VssJSONCollectionWrapper) UnmarshalBinary(b []byte) error {
	var res VssJSONCollectionWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
