// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessPromoteStatus Describes result of process operation promote.
// swagger:model ProcessPromoteStatus
type ProcessPromoteStatus struct {

	// Number of projects for which promote is complete.
	Complete int32 `json:"complete,omitempty"`

	// ID of the promote operation.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The error message assoicated with the promote operation. The string will be empty if there are no errors.
	Message string `json:"message,omitempty"`

	// Number of projects for which promote is pending.
	Pending int32 `json:"pending,omitempty"`

	// The remaining retries.
	RemainingRetries int32 `json:"remainingRetries,omitempty"`

	// True if promote finished all the projects successfully. False if still inprogress or any project promote failed.
	Successful bool `json:"successful,omitempty"`
}

// Validate validates this process promote status
func (m *ProcessPromoteStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessPromoteStatus) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessPromoteStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessPromoteStatus) UnmarshalBinary(b []byte) error {
	var res ProcessPromoteStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
