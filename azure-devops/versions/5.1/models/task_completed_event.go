// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskCompletedEvent task completed event
// swagger:model TaskCompletedEvent
type TaskCompletedEvent struct {
	TaskEvent

	// result
	// Enum: [succeeded succeededWithIssues failed canceled skipped abandoned]
	Result interface{} `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskCompletedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskEvent = aO0

	// now for regular properties
	var propsTaskCompletedEvent struct {
		Result interface{} `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskCompletedEvent); err != nil {
		return err
	}
	m.Result = propsTaskCompletedEvent.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskCompletedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskCompletedEvent struct {
		Result interface{} `json:"result,omitempty"`
	}
	propsTaskCompletedEvent.Result = m.Result

	jsonDataPropsTaskCompletedEvent, errTaskCompletedEvent := swag.WriteJSON(propsTaskCompletedEvent)
	if errTaskCompletedEvent != nil {
		return nil, errTaskCompletedEvent
	}
	_parts = append(_parts, jsonDataPropsTaskCompletedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task completed event
func (m *TaskCompletedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskEvent
	if err := m.TaskEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TaskCompletedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskCompletedEvent) UnmarshalBinary(b []byte) error {
	var res TaskCompletedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
