// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlanMetadata Metadata about a plan definition that is stored in favorites service
// swagger:model PlanMetadata
type PlanMetadata struct {

	// Identity of the creator of the plan
	CreatedByIdentity *IdentityRef `json:"createdByIdentity,omitempty"`

	// Description of plan
	Description string `json:"description,omitempty"`

	// Last modified date of the plan
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// Bit flag indicating set of permissions a user has to the plan.
	// Enum: [none view edit delete manage allPermissions]
	UserPermissions interface{} `json:"userPermissions,omitempty"`
}

// Validate validates this plan metadata
func (m *PlanMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedByIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanMetadata) validateCreatedByIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedByIdentity) { // not required
		return nil
	}

	if m.CreatedByIdentity != nil {
		if err := m.CreatedByIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdByIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *PlanMetadata) validateModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanMetadata) UnmarshalBinary(b []byte) error {
	var res PlanMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
