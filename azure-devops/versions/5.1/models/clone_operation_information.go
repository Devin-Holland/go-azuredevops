// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloneOperationInformation Detail About Clone Operation.
// swagger:model CloneOperationInformation
type CloneOperationInformation struct {

	// Clone Statistics
	CloneStatistics *CloneStatistics `json:"cloneStatistics,omitempty"`

	// If the operation is complete, the DateTime of completion. If operation is not complete, this is DateTime.MaxValue
	// Format: date-time
	CompletionDate strfmt.DateTime `json:"completionDate,omitempty"`

	// DateTime when the operation was started
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Shallow reference of the destination
	DestinationObject *ShallowReference `json:"destinationObject,omitempty"`

	// Shallow reference of the destination
	DestinationPlan *ShallowReference `json:"destinationPlan,omitempty"`

	// Shallow reference of the destination
	DestinationProject *ShallowReference `json:"destinationProject,omitempty"`

	// If the operation has Failed, Message contains the reason for failure. Null otherwise.
	Message string `json:"message,omitempty"`

	// The ID of the operation
	OpID int32 `json:"opId,omitempty"`

	// The type of the object generated as a result of the Clone operation
	// Enum: [testSuite testPlan]
	ResultObjectType interface{} `json:"resultObjectType,omitempty"`

	// Shallow reference of the source
	SourceObject *ShallowReference `json:"sourceObject,omitempty"`

	// Shallow reference of the source
	SourcePlan *ShallowReference `json:"sourcePlan,omitempty"`

	// Shallow reference of the source
	SourceProject *ShallowReference `json:"sourceProject,omitempty"`

	// Current state of the operation. When State reaches Suceeded or Failed, the operation is complete
	// Enum: [failed inProgress queued succeeded]
	State interface{} `json:"state,omitempty"`

	// Url for geting the clone information
	URL string `json:"url,omitempty"`
}

// Validate validates this clone operation information
func (m *CloneOperationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloneStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneOperationInformation) validateCloneStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.CloneStatistics) { // not required
		return nil
	}

	if m.CloneStatistics != nil {
		if err := m.CloneStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completionDate", "body", "date-time", m.CompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloneOperationInformation) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloneOperationInformation) validateDestinationObject(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationObject) { // not required
		return nil
	}

	if m.DestinationObject != nil {
		if err := m.DestinationObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationObject")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateDestinationPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationPlan) { // not required
		return nil
	}

	if m.DestinationPlan != nil {
		if err := m.DestinationPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationPlan")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateDestinationProject(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationProject) { // not required
		return nil
	}

	if m.DestinationProject != nil {
		if err := m.DestinationProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationProject")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateSourceObject(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceObject) { // not required
		return nil
	}

	if m.SourceObject != nil {
		if err := m.SourceObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObject")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateSourcePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePlan) { // not required
		return nil
	}

	if m.SourcePlan != nil {
		if err := m.SourcePlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePlan")
			}
			return err
		}
	}

	return nil
}

func (m *CloneOperationInformation) validateSourceProject(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceProject) { // not required
		return nil
	}

	if m.SourceProject != nil {
		if err := m.SourceProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceProject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneOperationInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneOperationInformation) UnmarshalBinary(b []byte) error {
	var res CloneOperationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
