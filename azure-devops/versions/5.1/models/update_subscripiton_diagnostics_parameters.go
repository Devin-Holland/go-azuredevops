// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UpdateSubscripitonDiagnosticsParameters update subscripiton diagnostics parameters
// swagger:model UpdateSubscripitonDiagnosticsParameters
type UpdateSubscripitonDiagnosticsParameters struct {

	// delivery results
	DeliveryResults *UpdateSubscripitonTracingParameters `json:"deliveryResults,omitempty"`

	// delivery tracing
	DeliveryTracing *UpdateSubscripitonTracingParameters `json:"deliveryTracing,omitempty"`

	// evaluation tracing
	EvaluationTracing *UpdateSubscripitonTracingParameters `json:"evaluationTracing,omitempty"`
}

// Validate validates this update subscripiton diagnostics parameters
func (m *UpdateSubscripitonDiagnosticsParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryTracing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationTracing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSubscripitonDiagnosticsParameters) validateDeliveryResults(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryResults) { // not required
		return nil
	}

	if m.DeliveryResults != nil {
		if err := m.DeliveryResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryResults")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateSubscripitonDiagnosticsParameters) validateDeliveryTracing(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryTracing) { // not required
		return nil
	}

	if m.DeliveryTracing != nil {
		if err := m.DeliveryTracing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryTracing")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateSubscripitonDiagnosticsParameters) validateEvaluationTracing(formats strfmt.Registry) error {

	if swag.IsZero(m.EvaluationTracing) { // not required
		return nil
	}

	if m.EvaluationTracing != nil {
		if err := m.EvaluationTracing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationTracing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSubscripitonDiagnosticsParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSubscripitonDiagnosticsParameters) UnmarshalBinary(b []byte) error {
	var res UpdateSubscripitonDiagnosticsParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
