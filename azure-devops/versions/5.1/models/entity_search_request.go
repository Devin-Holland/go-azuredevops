// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EntitySearchRequest Base contract for search request types without scroll support.
// swagger:model EntitySearchRequest
type EntitySearchRequest struct {
	EntitySearchRequestBase

	// Options for sorting search results. If set to null, the results will be returned sorted by relevance. If more than one sort option is provided, the results are sorted in the order specified in the OrderBy.
	NrDollarOrderBy []*SortOption `json:"$orderBy"`

	// Number of results to be skipped.
	NrDollarSkip int32 `json:"$skip,omitempty"`

	// Number of results to be returned.
	NrDollarTop int32 `json:"$top,omitempty"`

	// Flag to opt for faceting in the result. Default behavior is false.
	IncludeFacets bool `json:"includeFacets,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EntitySearchRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EntitySearchRequestBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EntitySearchRequestBase = aO0

	// now for regular properties
	var propsEntitySearchRequest struct {
		NrDollarOrderBy []*SortOption `json:"$orderBy"`

		NrDollarSkip int32 `json:"$skip,omitempty"`

		NrDollarTop int32 `json:"$top,omitempty"`

		IncludeFacets bool `json:"includeFacets,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsEntitySearchRequest); err != nil {
		return err
	}
	m.NrDollarOrderBy = propsEntitySearchRequest.NrDollarOrderBy

	m.NrDollarSkip = propsEntitySearchRequest.NrDollarSkip

	m.NrDollarTop = propsEntitySearchRequest.NrDollarTop

	m.IncludeFacets = propsEntitySearchRequest.IncludeFacets

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EntitySearchRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.EntitySearchRequestBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsEntitySearchRequest struct {
		NrDollarOrderBy []*SortOption `json:"$orderBy"`

		NrDollarSkip int32 `json:"$skip,omitempty"`

		NrDollarTop int32 `json:"$top,omitempty"`

		IncludeFacets bool `json:"includeFacets,omitempty"`
	}
	propsEntitySearchRequest.NrDollarOrderBy = m.NrDollarOrderBy

	propsEntitySearchRequest.NrDollarSkip = m.NrDollarSkip

	propsEntitySearchRequest.NrDollarTop = m.NrDollarTop

	propsEntitySearchRequest.IncludeFacets = m.IncludeFacets

	jsonDataPropsEntitySearchRequest, errEntitySearchRequest := swag.WriteJSON(propsEntitySearchRequest)
	if errEntitySearchRequest != nil {
		return nil, errEntitySearchRequest
	}
	_parts = append(_parts, jsonDataPropsEntitySearchRequest)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this entity search request
func (m *EntitySearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EntitySearchRequestBase
	if err := m.EntitySearchRequestBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNrDollarOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySearchRequest) validateNrDollarOrderBy(formats strfmt.Registry) error {

	if swag.IsZero(m.NrDollarOrderBy) { // not required
		return nil
	}

	for i := 0; i < len(m.NrDollarOrderBy); i++ {
		if swag.IsZero(m.NrDollarOrderBy[i]) { // not required
			continue
		}

		if m.NrDollarOrderBy[i] != nil {
			if err := m.NrDollarOrderBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("$orderBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitySearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySearchRequest) UnmarshalBinary(b []byte) error {
	var res EntitySearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
