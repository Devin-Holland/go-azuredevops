// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseGates release gates
// swagger:model ReleaseGates
type ReleaseGates struct {

	// Contains the gates job details of each evaluation.
	DeploymentJobs []*DeploymentJob `json:"deploymentJobs"`

	// ID of release gates.
	ID int32 `json:"id,omitempty"`

	// List of ignored gates.
	IgnoredGates []*IgnoredGate `json:"ignoredGates"`

	// Gates last modified time.
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"lastModifiedOn,omitempty"`

	// Run plan ID of the gates.
	// Format: uuid
	RunPlanID strfmt.UUID `json:"runPlanId,omitempty"`

	// Gates stabilization completed date and time.
	// Format: date-time
	StabilizationCompletedOn strfmt.DateTime `json:"stabilizationCompletedOn,omitempty"`

	// Gates evaluation started time.
	// Format: date-time
	StartedOn strfmt.DateTime `json:"startedOn,omitempty"`

	// Status of release gates.
	// Enum: [none pending inProgress succeeded failed canceled]
	Status interface{} `json:"status,omitempty"`

	// Date and time at which all gates executed successfully.
	// Format: date-time
	SucceedingSince strfmt.DateTime `json:"succeedingSince,omitempty"`
}

// Validate validates this release gates
func (m *ReleaseGates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnoredGates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStabilizationCompletedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSucceedingSince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseGates) validateDeploymentJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentJobs); i++ {
		if swag.IsZero(m.DeploymentJobs[i]) { // not required
			continue
		}

		if m.DeploymentJobs[i] != nil {
			if err := m.DeploymentJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deploymentJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseGates) validateIgnoredGates(formats strfmt.Registry) error {

	if swag.IsZero(m.IgnoredGates) { // not required
		return nil
	}

	for i := 0; i < len(m.IgnoredGates); i++ {
		if swag.IsZero(m.IgnoredGates[i]) { // not required
			continue
		}

		if m.IgnoredGates[i] != nil {
			if err := m.IgnoredGates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignoredGates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseGates) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseGates) validateRunPlanID(formats strfmt.Registry) error {

	if swag.IsZero(m.RunPlanID) { // not required
		return nil
	}

	if err := validate.FormatOf("runPlanId", "body", "uuid", m.RunPlanID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseGates) validateStabilizationCompletedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.StabilizationCompletedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("stabilizationCompletedOn", "body", "date-time", m.StabilizationCompletedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseGates) validateStartedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("startedOn", "body", "date-time", m.StartedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseGates) validateSucceedingSince(formats strfmt.Registry) error {

	if swag.IsZero(m.SucceedingSince) { // not required
		return nil
	}

	if err := validate.FormatOf("succeedingSince", "body", "date-time", m.SucceedingSince.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseGates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseGates) UnmarshalBinary(b []byte) error {
	var res ReleaseGates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
