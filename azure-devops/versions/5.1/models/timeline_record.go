// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimelineRecord timeline record
// swagger:model TimelineRecord
type TimelineRecord struct {

	// attempt
	Attempt int32 `json:"attempt,omitempty"`

	// change Id
	ChangeID int32 `json:"changeId,omitempty"`

	// current operation
	CurrentOperation string `json:"currentOperation,omitempty"`

	// details
	Details *TimelineReference `json:"details,omitempty"`

	// error count
	ErrorCount int32 `json:"errorCount,omitempty"`

	// finish time
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// issues
	Issues []*Issue `json:"issues"`

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// log
	Log *TaskLogReference `json:"log,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// order
	Order int32 `json:"order,omitempty"`

	// parent Id
	// Format: uuid
	ParentID strfmt.UUID `json:"parentId,omitempty"`

	// percent complete
	PercentComplete int32 `json:"percentComplete,omitempty"`

	// previous attempts
	PreviousAttempts []*TimelineAttempt `json:"previousAttempts"`

	// ref name
	RefName string `json:"refName,omitempty"`

	// result
	// Enum: [succeeded succeededWithIssues failed canceled skipped abandoned]
	Result interface{} `json:"result,omitempty"`

	// result code
	ResultCode string `json:"resultCode,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// state
	// Enum: [pending inProgress completed]
	State interface{} `json:"state,omitempty"`

	// task
	Task *TaskReference `json:"task,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// variables
	Variables map[string]VariableValue `json:"variables,omitempty"`

	// warning count
	WarningCount int32 `json:"warningCount,omitempty"`

	// worker name
	WorkerName string `json:"workerName,omitempty"`
}

// Validate validates this timeline record
func (m *TimelineRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineRecord) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *TimelineRecord) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineRecord) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineRecord) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimelineRecord) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineRecord) validateLog(formats strfmt.Registry) error {

	if swag.IsZero(m.Log) { // not required
		return nil
	}

	if m.Log != nil {
		if err := m.Log.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("log")
			}
			return err
		}
	}

	return nil
}

func (m *TimelineRecord) validateParentID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentId", "body", "uuid", m.ParentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineRecord) validatePreviousAttempts(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousAttempts) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousAttempts); i++ {
		if swag.IsZero(m.PreviousAttempts[i]) { // not required
			continue
		}

		if m.PreviousAttempts[i] != nil {
			if err := m.PreviousAttempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimelineRecord) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimelineRecord) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

func (m *TimelineRecord) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineRecord) UnmarshalBinary(b []byte) error {
	var res TimelineRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
