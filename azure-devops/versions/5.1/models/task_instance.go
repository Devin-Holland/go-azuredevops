// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskInstance task instance
// swagger:model TaskInstance
type TaskInstance struct {
	TaskReference

	// always run
	AlwaysRun bool `json:"alwaysRun,omitempty"`

	// condition
	Condition string `json:"condition,omitempty"`

	// continue on error
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// environment
	Environment map[string]string `json:"environment,omitempty"`

	// instance Id
	// Format: uuid
	InstanceID strfmt.UUID `json:"instanceId,omitempty"`

	// ref name
	RefName string `json:"refName,omitempty"`

	// timeout in minutes
	TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskInstance) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TaskReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TaskReference = aO0

	// now for regular properties
	var propsTaskInstance struct {
		AlwaysRun bool `json:"alwaysRun,omitempty"`

		Condition string `json:"condition,omitempty"`

		ContinueOnError bool `json:"continueOnError,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Environment map[string]string `json:"environment,omitempty"`

		InstanceID strfmt.UUID `json:"instanceId,omitempty"`

		RefName string `json:"refName,omitempty"`

		TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTaskInstance); err != nil {
		return err
	}
	m.AlwaysRun = propsTaskInstance.AlwaysRun

	m.Condition = propsTaskInstance.Condition

	m.ContinueOnError = propsTaskInstance.ContinueOnError

	m.DisplayName = propsTaskInstance.DisplayName

	m.Enabled = propsTaskInstance.Enabled

	m.Environment = propsTaskInstance.Environment

	m.InstanceID = propsTaskInstance.InstanceID

	m.RefName = propsTaskInstance.RefName

	m.TimeoutInMinutes = propsTaskInstance.TimeoutInMinutes

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskInstance) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TaskReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTaskInstance struct {
		AlwaysRun bool `json:"alwaysRun,omitempty"`

		Condition string `json:"condition,omitempty"`

		ContinueOnError bool `json:"continueOnError,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Environment map[string]string `json:"environment,omitempty"`

		InstanceID strfmt.UUID `json:"instanceId,omitempty"`

		RefName string `json:"refName,omitempty"`

		TimeoutInMinutes int32 `json:"timeoutInMinutes,omitempty"`
	}
	propsTaskInstance.AlwaysRun = m.AlwaysRun

	propsTaskInstance.Condition = m.Condition

	propsTaskInstance.ContinueOnError = m.ContinueOnError

	propsTaskInstance.DisplayName = m.DisplayName

	propsTaskInstance.Enabled = m.Enabled

	propsTaskInstance.Environment = m.Environment

	propsTaskInstance.InstanceID = m.InstanceID

	propsTaskInstance.RefName = m.RefName

	propsTaskInstance.TimeoutInMinutes = m.TimeoutInMinutes

	jsonDataPropsTaskInstance, errTaskInstance := swag.WriteJSON(propsTaskInstance)
	if errTaskInstance != nil {
		return nil, errTaskInstance
	}
	_parts = append(_parts, jsonDataPropsTaskInstance)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task instance
func (m *TaskInstance) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TaskReference
	if err := m.TaskReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskInstance) validateInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if err := validate.FormatOf("instanceId", "body", "uuid", m.InstanceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskInstance) UnmarshalBinary(b []byte) error {
	var res TaskInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
