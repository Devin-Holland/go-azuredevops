// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentManualInterventionPendingEvent deployment manual intervention pending event
// swagger:model DeploymentManualInterventionPendingEvent
type DeploymentManualInterventionPendingEvent struct {

	// deployment
	Deployment *Deployment `json:"deployment,omitempty"`

	// email recipients
	EmailRecipients []strfmt.UUID `json:"emailRecipients"`

	// environment owner
	EnvironmentOwner *IdentityRef `json:"environmentOwner,omitempty"`

	// manual intervention
	ManualIntervention *ManualIntervention `json:"manualIntervention,omitempty"`

	// project
	Project *ProjectReference `json:"project,omitempty"`

	// release
	Release *Release `json:"release,omitempty"`
}

// Validate validates this deployment manual intervention pending event
func (m *DeploymentManualInterventionPendingEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualIntervention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateDeployment(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployment) { // not required
		return nil
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateEmailRecipients(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailRecipients) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailRecipients); i++ {

		if err := validate.FormatOf("emailRecipients"+"."+strconv.Itoa(i), "body", "uuid", m.EmailRecipients[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateEnvironmentOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentOwner) { // not required
		return nil
	}

	if m.EnvironmentOwner != nil {
		if err := m.EnvironmentOwner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentOwner")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateManualIntervention(formats strfmt.Registry) error {

	if swag.IsZero(m.ManualIntervention) { // not required
		return nil
	}

	if m.ManualIntervention != nil {
		if err := m.ManualIntervention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manualIntervention")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentManualInterventionPendingEvent) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentManualInterventionPendingEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentManualInterventionPendingEvent) UnmarshalBinary(b []byte) error {
	var res DeploymentManualInterventionPendingEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
