// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FeedChangesResponse A result set containing the feed changes for the range that was requested.
// swagger:model FeedChangesResponse
type FeedChangesResponse struct {

	// links
	Links *ReferenceLinks `json:"_links,omitempty"`

	// The number of changes in this set.
	Count int32 `json:"count,omitempty"`

	// A container that encapsulates the state of the feed after a create, update, or delete.
	FeedChanges []*FeedChange `json:"feedChanges"`

	// When iterating through the log of changes this value indicates the value that should be used for the next continuation token.
	NextFeedContinuationToken int64 `json:"nextFeedContinuationToken,omitempty"`
}

// Validate validates this feed changes response
func (m *FeedChangesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedChanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeedChangesResponse) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *FeedChangesResponse) validateFeedChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedChanges) { // not required
		return nil
	}

	for i := 0; i < len(m.FeedChanges); i++ {
		if swag.IsZero(m.FeedChanges[i]) { // not required
			continue
		}

		if m.FeedChanges[i] != nil {
			if err := m.FeedChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feedChanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedChangesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedChangesResponse) UnmarshalBinary(b []byte) error {
	var res FeedChangesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
