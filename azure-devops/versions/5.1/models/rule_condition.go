// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// RuleCondition Defines a condition on a field when the rule should be triggered.
// swagger:model RuleCondition
type RuleCondition struct {

	// Type of condition. $When. This condition limits the execution of its children to cases when another field has a particular value, i.e. when the Is value of the referenced field is equal to the given literal value. $WhenNot.This condition limits the execution of its children to cases when another field does not have a particular value, i.e.when the Is value of the referenced field is not equal to the given literal value. $WhenChanged.This condition limits the execution of its children to cases when another field has changed, i.e.when the Is value of the referenced field is not equal to the Was value of that field. $WhenNotChanged.This condition limits the execution of its children to cases when another field has not changed, i.e.when the Is value of the referenced field is equal to the Was value of that field.
	// Enum: [when whenNot whenChanged whenNotChanged whenWas whenStateChangedTo whenStateChangedFromAndTo whenWorkItemIsCreated whenValueIsDefined whenValueIsNotDefined]
	ConditionType interface{} `json:"conditionType,omitempty"`

	// Field that defines condition.
	Field string `json:"field,omitempty"`

	// Value of field to define the condition for rule.
	Value string `json:"value,omitempty"`
}

// Validate validates this rule condition
func (m *RuleCondition) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RuleCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleCondition) UnmarshalBinary(b []byte) error {
	var res RuleCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
