// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestPlanDetailedReference The test plan detailed reference resource. Contains additional workitem realted information
// swagger:model TestPlanDetailedReference
type TestPlanDetailedReference struct {
	TestPlanReference

	// Area of the test plan.
	AreaPath string `json:"areaPath,omitempty"`

	// End date for the test plan.
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Iteration path of the test plan.
	Iteration string `json:"iteration,omitempty"`

	// Root Suite Id
	RootSuiteID int32 `json:"rootSuiteId,omitempty"`

	// Start date for the test plan.
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestPlanDetailedReference) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestPlanReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestPlanReference = aO0

	// now for regular properties
	var propsTestPlanDetailedReference struct {
		AreaPath string `json:"areaPath,omitempty"`

		EndDate strfmt.DateTime `json:"endDate,omitempty"`

		Iteration string `json:"iteration,omitempty"`

		RootSuiteID int32 `json:"rootSuiteId,omitempty"`

		StartDate strfmt.DateTime `json:"startDate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTestPlanDetailedReference); err != nil {
		return err
	}
	m.AreaPath = propsTestPlanDetailedReference.AreaPath

	m.EndDate = propsTestPlanDetailedReference.EndDate

	m.Iteration = propsTestPlanDetailedReference.Iteration

	m.RootSuiteID = propsTestPlanDetailedReference.RootSuiteID

	m.StartDate = propsTestPlanDetailedReference.StartDate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestPlanDetailedReference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TestPlanReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTestPlanDetailedReference struct {
		AreaPath string `json:"areaPath,omitempty"`

		EndDate strfmt.DateTime `json:"endDate,omitempty"`

		Iteration string `json:"iteration,omitempty"`

		RootSuiteID int32 `json:"rootSuiteId,omitempty"`

		StartDate strfmt.DateTime `json:"startDate,omitempty"`
	}
	propsTestPlanDetailedReference.AreaPath = m.AreaPath

	propsTestPlanDetailedReference.EndDate = m.EndDate

	propsTestPlanDetailedReference.Iteration = m.Iteration

	propsTestPlanDetailedReference.RootSuiteID = m.RootSuiteID

	propsTestPlanDetailedReference.StartDate = m.StartDate

	jsonDataPropsTestPlanDetailedReference, errTestPlanDetailedReference := swag.WriteJSON(propsTestPlanDetailedReference)
	if errTestPlanDetailedReference != nil {
		return nil, errTestPlanDetailedReference
	}
	_parts = append(_parts, jsonDataPropsTestPlanDetailedReference)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test plan detailed reference
func (m *TestPlanDetailedReference) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestPlanReference
	if err := m.TestPlanReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlanDetailedReference) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestPlanDetailedReference) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPlanDetailedReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPlanDetailedReference) UnmarshalBinary(b []byte) error {
	var res TestPlanDetailedReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
