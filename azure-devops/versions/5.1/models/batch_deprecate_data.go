// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// BatchDeprecateData Data required to deprecate multiple package versions. Pass this while performing NpmBatchOperationTypes.Deprecate batch operation.
// swagger:model BatchDeprecateData
type BatchDeprecateData struct {
	BatchOperationData

	// Deprecate message that will be added to packages
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BatchDeprecateData) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BatchOperationData
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BatchOperationData = aO0

	// now for regular properties
	var propsBatchDeprecateData struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsBatchDeprecateData); err != nil {
		return err
	}
	m.Message = propsBatchDeprecateData.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BatchDeprecateData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BatchOperationData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBatchDeprecateData struct {
		Message string `json:"message,omitempty"`
	}
	propsBatchDeprecateData.Message = m.Message

	jsonDataPropsBatchDeprecateData, errBatchDeprecateData := swag.WriteJSON(propsBatchDeprecateData)
	if errBatchDeprecateData != nil {
		return nil, errBatchDeprecateData
	}
	_parts = append(_parts, jsonDataPropsBatchDeprecateData)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this batch deprecate data
func (m *BatchDeprecateData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BatchDeprecateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchDeprecateData) UnmarshalBinary(b []byte) error {
	var res BatchDeprecateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
