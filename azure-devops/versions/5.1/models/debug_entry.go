// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DebugEntry A dual-purpose data object, the debug entry is used by the client to publish the symbol file (with file's blob identifier, which can be calculated from VSTS hashing algorithm) or query the file (with a client key). Since the symbol server tries to return a matched symbol file with the richest information level, it may not always point to the same symbol file for different queries with same client key.
// swagger:model DebugEntry
type DebugEntry struct {
	ResourceBase

	// Details of the blob formatted to be deserialized for symbol service.
	BlobDetails *JSONBlobIdentifierWithBlocks `json:"blobDetails,omitempty"`

	// A blob identifier of the symbol file to upload to this debug entry. This property is mostly used during creation of debug entry (a.k.a. symbol publishing) to allow the server to query the existence of the blob.
	BlobIdentifier *JSONBlobIdentifier `json:"blobIdentifier,omitempty"`

	// The URI to get the symbol file. Provided by the server, the URI contains authentication information and is readily accessible by plain HTTP GET request. The client is recommended to retrieve the file as soon as it can since the URI will expire in a short period.
	BlobURI string `json:"blobUri,omitempty"`

	// A key the client (debugger, for example) uses to find the debug entry. Note it is not unique for each different symbol file as it does not distinguish between those which only differ by information level.
	ClientKey string `json:"clientKey,omitempty"`

	// The information level this debug entry contains.
	// Enum: [none binary publics traceFormatPresent typeInfo lineNumbers globalSymbols private sourceIndexed]
	InformationLevel interface{} `json:"informationLevel,omitempty"`

	// The identifier of symbol request to which this debug entry belongs.
	RequestID string `json:"requestId,omitempty"`

	// The status of debug entry.
	// Enum: [none created blobMissing]
	Status interface{} `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DebugEntry) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResourceBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResourceBase = aO0

	// now for regular properties
	var propsDebugEntry struct {
		BlobDetails *JSONBlobIdentifierWithBlocks `json:"blobDetails,omitempty"`

		BlobIdentifier *JSONBlobIdentifier `json:"blobIdentifier,omitempty"`

		BlobURI string `json:"blobUri,omitempty"`

		ClientKey string `json:"clientKey,omitempty"`

		InformationLevel interface{} `json:"informationLevel,omitempty"`

		RequestID string `json:"requestId,omitempty"`

		Status interface{} `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsDebugEntry); err != nil {
		return err
	}
	m.BlobDetails = propsDebugEntry.BlobDetails

	m.BlobIdentifier = propsDebugEntry.BlobIdentifier

	m.BlobURI = propsDebugEntry.BlobURI

	m.ClientKey = propsDebugEntry.ClientKey

	m.InformationLevel = propsDebugEntry.InformationLevel

	m.RequestID = propsDebugEntry.RequestID

	m.Status = propsDebugEntry.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DebugEntry) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ResourceBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDebugEntry struct {
		BlobDetails *JSONBlobIdentifierWithBlocks `json:"blobDetails,omitempty"`

		BlobIdentifier *JSONBlobIdentifier `json:"blobIdentifier,omitempty"`

		BlobURI string `json:"blobUri,omitempty"`

		ClientKey string `json:"clientKey,omitempty"`

		InformationLevel interface{} `json:"informationLevel,omitempty"`

		RequestID string `json:"requestId,omitempty"`

		Status interface{} `json:"status,omitempty"`
	}
	propsDebugEntry.BlobDetails = m.BlobDetails

	propsDebugEntry.BlobIdentifier = m.BlobIdentifier

	propsDebugEntry.BlobURI = m.BlobURI

	propsDebugEntry.ClientKey = m.ClientKey

	propsDebugEntry.InformationLevel = m.InformationLevel

	propsDebugEntry.RequestID = m.RequestID

	propsDebugEntry.Status = m.Status

	jsonDataPropsDebugEntry, errDebugEntry := swag.WriteJSON(propsDebugEntry)
	if errDebugEntry != nil {
		return nil, errDebugEntry
	}
	_parts = append(_parts, jsonDataPropsDebugEntry)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this debug entry
func (m *DebugEntry) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResourceBase
	if err := m.ResourceBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlobDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlobIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugEntry) validateBlobDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.BlobDetails) { // not required
		return nil
	}

	if m.BlobDetails != nil {
		if err := m.BlobDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blobDetails")
			}
			return err
		}
	}

	return nil
}

func (m *DebugEntry) validateBlobIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.BlobIdentifier) { // not required
		return nil
	}

	if m.BlobIdentifier != nil {
		if err := m.BlobIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blobIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebugEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugEntry) UnmarshalBinary(b []byte) error {
	var res DebugEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
