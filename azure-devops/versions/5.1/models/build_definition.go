// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildDefinition Represents a build definition.
// swagger:model BuildDefinition
type BuildDefinition struct {
	BuildDefinitionReference

	// Indicates whether badges are enabled for this definition.
	BadgeEnabled bool `json:"badgeEnabled,omitempty"`

	// The build number format.
	BuildNumberFormat string `json:"buildNumberFormat,omitempty"`

	// A save-time comment for the definition.
	Comment string `json:"comment,omitempty"`

	// demands
	Demands []*Demand `json:"demands"`

	// The description.
	Description string `json:"description,omitempty"`

	// The drop location for the definition.
	DropLocation string `json:"dropLocation,omitempty"`

	// The job authorization scope for builds queued against this definition.
	// Enum: [projectCollection project]
	JobAuthorizationScope interface{} `json:"jobAuthorizationScope,omitempty"`

	// The job cancel timeout (in minutes) for builds cancelled by user for this definition.
	JobCancelTimeoutInMinutes int32 `json:"jobCancelTimeoutInMinutes,omitempty"`

	// The job execution timeout (in minutes) for builds queued against this definition.
	JobTimeoutInMinutes int32 `json:"jobTimeoutInMinutes,omitempty"`

	// options
	Options []*BuildOption `json:"options"`

	// The build process.
	Process *BuildProcess `json:"process,omitempty"`

	// The process parameters for this definition.
	ProcessParameters *ProcessParameters `json:"processParameters,omitempty"`

	// properties
	Properties *PropertiesCollection `json:"properties,omitempty"`

	// The repository.
	Repository *BuildRepository `json:"repository,omitempty"`

	// retention rules
	RetentionRules []*RetentionPolicy `json:"retentionRules"`

	// tags
	Tags []string `json:"tags"`

	// triggers
	Triggers []*BuildTrigger `json:"triggers"`

	// variable groups
	VariableGroups []*VariableGroup `json:"variableGroups"`

	// variables
	Variables map[string]BuildDefinitionVariable `json:"variables,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BuildDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BuildDefinitionReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BuildDefinitionReference = aO0

	// now for regular properties
	var propsBuildDefinition struct {
		BadgeEnabled bool `json:"badgeEnabled,omitempty"`

		BuildNumberFormat string `json:"buildNumberFormat,omitempty"`

		Comment string `json:"comment,omitempty"`

		Demands []*Demand `json:"demands"`

		Description string `json:"description,omitempty"`

		DropLocation string `json:"dropLocation,omitempty"`

		JobAuthorizationScope interface{} `json:"jobAuthorizationScope,omitempty"`

		JobCancelTimeoutInMinutes int32 `json:"jobCancelTimeoutInMinutes,omitempty"`

		JobTimeoutInMinutes int32 `json:"jobTimeoutInMinutes,omitempty"`

		Options []*BuildOption `json:"options"`

		Process *BuildProcess `json:"process,omitempty"`

		ProcessParameters *ProcessParameters `json:"processParameters,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		Repository *BuildRepository `json:"repository,omitempty"`

		RetentionRules []*RetentionPolicy `json:"retentionRules"`

		Tags []string `json:"tags"`

		Triggers []*BuildTrigger `json:"triggers"`

		VariableGroups []*VariableGroup `json:"variableGroups"`

		Variables map[string]BuildDefinitionVariable `json:"variables,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsBuildDefinition); err != nil {
		return err
	}
	m.BadgeEnabled = propsBuildDefinition.BadgeEnabled

	m.BuildNumberFormat = propsBuildDefinition.BuildNumberFormat

	m.Comment = propsBuildDefinition.Comment

	m.Demands = propsBuildDefinition.Demands

	m.Description = propsBuildDefinition.Description

	m.DropLocation = propsBuildDefinition.DropLocation

	m.JobAuthorizationScope = propsBuildDefinition.JobAuthorizationScope

	m.JobCancelTimeoutInMinutes = propsBuildDefinition.JobCancelTimeoutInMinutes

	m.JobTimeoutInMinutes = propsBuildDefinition.JobTimeoutInMinutes

	m.Options = propsBuildDefinition.Options

	m.Process = propsBuildDefinition.Process

	m.ProcessParameters = propsBuildDefinition.ProcessParameters

	m.Properties = propsBuildDefinition.Properties

	m.Repository = propsBuildDefinition.Repository

	m.RetentionRules = propsBuildDefinition.RetentionRules

	m.Tags = propsBuildDefinition.Tags

	m.Triggers = propsBuildDefinition.Triggers

	m.VariableGroups = propsBuildDefinition.VariableGroups

	m.Variables = propsBuildDefinition.Variables

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BuildDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BuildDefinitionReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBuildDefinition struct {
		BadgeEnabled bool `json:"badgeEnabled,omitempty"`

		BuildNumberFormat string `json:"buildNumberFormat,omitempty"`

		Comment string `json:"comment,omitempty"`

		Demands []*Demand `json:"demands"`

		Description string `json:"description,omitempty"`

		DropLocation string `json:"dropLocation,omitempty"`

		JobAuthorizationScope interface{} `json:"jobAuthorizationScope,omitempty"`

		JobCancelTimeoutInMinutes int32 `json:"jobCancelTimeoutInMinutes,omitempty"`

		JobTimeoutInMinutes int32 `json:"jobTimeoutInMinutes,omitempty"`

		Options []*BuildOption `json:"options"`

		Process *BuildProcess `json:"process,omitempty"`

		ProcessParameters *ProcessParameters `json:"processParameters,omitempty"`

		Properties *PropertiesCollection `json:"properties,omitempty"`

		Repository *BuildRepository `json:"repository,omitempty"`

		RetentionRules []*RetentionPolicy `json:"retentionRules"`

		Tags []string `json:"tags"`

		Triggers []*BuildTrigger `json:"triggers"`

		VariableGroups []*VariableGroup `json:"variableGroups"`

		Variables map[string]BuildDefinitionVariable `json:"variables,omitempty"`
	}
	propsBuildDefinition.BadgeEnabled = m.BadgeEnabled

	propsBuildDefinition.BuildNumberFormat = m.BuildNumberFormat

	propsBuildDefinition.Comment = m.Comment

	propsBuildDefinition.Demands = m.Demands

	propsBuildDefinition.Description = m.Description

	propsBuildDefinition.DropLocation = m.DropLocation

	propsBuildDefinition.JobAuthorizationScope = m.JobAuthorizationScope

	propsBuildDefinition.JobCancelTimeoutInMinutes = m.JobCancelTimeoutInMinutes

	propsBuildDefinition.JobTimeoutInMinutes = m.JobTimeoutInMinutes

	propsBuildDefinition.Options = m.Options

	propsBuildDefinition.Process = m.Process

	propsBuildDefinition.ProcessParameters = m.ProcessParameters

	propsBuildDefinition.Properties = m.Properties

	propsBuildDefinition.Repository = m.Repository

	propsBuildDefinition.RetentionRules = m.RetentionRules

	propsBuildDefinition.Tags = m.Tags

	propsBuildDefinition.Triggers = m.Triggers

	propsBuildDefinition.VariableGroups = m.VariableGroups

	propsBuildDefinition.Variables = m.Variables

	jsonDataPropsBuildDefinition, errBuildDefinition := swag.WriteJSON(propsBuildDefinition)
	if errBuildDefinition != nil {
		return nil, errBuildDefinition
	}
	_parts = append(_parts, jsonDataPropsBuildDefinition)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this build definition
func (m *BuildDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BuildDefinitionReference
	if err := m.BuildDefinitionReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildDefinition) validateDemands(formats strfmt.Registry) error {

	if swag.IsZero(m.Demands) { // not required
		return nil
	}

	for i := 0; i < len(m.Demands); i++ {
		if swag.IsZero(m.Demands[i]) { // not required
			continue
		}

		if m.Demands[i] != nil {
			if err := m.Demands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("demands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinition) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinition) validateProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.Process) { // not required
		return nil
	}

	if m.Process != nil {
		if err := m.Process.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("process")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinition) validateProcessParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessParameters) { // not required
		return nil
	}

	if m.ProcessParameters != nil {
		if err := m.ProcessParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processParameters")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinition) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinition) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *BuildDefinition) validateRetentionRules(formats strfmt.Registry) error {

	if swag.IsZero(m.RetentionRules) { // not required
		return nil
	}

	for i := 0; i < len(m.RetentionRules); i++ {
		if swag.IsZero(m.RetentionRules[i]) { // not required
			continue
		}

		if m.RetentionRules[i] != nil {
			if err := m.RetentionRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retentionRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinition) validateTriggers(formats strfmt.Registry) error {

	if swag.IsZero(m.Triggers) { // not required
		return nil
	}

	for i := 0; i < len(m.Triggers); i++ {
		if swag.IsZero(m.Triggers[i]) { // not required
			continue
		}

		if m.Triggers[i] != nil {
			if err := m.Triggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinition) validateVariableGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableGroups); i++ {
		if swag.IsZero(m.VariableGroups[i]) { // not required
			continue
		}

		if m.VariableGroups[i] != nil {
			if err := m.VariableGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variableGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildDefinition) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildDefinition) UnmarshalBinary(b []byte) error {
	var res BuildDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
