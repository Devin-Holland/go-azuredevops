// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseDefinitionApprovalStep release definition approval step
// swagger:model ReleaseDefinitionApprovalStep
type ReleaseDefinitionApprovalStep struct {
	ReleaseDefinitionEnvironmentStep

	// Gets and sets the approver.
	Approver *IdentityRef `json:"approver,omitempty"`

	// Indicates whether the approval automated.
	IsAutomated bool `json:"isAutomated,omitempty"`

	// Indicates whether the approval notification set.
	IsNotificationOn bool `json:"isNotificationOn,omitempty"`

	// Gets or sets the rank of approval step.
	Rank int32 `json:"rank,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReleaseDefinitionApprovalStep) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReleaseDefinitionEnvironmentStep
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReleaseDefinitionEnvironmentStep = aO0

	// now for regular properties
	var propsReleaseDefinitionApprovalStep struct {
		Approver *IdentityRef `json:"approver,omitempty"`

		IsAutomated bool `json:"isAutomated,omitempty"`

		IsNotificationOn bool `json:"isNotificationOn,omitempty"`

		Rank int32 `json:"rank,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsReleaseDefinitionApprovalStep); err != nil {
		return err
	}
	m.Approver = propsReleaseDefinitionApprovalStep.Approver

	m.IsAutomated = propsReleaseDefinitionApprovalStep.IsAutomated

	m.IsNotificationOn = propsReleaseDefinitionApprovalStep.IsNotificationOn

	m.Rank = propsReleaseDefinitionApprovalStep.Rank

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReleaseDefinitionApprovalStep) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ReleaseDefinitionEnvironmentStep)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsReleaseDefinitionApprovalStep struct {
		Approver *IdentityRef `json:"approver,omitempty"`

		IsAutomated bool `json:"isAutomated,omitempty"`

		IsNotificationOn bool `json:"isNotificationOn,omitempty"`

		Rank int32 `json:"rank,omitempty"`
	}
	propsReleaseDefinitionApprovalStep.Approver = m.Approver

	propsReleaseDefinitionApprovalStep.IsAutomated = m.IsAutomated

	propsReleaseDefinitionApprovalStep.IsNotificationOn = m.IsNotificationOn

	propsReleaseDefinitionApprovalStep.Rank = m.Rank

	jsonDataPropsReleaseDefinitionApprovalStep, errReleaseDefinitionApprovalStep := swag.WriteJSON(propsReleaseDefinitionApprovalStep)
	if errReleaseDefinitionApprovalStep != nil {
		return nil, errReleaseDefinitionApprovalStep
	}
	_parts = append(_parts, jsonDataPropsReleaseDefinitionApprovalStep)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this release definition approval step
func (m *ReleaseDefinitionApprovalStep) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReleaseDefinitionEnvironmentStep
	if err := m.ReleaseDefinitionEnvironmentStep.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprover(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDefinitionApprovalStep) validateApprover(formats strfmt.Registry) error {

	if swag.IsZero(m.Approver) { // not required
		return nil
	}

	if m.Approver != nil {
		if err := m.Approver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approver")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDefinitionApprovalStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDefinitionApprovalStep) UnmarshalBinary(b []byte) error {
	var res ReleaseDefinitionApprovalStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
