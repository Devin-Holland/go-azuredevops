// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectInfo Contains information describing a project.
// swagger:model ProjectInfo
type ProjectInfo struct {

	// The abbreviated name of the project.
	Abbreviation string `json:"abbreviation,omitempty"`

	// The description of the project.
	Description string `json:"description,omitempty"`

	// The id of the project.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The time that this project was last updated.
	// Format: date-time
	LastUpdateTime strfmt.DateTime `json:"lastUpdateTime,omitempty"`

	// The name of the project.
	Name string `json:"name,omitempty"`

	// A set of name-value pairs storing additional property data related to the project.
	Properties []*ProjectProperty `json:"properties"`

	// The current revision of the project.
	Revision int64 `json:"revision,omitempty"`

	// The current state of the project.
	// Enum: [deleting new wellFormed createPending all unchanged deleted]
	State interface{} `json:"state,omitempty"`

	// A Uri that can be used to refer to this project.
	URI string `json:"uri,omitempty"`

	// The version number of the project.
	Version int64 `json:"version,omitempty"`

	// Indicates whom the project is visible to.
	// Enum: [private public]
	Visibility interface{} `json:"visibility,omitempty"`
}

// Validate validates this project info
func (m *ProjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInfo) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInfo) validateLastUpdateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdateTime", "body", "date-time", m.LastUpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInfo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInfo) UnmarshalBinary(b []byte) error {
	var res ProjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
