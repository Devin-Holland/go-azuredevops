// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AutoTriggerIssue auto trigger issue
// swagger:model AutoTriggerIssue
type AutoTriggerIssue struct {

	// issue
	Issue *Issue `json:"issue,omitempty"`

	// issue source
	// Enum: [none user system]
	IssueSource interface{} `json:"issueSource,omitempty"`

	// project
	Project *ProjectReference `json:"project,omitempty"`

	// release definition reference
	ReleaseDefinitionReference *ReleaseDefinitionShallowReference `json:"releaseDefinitionReference,omitempty"`

	// release trigger type
	// Enum: [undefined artifactSource schedule sourceRepo containerImage package pullRequest]
	ReleaseTriggerType interface{} `json:"releaseTriggerType,omitempty"`
}

// Validate validates this auto trigger issue
func (m *AutoTriggerIssue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDefinitionReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoTriggerIssue) validateIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.Issue) { // not required
		return nil
	}

	if m.Issue != nil {
		if err := m.Issue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issue")
			}
			return err
		}
	}

	return nil
}

func (m *AutoTriggerIssue) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *AutoTriggerIssue) validateReleaseDefinitionReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDefinitionReference) { // not required
		return nil
	}

	if m.ReleaseDefinitionReference != nil {
		if err := m.ReleaseDefinitionReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDefinitionReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoTriggerIssue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoTriggerIssue) UnmarshalBinary(b []byte) error {
	var res AutoTriggerIssue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
