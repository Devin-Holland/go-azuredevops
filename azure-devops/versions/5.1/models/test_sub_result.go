// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestSubResult Represents a sub result of a test result.
// swagger:model TestSubResult
type TestSubResult struct {

	// Comment in sub result.
	Comment string `json:"comment,omitempty"`

	// Time when test execution completed.
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Machine where test executed.
	ComputerName string `json:"computerName,omitempty"`

	// Reference to test configuration.
	Configuration *ShallowReference `json:"configuration,omitempty"`

	// Additional properties of sub result.
	CustomFields []*CustomTestField `json:"customFields"`

	// Name of sub result.
	DisplayName string `json:"displayName,omitempty"`

	// Duration of test execution.
	DurationInMs int64 `json:"durationInMs,omitempty"`

	// Error message in sub result.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// ID of sub result.
	ID int32 `json:"id,omitempty"`

	// Time when result last updated.
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// Outcome of sub result.
	Outcome string `json:"outcome,omitempty"`

	// Immediate parent ID of sub result.
	ParentID int32 `json:"parentId,omitempty"`

	// Hierarchy type of the result, default value of None means its leaf node.
	// Enum: [none rerun dataDriven orderedTest generic]
	ResultGroupType interface{} `json:"resultGroupType,omitempty"`

	// Index number of sub result.
	SequenceID int32 `json:"sequenceId,omitempty"`

	// Stacktrace.
	StackTrace string `json:"stackTrace,omitempty"`

	// Time when test execution started.
	// Format: date-time
	StartedDate strfmt.DateTime `json:"startedDate,omitempty"`

	// List of sub results inside a sub result, if ResultGroupType is not None, it holds corresponding type sub results.
	SubResults []*TestSubResult `json:"subResults"`

	// Reference to test result.
	TestResult *TestCaseResultIdentifier `json:"testResult,omitempty"`

	// Url of sub result.
	URL string `json:"url,omitempty"`
}

// Validate validates this test sub result
func (m *TestSubResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSubResult) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSubResult) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *TestSubResult) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSubResult) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSubResult) validateStartedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startedDate", "body", "date-time", m.StartedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestSubResult) validateSubResults(formats strfmt.Registry) error {

	if swag.IsZero(m.SubResults) { // not required
		return nil
	}

	for i := 0; i < len(m.SubResults); i++ {
		if swag.IsZero(m.SubResults[i]) { // not required
			continue
		}

		if m.SubResults[i] != nil {
			if err := m.SubResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSubResult) validateTestResult(formats strfmt.Registry) error {

	if swag.IsZero(m.TestResult) { // not required
		return nil
	}

	if m.TestResult != nil {
		if err := m.TestResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSubResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSubResult) UnmarshalBinary(b []byte) error {
	var res TestSubResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
