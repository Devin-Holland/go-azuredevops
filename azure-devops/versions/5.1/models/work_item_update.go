// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkItemUpdate Describes an update to a work item.
// swagger:model WorkItemUpdate
type WorkItemUpdate struct {
	WorkItemTrackingResource

	// List of updates to fields.
	Fields map[string]WorkItemFieldUpdate `json:"fields,omitempty"`

	// ID of update.
	ID int32 `json:"id,omitempty"`

	// List of updates to relations.
	Relations *WorkItemRelationUpdates `json:"relations,omitempty"`

	// The revision number of work item update.
	Rev int32 `json:"rev,omitempty"`

	// Identity for the work item update.
	RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

	// The work item updates revision date.
	// Format: date-time
	RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

	// The work item ID.
	WorkItemID int32 `json:"workItemId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemUpdate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemUpdate struct {
		Fields map[string]WorkItemFieldUpdate `json:"fields,omitempty"`

		ID int32 `json:"id,omitempty"`

		Relations *WorkItemRelationUpdates `json:"relations,omitempty"`

		Rev int32 `json:"rev,omitempty"`

		RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

		RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

		WorkItemID int32 `json:"workItemId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemUpdate); err != nil {
		return err
	}
	m.Fields = propsWorkItemUpdate.Fields

	m.ID = propsWorkItemUpdate.ID

	m.Relations = propsWorkItemUpdate.Relations

	m.Rev = propsWorkItemUpdate.Rev

	m.RevisedBy = propsWorkItemUpdate.RevisedBy

	m.RevisedDate = propsWorkItemUpdate.RevisedDate

	m.WorkItemID = propsWorkItemUpdate.WorkItemID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemUpdate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemUpdate struct {
		Fields map[string]WorkItemFieldUpdate `json:"fields,omitempty"`

		ID int32 `json:"id,omitempty"`

		Relations *WorkItemRelationUpdates `json:"relations,omitempty"`

		Rev int32 `json:"rev,omitempty"`

		RevisedBy *IdentityReference `json:"revisedBy,omitempty"`

		RevisedDate strfmt.DateTime `json:"revisedDate,omitempty"`

		WorkItemID int32 `json:"workItemId,omitempty"`
	}
	propsWorkItemUpdate.Fields = m.Fields

	propsWorkItemUpdate.ID = m.ID

	propsWorkItemUpdate.Relations = m.Relations

	propsWorkItemUpdate.Rev = m.Rev

	propsWorkItemUpdate.RevisedBy = m.RevisedBy

	propsWorkItemUpdate.RevisedDate = m.RevisedDate

	propsWorkItemUpdate.WorkItemID = m.WorkItemID

	jsonDataPropsWorkItemUpdate, errWorkItemUpdate := swag.WriteJSON(propsWorkItemUpdate)
	if errWorkItemUpdate != nil {
		return nil, errWorkItemUpdate
	}
	_parts = append(_parts, jsonDataPropsWorkItemUpdate)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item update
func (m *WorkItemUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemUpdate) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for k := range m.Fields {

		if err := validate.Required("fields"+"."+k, "body", m.Fields[k]); err != nil {
			return err
		}
		if val, ok := m.Fields[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *WorkItemUpdate) validateRelations(formats strfmt.Registry) error {

	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {
		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemUpdate) validateRevisedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.RevisedBy) { // not required
		return nil
	}

	if m.RevisedBy != nil {
		if err := m.RevisedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revisedBy")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemUpdate) validateRevisedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RevisedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("revisedDate", "body", "date-time", m.RevisedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemUpdate) UnmarshalBinary(b []byte) error {
	var res WorkItemUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
