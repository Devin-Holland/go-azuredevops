// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsoleLogEvent console log event
// swagger:model ConsoleLogEvent
type ConsoleLogEvent struct {
	RealtimeBuildEvent

	// lines
	Lines []string `json:"lines"`

	// step record Id
	// Format: uuid
	StepRecordID strfmt.UUID `json:"stepRecordId,omitempty"`

	// timeline Id
	// Format: uuid
	TimelineID strfmt.UUID `json:"timelineId,omitempty"`

	// timeline record Id
	// Format: uuid
	TimelineRecordID strfmt.UUID `json:"timelineRecordId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConsoleLogEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RealtimeBuildEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RealtimeBuildEvent = aO0

	// now for regular properties
	var propsConsoleLogEvent struct {
		Lines []string `json:"lines"`

		StepRecordID strfmt.UUID `json:"stepRecordId,omitempty"`

		TimelineID strfmt.UUID `json:"timelineId,omitempty"`

		TimelineRecordID strfmt.UUID `json:"timelineRecordId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsConsoleLogEvent); err != nil {
		return err
	}
	m.Lines = propsConsoleLogEvent.Lines

	m.StepRecordID = propsConsoleLogEvent.StepRecordID

	m.TimelineID = propsConsoleLogEvent.TimelineID

	m.TimelineRecordID = propsConsoleLogEvent.TimelineRecordID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConsoleLogEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RealtimeBuildEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsConsoleLogEvent struct {
		Lines []string `json:"lines"`

		StepRecordID strfmt.UUID `json:"stepRecordId,omitempty"`

		TimelineID strfmt.UUID `json:"timelineId,omitempty"`

		TimelineRecordID strfmt.UUID `json:"timelineRecordId,omitempty"`
	}
	propsConsoleLogEvent.Lines = m.Lines

	propsConsoleLogEvent.StepRecordID = m.StepRecordID

	propsConsoleLogEvent.TimelineID = m.TimelineID

	propsConsoleLogEvent.TimelineRecordID = m.TimelineRecordID

	jsonDataPropsConsoleLogEvent, errConsoleLogEvent := swag.WriteJSON(propsConsoleLogEvent)
	if errConsoleLogEvent != nil {
		return nil, errConsoleLogEvent
	}
	_parts = append(_parts, jsonDataPropsConsoleLogEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this console log event
func (m *ConsoleLogEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RealtimeBuildEvent
	if err := m.RealtimeBuildEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepRecordID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineRecordID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsoleLogEvent) validateStepRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.StepRecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("stepRecordId", "body", "uuid", m.StepRecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsoleLogEvent) validateTimelineID(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineID) { // not required
		return nil
	}

	if err := validate.FormatOf("timelineId", "body", "uuid", m.TimelineID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConsoleLogEvent) validateTimelineRecordID(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineRecordID) { // not required
		return nil
	}

	if err := validate.FormatOf("timelineRecordId", "body", "uuid", m.TimelineRecordID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsoleLogEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsoleLogEvent) UnmarshalBinary(b []byte) error {
	var res ConsoleLogEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
