// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// BuildRepository Represents a repository used by a build definition.
// swagger:model BuildRepository
type BuildRepository struct {

	// Indicates whether to checkout submodules.
	CheckoutSubmodules bool `json:"checkoutSubmodules,omitempty"`

	// Indicates whether to clean the target folder when getting code from the repository.
	Clean string `json:"clean,omitempty"`

	// The name of the default branch.
	DefaultBranch string `json:"defaultBranch,omitempty"`

	// The ID of the repository.
	ID string `json:"id,omitempty"`

	// The friendly name of the repository.
	Name string `json:"name,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// The root folder.
	RootFolder string `json:"rootFolder,omitempty"`

	// The type of the repository.
	Type string `json:"type,omitempty"`

	// The URL of the repository.
	URL string `json:"url,omitempty"`
}

// Validate validates this build repository
func (m *BuildRepository) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BuildRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildRepository) UnmarshalBinary(b []byte) error {
	var res BuildRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
