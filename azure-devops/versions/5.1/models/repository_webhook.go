// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryWebhook Represents a repository's webhook returned from a source provider.
// swagger:model RepositoryWebhook
type RepositoryWebhook struct {

	// The friendly name of the repository.
	Name string `json:"name,omitempty"`

	// types
	Types []interface{} `json:"types"`

	// The URL of the repository.
	URL string `json:"url,omitempty"`
}

// Validate validates this repository webhook
func (m *RepositoryWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var repositoryWebhookTypesItemsEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["none","continuousIntegration","batchedContinuousIntegration","schedule","gatedCheckIn","batchedGatedCheckIn","pullRequest","buildCompletion","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryWebhookTypesItemsEnum = append(repositoryWebhookTypesItemsEnum, v)
	}
}

func (m *RepositoryWebhook) validateTypesItemsEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, repositoryWebhookTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *RepositoryWebhook) validateTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.Types) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryWebhook) UnmarshalBinary(b []byte) error {
	var res RepositoryWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
