// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PackageResult Defines the package result that matched a package search request.
// swagger:model PackageResult
type PackageResult struct {

	// Description of the package.
	Description string `json:"description,omitempty"`

	// List of feeds which contain the matching package.
	Feeds []*FeedInfo `json:"feeds"`

	// List of highlighted fields for the match.
	Hits []*PackageHit `json:"hits"`

	// Id of the package.
	ID string `json:"id,omitempty"`

	// Name of the package.
	Name string `json:"name,omitempty"`

	// Type of the package.
	ProtocolType string `json:"protocolType,omitempty"`
}

// Validate validates this package result
func (m *PackageResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageResult) validateFeeds(formats strfmt.Registry) error {

	if swag.IsZero(m.Feeds) { // not required
		return nil
	}

	for i := 0; i < len(m.Feeds); i++ {
		if swag.IsZero(m.Feeds[i]) { // not required
			continue
		}

		if m.Feeds[i] != nil {
			if err := m.Feeds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feeds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) validateHits(formats strfmt.Registry) error {

	if swag.IsZero(m.Hits) { // not required
		return nil
	}

	for i := 0; i < len(m.Hits); i++ {
		if swag.IsZero(m.Hits[i]) { // not required
			continue
		}

		if m.Hits[i] != nil {
			if err := m.Hits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageResult) UnmarshalBinary(b []byte) error {
	var res PackageResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
