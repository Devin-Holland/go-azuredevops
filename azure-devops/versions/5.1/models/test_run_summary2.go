// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRunSummary2 test run summary2
// swagger:model TestRunSummary2
type TestRunSummary2 struct {

	// is rerun
	IsRerun bool `json:"isRerun,omitempty"`

	// project Id
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// result count
	ResultCount int32 `json:"resultCount,omitempty"`

	// result duration
	ResultDuration int64 `json:"resultDuration,omitempty"`

	// run duration
	RunDuration int64 `json:"runDuration,omitempty"`

	// test outcome
	// Format: byte
	TestOutcome strfmt.Base64 `json:"testOutcome,omitempty"`

	// test run completed date
	// Format: date-time
	TestRunCompletedDate strfmt.DateTime `json:"testRunCompletedDate,omitempty"`

	// test run context Id
	TestRunContextID int32 `json:"testRunContextId,omitempty"`

	// test run Id
	TestRunID int32 `json:"testRunId,omitempty"`

	// test run stats Id
	TestRunStatsID int32 `json:"testRunStatsId,omitempty"`
}

// Validate validates this test run summary2
func (m *TestRunSummary2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestRunCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunSummary2) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRunSummary2) validateTestOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.TestOutcome) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *TestRunSummary2) validateTestRunCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TestRunCompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("testRunCompletedDate", "body", "date-time", m.TestRunCompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestRunSummary2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRunSummary2) UnmarshalBinary(b []byte) error {
	var res TestRunSummary2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
