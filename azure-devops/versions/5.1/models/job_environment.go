// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobEnvironment Represents the context of variables and vectors for a job request.
// swagger:model JobEnvironment
type JobEnvironment struct {

	// endpoints
	Endpoints []*ServiceEndpoint `json:"endpoints"`

	// mask
	Mask []*MaskHint `json:"mask"`

	// options
	Options map[string]JobOption `json:"options,omitempty"`

	// secure files
	SecureFiles []*SecureFile `json:"secureFiles"`

	// Gets or sets the endpoint used for communicating back to the calling service.
	SystemConnection *ServiceEndpoint `json:"systemConnection,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`
}

// Validate validates this job environment
func (m *JobEnvironment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemConnection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobEnvironment) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobEnvironment) validateMask(formats strfmt.Registry) error {

	if swag.IsZero(m.Mask) { // not required
		return nil
	}

	for i := 0; i < len(m.Mask); i++ {
		if swag.IsZero(m.Mask[i]) { // not required
			continue
		}

		if m.Mask[i] != nil {
			if err := m.Mask[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mask" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobEnvironment) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for k := range m.Options {

		if err := validate.Required("options"+"."+k, "body", m.Options[k]); err != nil {
			return err
		}
		if val, ok := m.Options[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JobEnvironment) validateSecureFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.SecureFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.SecureFiles); i++ {
		if swag.IsZero(m.SecureFiles[i]) { // not required
			continue
		}

		if m.SecureFiles[i] != nil {
			if err := m.SecureFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secureFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobEnvironment) validateSystemConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemConnection) { // not required
		return nil
	}

	if m.SystemConnection != nil {
		if err := m.SystemConnection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemConnection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobEnvironment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobEnvironment) UnmarshalBinary(b []byte) error {
	var res JobEnvironment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
