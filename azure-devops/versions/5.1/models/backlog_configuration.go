// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BacklogConfiguration backlog configuration
// swagger:model BacklogConfiguration
type BacklogConfiguration struct {

	// Behavior/type field mapping
	BacklogFields *BacklogFields `json:"backlogFields,omitempty"`

	// Bugs behavior
	// Enum: [off asRequirements asTasks]
	BugsBehavior interface{} `json:"bugsBehavior,omitempty"`

	// Hidden Backlog
	HiddenBacklogs []string `json:"hiddenBacklogs"`

	// Is BugsBehavior Configured in the process
	IsBugsBehaviorConfigured bool `json:"isBugsBehaviorConfigured,omitempty"`

	// Portfolio backlog descriptors
	PortfolioBacklogs []*BacklogLevelConfiguration `json:"portfolioBacklogs"`

	// Requirement backlog
	RequirementBacklog *BacklogLevelConfiguration `json:"requirementBacklog,omitempty"`

	// Task backlog
	TaskBacklog *BacklogLevelConfiguration `json:"taskBacklog,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// Mapped states for work item types
	WorkItemTypeMappedStates []*WorkItemTypeStateInfo `json:"workItemTypeMappedStates"`
}

// Validate validates this backlog configuration
func (m *BacklogConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBacklogFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortfolioBacklogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirementBacklog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskBacklog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItemTypeMappedStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BacklogConfiguration) validateBacklogFields(formats strfmt.Registry) error {

	if swag.IsZero(m.BacklogFields) { // not required
		return nil
	}

	if m.BacklogFields != nil {
		if err := m.BacklogFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backlogFields")
			}
			return err
		}
	}

	return nil
}

func (m *BacklogConfiguration) validatePortfolioBacklogs(formats strfmt.Registry) error {

	if swag.IsZero(m.PortfolioBacklogs) { // not required
		return nil
	}

	for i := 0; i < len(m.PortfolioBacklogs); i++ {
		if swag.IsZero(m.PortfolioBacklogs[i]) { // not required
			continue
		}

		if m.PortfolioBacklogs[i] != nil {
			if err := m.PortfolioBacklogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portfolioBacklogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BacklogConfiguration) validateRequirementBacklog(formats strfmt.Registry) error {

	if swag.IsZero(m.RequirementBacklog) { // not required
		return nil
	}

	if m.RequirementBacklog != nil {
		if err := m.RequirementBacklog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requirementBacklog")
			}
			return err
		}
	}

	return nil
}

func (m *BacklogConfiguration) validateTaskBacklog(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskBacklog) { // not required
		return nil
	}

	if m.TaskBacklog != nil {
		if err := m.TaskBacklog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskBacklog")
			}
			return err
		}
	}

	return nil
}

func (m *BacklogConfiguration) validateWorkItemTypeMappedStates(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemTypeMappedStates) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemTypeMappedStates); i++ {
		if swag.IsZero(m.WorkItemTypeMappedStates[i]) { // not required
			continue
		}

		if m.WorkItemTypeMappedStates[i] != nil {
			if err := m.WorkItemTypeMappedStates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemTypeMappedStates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BacklogConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BacklogConfiguration) UnmarshalBinary(b []byte) error {
	var res BacklogConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
