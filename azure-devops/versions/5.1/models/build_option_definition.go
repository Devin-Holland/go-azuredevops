// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildOptionDefinition Represents an optional behavior that can be applied to a build definition.
// swagger:model BuildOptionDefinition
type BuildOptionDefinition struct {
	BuildOptionDefinitionReference

	// The description.
	Description string `json:"description,omitempty"`

	// The list of input groups defined for the build option.
	Groups []*BuildOptionGroupDefinition `json:"groups"`

	// The list of inputs defined for the build option.
	Inputs []*BuildOptionInputDefinition `json:"inputs"`

	// The name of the build option.
	Name string `json:"name,omitempty"`

	// A value that indicates the relative order in which the behavior should be applied.
	Ordinal int32 `json:"ordinal,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BuildOptionDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BuildOptionDefinitionReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BuildOptionDefinitionReference = aO0

	// now for regular properties
	var propsBuildOptionDefinition struct {
		Description string `json:"description,omitempty"`

		Groups []*BuildOptionGroupDefinition `json:"groups"`

		Inputs []*BuildOptionInputDefinition `json:"inputs"`

		Name string `json:"name,omitempty"`

		Ordinal int32 `json:"ordinal,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsBuildOptionDefinition); err != nil {
		return err
	}
	m.Description = propsBuildOptionDefinition.Description

	m.Groups = propsBuildOptionDefinition.Groups

	m.Inputs = propsBuildOptionDefinition.Inputs

	m.Name = propsBuildOptionDefinition.Name

	m.Ordinal = propsBuildOptionDefinition.Ordinal

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BuildOptionDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BuildOptionDefinitionReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBuildOptionDefinition struct {
		Description string `json:"description,omitempty"`

		Groups []*BuildOptionGroupDefinition `json:"groups"`

		Inputs []*BuildOptionInputDefinition `json:"inputs"`

		Name string `json:"name,omitempty"`

		Ordinal int32 `json:"ordinal,omitempty"`
	}
	propsBuildOptionDefinition.Description = m.Description

	propsBuildOptionDefinition.Groups = m.Groups

	propsBuildOptionDefinition.Inputs = m.Inputs

	propsBuildOptionDefinition.Name = m.Name

	propsBuildOptionDefinition.Ordinal = m.Ordinal

	jsonDataPropsBuildOptionDefinition, errBuildOptionDefinition := swag.WriteJSON(propsBuildOptionDefinition)
	if errBuildOptionDefinition != nil {
		return nil, errBuildOptionDefinition
	}
	_parts = append(_parts, jsonDataPropsBuildOptionDefinition)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this build option definition
func (m *BuildOptionDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BuildOptionDefinitionReference
	if err := m.BuildOptionDefinitionReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildOptionDefinition) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildOptionDefinition) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildOptionDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildOptionDefinition) UnmarshalBinary(b []byte) error {
	var res BuildOptionDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
