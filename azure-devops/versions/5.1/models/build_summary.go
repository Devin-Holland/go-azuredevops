// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildSummary build summary
// swagger:model BuildSummary
type BuildSummary struct {

	// build
	Build *XamlBuildReference `json:"build,omitempty"`

	// finish time
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// keep forever
	KeepForever bool `json:"keepForever,omitempty"`

	// quality
	Quality string `json:"quality,omitempty"`

	// reason
	// Enum: [none manual individualCI batchedCI schedule scheduleForced userCreated validateShelveset checkInShelveset pullRequest buildCompletion triggered all]
	Reason interface{} `json:"reason,omitempty"`

	// requested for
	RequestedFor *IdentityRef `json:"requestedFor,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// status
	// Enum: [none inProgress completed cancelling postponed notStarted all]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this build summary
func (m *BuildSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildSummary) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *BuildSummary) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildSummary) validateRequestedFor(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedFor) { // not required
		return nil
	}

	if m.RequestedFor != nil {
		if err := m.RequestedFor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestedFor")
			}
			return err
		}
	}

	return nil
}

func (m *BuildSummary) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildSummary) UnmarshalBinary(b []byte) error {
	var res BuildSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
