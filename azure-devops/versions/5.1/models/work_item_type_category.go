// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemTypeCategory Describes a work item type category.
// swagger:model WorkItemTypeCategory
type WorkItemTypeCategory struct {
	WorkItemTrackingResource

	// Gets or sets the default type of the work item.
	DefaultWorkItemType *WorkItemTypeReference `json:"defaultWorkItemType,omitempty"`

	// The name of the category.
	Name string `json:"name,omitempty"`

	// The reference name of the category.
	ReferenceName string `json:"referenceName,omitempty"`

	// The work item types that belond to the category.
	WorkItemTypes []*WorkItemTypeReference `json:"workItemTypes"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemTypeCategory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResource = aO0

	// now for regular properties
	var propsWorkItemTypeCategory struct {
		DefaultWorkItemType *WorkItemTypeReference `json:"defaultWorkItemType,omitempty"`

		Name string `json:"name,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		WorkItemTypes []*WorkItemTypeReference `json:"workItemTypes"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemTypeCategory); err != nil {
		return err
	}
	m.DefaultWorkItemType = propsWorkItemTypeCategory.DefaultWorkItemType

	m.Name = propsWorkItemTypeCategory.Name

	m.ReferenceName = propsWorkItemTypeCategory.ReferenceName

	m.WorkItemTypes = propsWorkItemTypeCategory.WorkItemTypes

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemTypeCategory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemTypeCategory struct {
		DefaultWorkItemType *WorkItemTypeReference `json:"defaultWorkItemType,omitempty"`

		Name string `json:"name,omitempty"`

		ReferenceName string `json:"referenceName,omitempty"`

		WorkItemTypes []*WorkItemTypeReference `json:"workItemTypes"`
	}
	propsWorkItemTypeCategory.DefaultWorkItemType = m.DefaultWorkItemType

	propsWorkItemTypeCategory.Name = m.Name

	propsWorkItemTypeCategory.ReferenceName = m.ReferenceName

	propsWorkItemTypeCategory.WorkItemTypes = m.WorkItemTypes

	jsonDataPropsWorkItemTypeCategory, errWorkItemTypeCategory := swag.WriteJSON(propsWorkItemTypeCategory)
	if errWorkItemTypeCategory != nil {
		return nil, errWorkItemTypeCategory
	}
	_parts = append(_parts, jsonDataPropsWorkItemTypeCategory)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item type category
func (m *WorkItemTypeCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResource
	if err := m.WorkItemTrackingResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultWorkItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItemTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemTypeCategory) validateDefaultWorkItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultWorkItemType) { // not required
		return nil
	}

	if m.DefaultWorkItemType != nil {
		if err := m.DefaultWorkItemType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultWorkItemType")
			}
			return err
		}
	}

	return nil
}

func (m *WorkItemTypeCategory) validateWorkItemTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemTypes); i++ {
		if swag.IsZero(m.WorkItemTypes[i]) { // not required
			continue
		}

		if m.WorkItemTypes[i] != nil {
			if err := m.WorkItemTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemTypeCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemTypeCategory) UnmarshalBinary(b []byte) error {
	var res WorkItemTypeCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
