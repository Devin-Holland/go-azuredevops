// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BuildCompletionTrigger Represents a build completion trigger.
// swagger:model BuildCompletionTrigger
type BuildCompletionTrigger struct {
	BuildTrigger

	// branch filters
	BranchFilters []string `json:"branchFilters"`

	// A reference to the definition that should trigger builds for this definition.
	Definition *DefinitionReference `json:"definition,omitempty"`

	// requires successful build
	RequiresSuccessfulBuild bool `json:"requiresSuccessfulBuild,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BuildCompletionTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BuildTrigger
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BuildTrigger = aO0

	// now for regular properties
	var propsBuildCompletionTrigger struct {
		BranchFilters []string `json:"branchFilters"`

		Definition *DefinitionReference `json:"definition,omitempty"`

		RequiresSuccessfulBuild bool `json:"requiresSuccessfulBuild,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsBuildCompletionTrigger); err != nil {
		return err
	}
	m.BranchFilters = propsBuildCompletionTrigger.BranchFilters

	m.Definition = propsBuildCompletionTrigger.Definition

	m.RequiresSuccessfulBuild = propsBuildCompletionTrigger.RequiresSuccessfulBuild

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BuildCompletionTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.BuildTrigger)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsBuildCompletionTrigger struct {
		BranchFilters []string `json:"branchFilters"`

		Definition *DefinitionReference `json:"definition,omitempty"`

		RequiresSuccessfulBuild bool `json:"requiresSuccessfulBuild,omitempty"`
	}
	propsBuildCompletionTrigger.BranchFilters = m.BranchFilters

	propsBuildCompletionTrigger.Definition = m.Definition

	propsBuildCompletionTrigger.RequiresSuccessfulBuild = m.RequiresSuccessfulBuild

	jsonDataPropsBuildCompletionTrigger, errBuildCompletionTrigger := swag.WriteJSON(propsBuildCompletionTrigger)
	if errBuildCompletionTrigger != nil {
		return nil, errBuildCompletionTrigger
	}
	_parts = append(_parts, jsonDataPropsBuildCompletionTrigger)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this build completion trigger
func (m *BuildCompletionTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BuildTrigger
	if err := m.BuildTrigger.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildCompletionTrigger) validateDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildCompletionTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildCompletionTrigger) UnmarshalBinary(b []byte) error {
	var res BuildCompletionTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
