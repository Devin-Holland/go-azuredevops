// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FetchTestResultsResponse fetch test results response
// swagger:model FetchTestResultsResponse
type FetchTestResultsResponse struct {

	// action results
	ActionResults []*TestActionResult `json:"actionResults"`

	// attachments
	Attachments []*TestResultAttachment `json:"attachments"`

	// deleted ids
	DeletedIds []*LegacyTestCaseResultIdentifier `json:"deletedIds"`

	// results
	Results []*LegacyTestCaseResult `json:"results"`

	// test parameters
	TestParameters []*TestResultParameter `json:"testParameters"`
}

// Validate validates this fetch test results response
func (m *FetchTestResultsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FetchTestResultsResponse) validateActionResults(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionResults); i++ {
		if swag.IsZero(m.ActionResults[i]) { // not required
			continue
		}

		if m.ActionResults[i] != nil {
			if err := m.ActionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FetchTestResultsResponse) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FetchTestResultsResponse) validateDeletedIds(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedIds) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletedIds); i++ {
		if swag.IsZero(m.DeletedIds[i]) { // not required
			continue
		}

		if m.DeletedIds[i] != nil {
			if err := m.DeletedIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletedIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FetchTestResultsResponse) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FetchTestResultsResponse) validateTestParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.TestParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TestParameters); i++ {
		if swag.IsZero(m.TestParameters[i]) { // not required
			continue
		}

		if m.TestParameters[i] != nil {
			if err := m.TestParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FetchTestResultsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FetchTestResultsResponse) UnmarshalBinary(b []byte) error {
	var res FetchTestResultsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
