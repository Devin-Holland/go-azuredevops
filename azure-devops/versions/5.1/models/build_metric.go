// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildMetric Represents metadata about builds in the system.
// swagger:model BuildMetric
type BuildMetric struct {

	// The date for the scope.
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// The value.
	IntValue int32 `json:"intValue,omitempty"`

	// The name of the metric.
	Name string `json:"name,omitempty"`

	// The scope.
	Scope string `json:"scope,omitempty"`
}

// Validate validates this build metric
func (m *BuildMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildMetric) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildMetric) UnmarshalBinary(b []byte) error {
	var res BuildMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
