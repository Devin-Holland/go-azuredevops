// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestPlansHubRefreshData This data model is used in TestPlansHubRefreshDataProvider and populates the data required for initial page load
// swagger:model TestPlansHubRefreshData
type TestPlansHubRefreshData struct {

	// is advanced extension enabled
	IsAdvancedExtensionEnabled bool `json:"isAdvancedExtensionEnabled,omitempty"`

	// selected suite Id
	SelectedSuiteID int32 `json:"selectedSuiteId,omitempty"`

	// selected suite name
	SelectedSuiteName string `json:"selectedSuiteName,omitempty"`

	// test case page size
	TestCasePageSize int32 `json:"testCasePageSize,omitempty"`

	// test cases
	TestCases []*TestCase `json:"testCases"`

	// test cases continuation token
	TestCasesContinuationToken string `json:"testCasesContinuationToken,omitempty"`

	// test plan
	TestPlan *TestPlanDetailedReference `json:"testPlan,omitempty"`

	// test point page size
	TestPointPageSize int32 `json:"testPointPageSize,omitempty"`

	// test points
	TestPoints []*TestPoint `json:"testPoints"`

	// test points continuation token
	TestPointsContinuationToken string `json:"testPointsContinuationToken,omitempty"`

	// test suites
	TestSuites []*TestSuite `json:"testSuites"`

	// test suites continuation token
	TestSuitesContinuationToken string `json:"testSuitesContinuationToken,omitempty"`
}

// Validate validates this test plans hub refresh data
func (m *TestPlansHubRefreshData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTestCases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSuites(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlansHubRefreshData) validateTestCases(formats strfmt.Registry) error {

	if swag.IsZero(m.TestCases) { // not required
		return nil
	}

	for i := 0; i < len(m.TestCases); i++ {
		if swag.IsZero(m.TestCases[i]) { // not required
			continue
		}

		if m.TestCases[i] != nil {
			if err := m.TestCases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testCases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestPlansHubRefreshData) validateTestPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.TestPlan) { // not required
		return nil
	}

	if m.TestPlan != nil {
		if err := m.TestPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testPlan")
			}
			return err
		}
	}

	return nil
}

func (m *TestPlansHubRefreshData) validateTestPoints(formats strfmt.Registry) error {

	if swag.IsZero(m.TestPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.TestPoints); i++ {
		if swag.IsZero(m.TestPoints[i]) { // not required
			continue
		}

		if m.TestPoints[i] != nil {
			if err := m.TestPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestPlansHubRefreshData) validateTestSuites(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSuites) { // not required
		return nil
	}

	for i := 0; i < len(m.TestSuites); i++ {
		if swag.IsZero(m.TestSuites[i]) { // not required
			continue
		}

		if m.TestSuites[i] != nil {
			if err := m.TestSuites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testSuites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPlansHubRefreshData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPlansHubRefreshData) UnmarshalBinary(b []byte) error {
	var res TestPlansHubRefreshData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
