// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProcessWorkItemType Class that describes a work item type object
// swagger:model ProcessWorkItemType
type ProcessWorkItemType struct {

	// behaviors
	Behaviors []*WorkItemTypeBehavior `json:"behaviors"`

	// Color hexadecimal code to represent the work item type
	Color string `json:"color,omitempty"`

	// Indicates the type of customization on this work item System work item types are inherited from parent process but not modified Inherited work item types are modified work item that were inherited from parent process Custom work item types are work item types that were created in the current process
	// Enum: [system inherited custom]
	Customization interface{} `json:"customization,omitempty"`

	// Description of the work item type
	Description string `json:"description,omitempty"`

	// Icon to represent the work item typ
	Icon string `json:"icon,omitempty"`

	// Reference name of the parent work item type
	Inherits string `json:"inherits,omitempty"`

	// Indicates if a work item type is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// layout
	Layout *FormLayout `json:"layout,omitempty"`

	// Name of the work item type
	Name string `json:"name,omitempty"`

	// Reference name of work item type
	ReferenceName string `json:"referenceName,omitempty"`

	// states
	States []*WorkItemStateResultModel `json:"states"`

	// Url of the work item type
	URL string `json:"url,omitempty"`
}

// Validate validates this process work item type
func (m *ProcessWorkItemType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBehaviors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessWorkItemType) validateBehaviors(formats strfmt.Registry) error {

	if swag.IsZero(m.Behaviors) { // not required
		return nil
	}

	for i := 0; i < len(m.Behaviors); i++ {
		if swag.IsZero(m.Behaviors[i]) { // not required
			continue
		}

		if m.Behaviors[i] != nil {
			if err := m.Behaviors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("behaviors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProcessWorkItemType) validateLayout(formats strfmt.Registry) error {

	if swag.IsZero(m.Layout) { // not required
		return nil
	}

	if m.Layout != nil {
		if err := m.Layout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layout")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessWorkItemType) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessWorkItemType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessWorkItemType) UnmarshalBinary(b []byte) error {
	var res ProcessWorkItemType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
