// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AgentDeploymentInput agent deployment input
// swagger:model AgentDeploymentInput
type AgentDeploymentInput struct {
	DeploymentInput

	// Specification for an agent on which a job gets executed.
	AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

	// Gets or sets the image ID.
	ImageID int32 `json:"imageId,omitempty"`

	// Gets or sets the parallel execution input.
	ParallelExecution *ExecutionInput `json:"parallelExecution,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AgentDeploymentInput) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DeploymentInput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DeploymentInput = aO0

	// now for regular properties
	var propsAgentDeploymentInput struct {
		AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

		ImageID int32 `json:"imageId,omitempty"`

		ParallelExecution *ExecutionInput `json:"parallelExecution,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsAgentDeploymentInput); err != nil {
		return err
	}
	m.AgentSpecification = propsAgentDeploymentInput.AgentSpecification

	m.ImageID = propsAgentDeploymentInput.ImageID

	m.ParallelExecution = propsAgentDeploymentInput.ParallelExecution

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AgentDeploymentInput) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DeploymentInput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsAgentDeploymentInput struct {
		AgentSpecification *AgentSpecification `json:"agentSpecification,omitempty"`

		ImageID int32 `json:"imageId,omitempty"`

		ParallelExecution *ExecutionInput `json:"parallelExecution,omitempty"`
	}
	propsAgentDeploymentInput.AgentSpecification = m.AgentSpecification

	propsAgentDeploymentInput.ImageID = m.ImageID

	propsAgentDeploymentInput.ParallelExecution = m.ParallelExecution

	jsonDataPropsAgentDeploymentInput, errAgentDeploymentInput := swag.WriteJSON(propsAgentDeploymentInput)
	if errAgentDeploymentInput != nil {
		return nil, errAgentDeploymentInput
	}
	_parts = append(_parts, jsonDataPropsAgentDeploymentInput)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this agent deployment input
func (m *AgentDeploymentInput) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DeploymentInput
	if err := m.DeploymentInput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParallelExecution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDeploymentInput) validateAgentSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentSpecification) { // not required
		return nil
	}

	if m.AgentSpecification != nil {
		if err := m.AgentSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDeploymentInput) validateParallelExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.ParallelExecution) { // not required
		return nil
	}

	if m.ParallelExecution != nil {
		if err := m.ParallelExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parallelExecution")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentDeploymentInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentDeploymentInput) UnmarshalBinary(b []byte) error {
	var res AgentDeploymentInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
