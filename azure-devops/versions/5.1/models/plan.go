// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan Data contract for the plan definition
// swagger:model Plan
type Plan struct {

	// Identity that created this plan. Defaults to null for records before upgrading to ScaledAgileViewComponent4.
	CreatedByIdentity *IdentityRef `json:"createdByIdentity,omitempty"`

	// Date when the plan was created
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// Description of the plan
	Description string `json:"description,omitempty"`

	// Id of the plan
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Identity that last modified this plan. Defaults to null for records before upgrading to ScaledAgileViewComponent4.
	ModifiedByIdentity *IdentityRef `json:"modifiedByIdentity,omitempty"`

	// Date when the plan was last modified. Default to CreatedDate when the plan is first created.
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"modifiedDate,omitempty"`

	// Name of the plan
	Name string `json:"name,omitempty"`

	// The PlanPropertyCollection instance associated with the plan. These are dependent on the type of the plan. For example, DeliveryTimelineView, it would be of type DeliveryViewPropertyCollection.
	Properties interface{} `json:"properties,omitempty"`

	// Revision of the plan. Used to safeguard users from overwriting each other's changes.
	Revision int32 `json:"revision,omitempty"`

	// Type of the plan
	// Enum: [deliveryTimelineView]
	Type interface{} `json:"type,omitempty"`

	// The resource url to locate the plan via rest api
	URL string `json:"url,omitempty"`

	// Bit flag indicating set of permissions a user has to the plan.
	// Enum: [none view edit delete manage allPermissions]
	UserPermissions interface{} `json:"userPermissions,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedByIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedByIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateCreatedByIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedByIdentity) { // not required
		return nil
	}

	if m.CreatedByIdentity != nil {
		if err := m.CreatedByIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdByIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *Plan) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateModifiedByIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedByIdentity) { // not required
		return nil
	}

	if m.ModifiedByIdentity != nil {
		if err := m.ModifiedByIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifiedByIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *Plan) validateModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
