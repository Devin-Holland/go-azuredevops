// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDefinitionRevision release definition revision
// swagger:model ReleaseDefinitionRevision
type ReleaseDefinitionRevision struct {

	// Gets api-version for revision object.
	APIVersion string `json:"apiVersion,omitempty"`

	// Gets type of change.
	// Enum: [add update delete undelete]
	ChangeType interface{} `json:"changeType,omitempty"`

	// Gets the identity who did change.
	ChangedBy *IdentityRef `json:"changedBy,omitempty"`

	// Gets date on which ReleaseDefinition changed.
	// Format: date-time
	ChangedDate strfmt.DateTime `json:"changedDate,omitempty"`

	// Gets comments for revision.
	Comment string `json:"comment,omitempty"`

	// Get id of the definition.
	DefinitionID int32 `json:"definitionId,omitempty"`

	// Gets definition URL.
	DefinitionURL string `json:"definitionUrl,omitempty"`

	// Get revision number of the definition.
	Revision int32 `json:"revision,omitempty"`
}

// Validate validates this release definition revision
func (m *ReleaseDefinitionRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDefinitionRevision) validateChangedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangedBy) { // not required
		return nil
	}

	if m.ChangedBy != nil {
		if err := m.ChangedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionRevision) validateChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("changedDate", "body", "date-time", m.ChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDefinitionRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDefinitionRevision) UnmarshalBinary(b []byte) error {
	var res ReleaseDefinitionRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
