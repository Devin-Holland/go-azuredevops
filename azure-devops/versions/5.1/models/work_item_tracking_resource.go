// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkItemTrackingResource Base class for WIT REST resources.
// swagger:model WorkItemTrackingResource
type WorkItemTrackingResource struct {
	WorkItemTrackingResourceReference

	// Link references to related REST resources.
	Links *ReferenceLinks `json:"_links,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkItemTrackingResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkItemTrackingResourceReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkItemTrackingResourceReference = aO0

	// now for regular properties
	var propsWorkItemTrackingResource struct {
		Links *ReferenceLinks `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsWorkItemTrackingResource); err != nil {
		return err
	}
	m.Links = propsWorkItemTrackingResource.Links

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkItemTrackingResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkItemTrackingResourceReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsWorkItemTrackingResource struct {
		Links *ReferenceLinks `json:"_links,omitempty"`
	}
	propsWorkItemTrackingResource.Links = m.Links

	jsonDataPropsWorkItemTrackingResource, errWorkItemTrackingResource := swag.WriteJSON(propsWorkItemTrackingResource)
	if errWorkItemTrackingResource != nil {
		return nil, errWorkItemTrackingResource
	}
	_parts = append(_parts, jsonDataPropsWorkItemTrackingResource)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this work item tracking resource
func (m *WorkItemTrackingResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkItemTrackingResourceReference
	if err := m.WorkItemTrackingResourceReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkItemTrackingResource) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkItemTrackingResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkItemTrackingResource) UnmarshalBinary(b []byte) error {
	var res WorkItemTrackingResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
