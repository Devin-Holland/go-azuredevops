// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestFailuresAnalysis test failures analysis
// swagger:model TestFailuresAnalysis
type TestFailuresAnalysis struct {

	// existing failures
	ExistingFailures *TestFailureDetails `json:"existingFailures,omitempty"`

	// fixed tests
	FixedTests *TestFailureDetails `json:"fixedTests,omitempty"`

	// new failures
	NewFailures *TestFailureDetails `json:"newFailures,omitempty"`

	// previous context
	PreviousContext *TestResultsContext `json:"previousContext,omitempty"`
}

// Validate validates this test failures analysis
func (m *TestFailuresAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExistingFailures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedTests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewFailures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestFailuresAnalysis) validateExistingFailures(formats strfmt.Registry) error {

	if swag.IsZero(m.ExistingFailures) { // not required
		return nil
	}

	if m.ExistingFailures != nil {
		if err := m.ExistingFailures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existingFailures")
			}
			return err
		}
	}

	return nil
}

func (m *TestFailuresAnalysis) validateFixedTests(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedTests) { // not required
		return nil
	}

	if m.FixedTests != nil {
		if err := m.FixedTests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTests")
			}
			return err
		}
	}

	return nil
}

func (m *TestFailuresAnalysis) validateNewFailures(formats strfmt.Registry) error {

	if swag.IsZero(m.NewFailures) { // not required
		return nil
	}

	if m.NewFailures != nil {
		if err := m.NewFailures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newFailures")
			}
			return err
		}
	}

	return nil
}

func (m *TestFailuresAnalysis) validatePreviousContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousContext) { // not required
		return nil
	}

	if m.PreviousContext != nil {
		if err := m.PreviousContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousContext")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestFailuresAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestFailuresAnalysis) UnmarshalBinary(b []byte) error {
	var res TestFailuresAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
