// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecureFileReference Represents a reference to a secure file.
// swagger:model SecureFileReference
type SecureFileReference struct {
	ResourceReference

	// The ID of the secure file.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SecureFileReference) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResourceReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResourceReference = aO0

	// now for regular properties
	var propsSecureFileReference struct {
		ID strfmt.UUID `json:"id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSecureFileReference); err != nil {
		return err
	}
	m.ID = propsSecureFileReference.ID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SecureFileReference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ResourceReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSecureFileReference struct {
		ID strfmt.UUID `json:"id,omitempty"`
	}
	propsSecureFileReference.ID = m.ID

	jsonDataPropsSecureFileReference, errSecureFileReference := swag.WriteJSON(propsSecureFileReference)
	if errSecureFileReference != nil {
		return nil, errSecureFileReference
	}
	_parts = append(_parts, jsonDataPropsSecureFileReference)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this secure file reference
func (m *SecureFileReference) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResourceReference
	if err := m.ResourceReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecureFileReference) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecureFileReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecureFileReference) UnmarshalBinary(b []byte) error {
	var res SecureFileReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
