// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRun Test run details.
// swagger:model TestRun
type TestRun struct {

	// Build associated with this test run.
	Build *ShallowReference `json:"build,omitempty"`

	// Build configuration details associated with this test run.
	BuildConfiguration *BuildConfiguration `json:"buildConfiguration,omitempty"`

	// Comments entered by those analyzing the run.
	Comment string `json:"comment,omitempty"`

	// Completed date time of the run.
	// Format: date-time
	CompletedDate strfmt.DateTime `json:"completedDate,omitempty"`

	// Test Run Controller.
	Controller string `json:"controller,omitempty"`

	// Test Run CreatedDate.
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// List of Custom Fields for TestRun.
	CustomFields []*CustomTestField `json:"customFields"`

	// Drop Location for the test Run.
	DropLocation string `json:"dropLocation,omitempty"`

	// dtl aut environment
	DtlAutEnvironment *ShallowReference `json:"dtlAutEnvironment,omitempty"`

	// dtl environment
	DtlEnvironment *ShallowReference `json:"dtlEnvironment,omitempty"`

	// dtl environment creation details
	DtlEnvironmentCreationDetails *DtlEnvironmentDetails `json:"dtlEnvironmentCreationDetails,omitempty"`

	// Due date and time for test run.
	// Format: date-time
	DueDate strfmt.DateTime `json:"dueDate,omitempty"`

	// Error message associated with the run.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// filter
	Filter *RunFilter `json:"filter,omitempty"`

	// ID of the test run.
	ID int32 `json:"id,omitempty"`

	// Number of Incomplete Tests.
	IncompleteTests int32 `json:"incompleteTests,omitempty"`

	// true if test run is automated, false otherwise.
	IsAutomated bool `json:"isAutomated,omitempty"`

	// The iteration to which the run belongs.
	Iteration string `json:"iteration,omitempty"`

	// Team foundation ID of the last updated the test run.
	LastUpdatedBy *IdentityRef `json:"lastUpdatedBy,omitempty"`

	// Last updated date and time
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// Name of the test run.
	Name string `json:"name,omitempty"`

	// Number of Not Applicable Tests.
	NotApplicableTests int32 `json:"notApplicableTests,omitempty"`

	// Team Foundation ID of the owner of the runs.
	Owner *IdentityRef `json:"owner,omitempty"`

	// Number of passed tests in the run
	PassedTests int32 `json:"passedTests,omitempty"`

	// Phase/State for the testRun.
	Phase string `json:"phase,omitempty"`

	// Reference of the pipeline to which this test run belongs.
	PipelineReference *PipelineReference `json:"pipelineReference,omitempty"`

	// Test plan associated with this test run.
	Plan *ShallowReference `json:"plan,omitempty"`

	// Post Process State.
	PostProcessState string `json:"postProcessState,omitempty"`

	// Project associated with this run.
	Project *ShallowReference `json:"project,omitempty"`

	// Release Reference for the Test Run.
	Release *ReleaseReference `json:"release,omitempty"`

	// Release Environment Uri for TestRun.
	ReleaseEnvironmentURI string `json:"releaseEnvironmentUri,omitempty"`

	// Release Uri for TestRun.
	ReleaseURI string `json:"releaseUri,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// RunSummary by outcome.
	RunStatistics []*RunStatistic `json:"runStatistics"`

	// Start date time of the run.
	// Format: date-time
	StartedDate strfmt.DateTime `json:"startedDate,omitempty"`

	// The state of the run. Type TestRunState Valid states - Unspecified ,NotStarted, InProgress, Completed, Waiting, Aborted, NeedsInvestigation
	State string `json:"state,omitempty"`

	// TestRun Substate.
	// Enum: [none creatingEnvironment runningTests canceledByUser abortedBySystem timedOut pendingAnalysis analyzed cancellationInProgress]
	Substate interface{} `json:"substate,omitempty"`

	// Tags attached with this test run.
	Tags []*TestTag `json:"tags"`

	// Test environment associated with the run.
	TestEnvironment *TestEnvironment `json:"testEnvironment,omitempty"`

	// test message log Id
	TestMessageLogID int32 `json:"testMessageLogId,omitempty"`

	// test settings
	TestSettings *ShallowReference `json:"testSettings,omitempty"`

	// Total tests in the run
	TotalTests int32 `json:"totalTests,omitempty"`

	// Number of failed tests in the run.
	UnanalyzedTests int32 `json:"unanalyzedTests,omitempty"`

	// Url of the test run
	URL string `json:"url,omitempty"`

	// Web Access Url for TestRun.
	WebAccessURL string `json:"webAccessUrl,omitempty"`
}

// Validate validates this test run
func (m *TestRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDtlAutEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDtlEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDtlEnvironmentCreationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRun) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateBuildConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildConfiguration) { // not required
		return nil
	}

	if m.BuildConfiguration != nil {
		if err := m.BuildConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateCompletedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completedDate", "body", "date-time", m.CompletedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestRun) validateDtlAutEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.DtlAutEnvironment) { // not required
		return nil
	}

	if m.DtlAutEnvironment != nil {
		if err := m.DtlAutEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtlAutEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateDtlEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.DtlEnvironment) { // not required
		return nil
	}

	if m.DtlEnvironment != nil {
		if err := m.DtlEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtlEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateDtlEnvironmentCreationDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.DtlEnvironmentCreationDetails) { // not required
		return nil
	}

	if m.DtlEnvironmentCreationDetails != nil {
		if err := m.DtlEnvironmentCreationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dtlEnvironmentCreationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateDueDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dueDate", "body", "date-time", m.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateLastUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if m.LastUpdatedBy != nil {
		if err := m.LastUpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validatePipelineReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineReference) { // not required
		return nil
	}

	if m.PipelineReference != nil {
		if err := m.PipelineReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipelineReference")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateRunStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.RunStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.RunStatistics); i++ {
		if swag.IsZero(m.RunStatistics[i]) { // not required
			continue
		}

		if m.RunStatistics[i] != nil {
			if err := m.RunStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestRun) validateStartedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startedDate", "body", "date-time", m.StartedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestRun) validateTestEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.TestEnvironment) { // not required
		return nil
	}

	if m.TestEnvironment != nil {
		if err := m.TestEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testEnvironment")
			}
			return err
		}
	}

	return nil
}

func (m *TestRun) validateTestSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSettings) { // not required
		return nil
	}

	if m.TestSettings != nil {
		if err := m.TestSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRun) UnmarshalBinary(b []byte) error {
	var res TestRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
