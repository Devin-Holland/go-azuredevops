// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PickList Picklist.
// swagger:model PickList
type PickList struct {
	PickListMetadata

	// A list of PicklistItemModel.
	Items []string `json:"items"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PickList) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PickListMetadata
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PickListMetadata = aO0

	// now for regular properties
	var propsPickList struct {
		Items []string `json:"items"`
	}
	if err := swag.ReadJSON(raw, &propsPickList); err != nil {
		return err
	}
	m.Items = propsPickList.Items

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PickList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PickListMetadata)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsPickList struct {
		Items []string `json:"items"`
	}
	propsPickList.Items = m.Items

	jsonDataPropsPickList, errPickList := swag.WriteJSON(propsPickList)
	if errPickList != nil {
		return nil, errPickList
	}
	_parts = append(_parts, jsonDataPropsPickList)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pick list
func (m *PickList) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PickListMetadata
	if err := m.PickListMetadata.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PickList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PickList) UnmarshalBinary(b []byte) error {
	var res PickList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
