// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AggregatedResultsAnalysis aggregated results analysis
// swagger:model AggregatedResultsAnalysis
type AggregatedResultsAnalysis struct {

	// duration
	Duration string `json:"duration,omitempty"`

	// not reported results by outcome
	NotReportedResultsByOutcome map[string]AggregatedResultsByOutcome `json:"notReportedResultsByOutcome,omitempty"`

	// previous context
	PreviousContext *TestResultsContext `json:"previousContext,omitempty"`

	// results by outcome
	ResultsByOutcome map[string]AggregatedResultsByOutcome `json:"resultsByOutcome,omitempty"`

	// results difference
	ResultsDifference *AggregatedResultsDifference `json:"resultsDifference,omitempty"`

	// run summary by outcome
	RunSummaryByOutcome map[string]AggregatedRunsByOutcome `json:"runSummaryByOutcome,omitempty"`

	// run summary by state
	RunSummaryByState map[string]AggregatedRunsByState `json:"runSummaryByState,omitempty"`

	// total tests
	TotalTests int32 `json:"totalTests,omitempty"`
}

// Validate validates this aggregated results analysis
func (m *AggregatedResultsAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotReportedResultsByOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultsByOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultsDifference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSummaryByOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSummaryByState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregatedResultsAnalysis) validateNotReportedResultsByOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.NotReportedResultsByOutcome) { // not required
		return nil
	}

	for k := range m.NotReportedResultsByOutcome {

		if err := validate.Required("notReportedResultsByOutcome"+"."+k, "body", m.NotReportedResultsByOutcome[k]); err != nil {
			return err
		}
		if val, ok := m.NotReportedResultsByOutcome[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AggregatedResultsAnalysis) validatePreviousContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousContext) { // not required
		return nil
	}

	if m.PreviousContext != nil {
		if err := m.PreviousContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousContext")
			}
			return err
		}
	}

	return nil
}

func (m *AggregatedResultsAnalysis) validateResultsByOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultsByOutcome) { // not required
		return nil
	}

	for k := range m.ResultsByOutcome {

		if err := validate.Required("resultsByOutcome"+"."+k, "body", m.ResultsByOutcome[k]); err != nil {
			return err
		}
		if val, ok := m.ResultsByOutcome[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AggregatedResultsAnalysis) validateResultsDifference(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultsDifference) { // not required
		return nil
	}

	if m.ResultsDifference != nil {
		if err := m.ResultsDifference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resultsDifference")
			}
			return err
		}
	}

	return nil
}

func (m *AggregatedResultsAnalysis) validateRunSummaryByOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSummaryByOutcome) { // not required
		return nil
	}

	for k := range m.RunSummaryByOutcome {

		if err := validate.Required("runSummaryByOutcome"+"."+k, "body", m.RunSummaryByOutcome[k]); err != nil {
			return err
		}
		if val, ok := m.RunSummaryByOutcome[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AggregatedResultsAnalysis) validateRunSummaryByState(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSummaryByState) { // not required
		return nil
	}

	for k := range m.RunSummaryByState {

		if err := validate.Required("runSummaryByState"+"."+k, "body", m.RunSummaryByState[k]); err != nil {
			return err
		}
		if val, ok := m.RunSummaryByState[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AggregatedResultsAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregatedResultsAnalysis) UnmarshalBinary(b []byte) error {
	var res AggregatedResultsAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
