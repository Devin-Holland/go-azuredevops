// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PolicyType User-friendly policy type with description (used for querying policy types).
// swagger:model PolicyType
type PolicyType struct {
	PolicyTypeRef

	// The links to other objects related to this object.
	Links *ReferenceLinks `json:"_links,omitempty"`

	// Detailed description of the policy type.
	Description string `json:"description,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyType) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PolicyTypeRef
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PolicyTypeRef = aO0

	// now for regular properties
	var propsPolicyType struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsPolicyType); err != nil {
		return err
	}
	m.Links = propsPolicyType.Links

	m.Description = propsPolicyType.Description

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PolicyTypeRef)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsPolicyType struct {
		Links *ReferenceLinks `json:"_links,omitempty"`

		Description string `json:"description,omitempty"`
	}
	propsPolicyType.Links = m.Links

	propsPolicyType.Description = m.Description

	jsonDataPropsPolicyType, errPolicyType := swag.WriteJSON(propsPolicyType)
	if errPolicyType != nil {
		return nil, errPolicyType
	}
	_parts = append(_parts, jsonDataPropsPolicyType)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policy type
func (m *PolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PolicyTypeRef
	if err := m.PolicyTypeRef.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyType) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyType) UnmarshalBinary(b []byte) error {
	var res PolicyType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
