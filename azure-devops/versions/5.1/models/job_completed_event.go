// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// JobCompletedEvent job completed event
// swagger:model JobCompletedEvent
type JobCompletedEvent struct {
	JobEvent

	// request Id
	RequestID int64 `json:"requestId,omitempty"`

	// result
	// Enum: [succeeded succeededWithIssues failed canceled skipped abandoned]
	Result interface{} `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *JobCompletedEvent) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobEvent
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobEvent = aO0

	// now for regular properties
	var propsJobCompletedEvent struct {
		RequestID int64 `json:"requestId,omitempty"`

		Result interface{} `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsJobCompletedEvent); err != nil {
		return err
	}
	m.RequestID = propsJobCompletedEvent.RequestID

	m.Result = propsJobCompletedEvent.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m JobCompletedEvent) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.JobEvent)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsJobCompletedEvent struct {
		RequestID int64 `json:"requestId,omitempty"`

		Result interface{} `json:"result,omitempty"`
	}
	propsJobCompletedEvent.RequestID = m.RequestID

	propsJobCompletedEvent.Result = m.Result

	jsonDataPropsJobCompletedEvent, errJobCompletedEvent := swag.WriteJSON(propsJobCompletedEvent)
	if errJobCompletedEvent != nil {
		return nil, errJobCompletedEvent
	}
	_parts = append(_parts, jsonDataPropsJobCompletedEvent)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this job completed event
func (m *JobCompletedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobEvent
	if err := m.JobEvent.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *JobCompletedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobCompletedEvent) UnmarshalBinary(b []byte) error {
	var res JobCompletedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
