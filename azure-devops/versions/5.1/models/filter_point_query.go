// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FilterPointQuery filter point query
// swagger:model FilterPointQuery
type FilterPointQuery struct {

	// plan Id
	PlanID int32 `json:"planId,omitempty"`

	// point ids
	PointIds []int32 `json:"pointIds"`

	// point outcome
	PointOutcome []strfmt.Base64 `json:"pointOutcome"`

	// result state
	ResultState []strfmt.Base64 `json:"resultState"`
}

// Validate validates this filter point query
func (m *FilterPointQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePointOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilterPointQuery) validatePointOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.PointOutcome) { // not required
		return nil
	}

	for i := 0; i < len(m.PointOutcome); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *FilterPointQuery) validateResultState(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultState) { // not required
		return nil
	}

	for i := 0; i < len(m.ResultState); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilterPointQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilterPointQuery) UnmarshalBinary(b []byte) error {
	var res FilterPointQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
