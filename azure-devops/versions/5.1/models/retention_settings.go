// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RetentionSettings retention settings
// swagger:model RetentionSettings
type RetentionSettings struct {

	// Number of days to keep deleted releases.
	DaysToKeepDeletedReleases int32 `json:"daysToKeepDeletedReleases,omitempty"`

	// Specifies the default environment retention policy.
	DefaultEnvironmentRetentionPolicy *EnvironmentRetentionPolicy `json:"defaultEnvironmentRetentionPolicy,omitempty"`

	// Specifies the maximum environment retention policy.
	MaximumEnvironmentRetentionPolicy *EnvironmentRetentionPolicy `json:"maximumEnvironmentRetentionPolicy,omitempty"`
}

// Validate validates this retention settings
func (m *RetentionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultEnvironmentRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumEnvironmentRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetentionSettings) validateDefaultEnvironmentRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultEnvironmentRetentionPolicy) { // not required
		return nil
	}

	if m.DefaultEnvironmentRetentionPolicy != nil {
		if err := m.DefaultEnvironmentRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultEnvironmentRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RetentionSettings) validateMaximumEnvironmentRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.MaximumEnvironmentRetentionPolicy) { // not required
		return nil
	}

	if m.MaximumEnvironmentRetentionPolicy != nil {
		if err := m.MaximumEnvironmentRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maximumEnvironmentRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetentionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetentionSettings) UnmarshalBinary(b []byte) error {
	var res RetentionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
