// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseDefinitionSummary release definition summary
// swagger:model ReleaseDefinitionSummary
type ReleaseDefinitionSummary struct {

	// List of Release Definition environment summary.
	Environments []*ReleaseDefinitionEnvironmentSummary `json:"environments"`

	// Release Definition reference.
	ReleaseDefinition *ReleaseDefinitionShallowReference `json:"releaseDefinition,omitempty"`

	// List of releases deployed using this Release Defintion.
	Releases []*Release `json:"releases"`
}

// Validate validates this release definition summary
func (m *ReleaseDefinitionSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDefinitionSummary) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleaseDefinitionSummary) validateReleaseDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDefinition) { // not required
		return nil
	}

	if m.ReleaseDefinition != nil {
		if err := m.ReleaseDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseDefinitionSummary) validateReleases(formats strfmt.Registry) error {

	if swag.IsZero(m.Releases) { // not required
		return nil
	}

	for i := 0; i < len(m.Releases); i++ {
		if swag.IsZero(m.Releases[i]) { // not required
			continue
		}

		if m.Releases[i] != nil {
			if err := m.Releases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDefinitionSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDefinitionSummary) UnmarshalBinary(b []byte) error {
	var res ReleaseDefinitionSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
