// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event Encapsulates the properties of an event.
// swagger:model Event
type Event struct {

	// Gets or sets the UTC-based date and time that this event was created.
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// Gets or sets the detailed message associated with this event.
	DetailedMessage *FormattedEventMessage `json:"detailedMessage,omitempty"`

	// Gets or sets the type of this event.
	EventType string `json:"eventType,omitempty"`

	// Gets or sets the unique identifier of this event.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Gets or sets the (brief) message associated with this event.
	Message *FormattedEventMessage `json:"message,omitempty"`

	// Gets or sets the identifier of the publisher that raised this event.
	PublisherID string `json:"publisherId,omitempty"`

	// Gets or sets the data associated with this event.
	Resource interface{} `json:"resource,omitempty"`

	// Gets or sets the resource containers.
	ResourceContainers map[string]ResourceContainer `json:"resourceContainers,omitempty"`

	// Gets or sets the version of the data associated with this event.
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// Gets or sets the Session Token that can be used in further interactions
	SessionToken *SessionToken `json:"sessionToken,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateDetailedMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailedMessage) { // not required
		return nil
	}

	if m.DetailedMessage != nil {
		if err := m.DetailedMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedMessage")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateResourceContainers(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceContainers) { // not required
		return nil
	}

	for k := range m.ResourceContainers {

		if err := validate.Required("resourceContainers"+"."+k, "body", m.ResourceContainers[k]); err != nil {
			return err
		}
		if val, ok := m.ResourceContainers[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Event) validateSessionToken(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionToken) { // not required
		return nil
	}

	if m.SessionToken != nil {
		if err := m.SessionToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
