// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PredefinedQuery Represents a single pre-defined query.
// swagger:model PredefinedQuery
type PredefinedQuery struct {

	// Whether or not the query returned the complete set of data or if the data was truncated.
	HasMore bool `json:"hasMore,omitempty"`

	// Id of the query
	ID string `json:"id,omitempty"`

	// Localized name of the query
	Name string `json:"name,omitempty"`

	// The results of the query.  This will be a set of WorkItem objects with only the 'id' set.  The client is responsible for paging in the data as needed.
	Results []*WorkItem `json:"results"`

	// REST API Url to use to retrieve results for this query
	URL string `json:"url,omitempty"`

	// Url to use to display a page in the browser with the results of this query
	WebURL string `json:"webUrl,omitempty"`
}

// Validate validates this predefined query
func (m *PredefinedQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredefinedQuery) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredefinedQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredefinedQuery) UnmarshalBinary(b []byte) error {
	var res PredefinedQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
