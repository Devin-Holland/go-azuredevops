// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Control Represent a control in the form.
// swagger:model Control
type Control struct {

	// Contribution for the control.
	Contribution *WitContribution `json:"contribution,omitempty"`

	// Type of the control.
	ControlType string `json:"controlType,omitempty"`

	// Height of the control, for html controls.
	Height int32 `json:"height,omitempty"`

	// The id for the layout node.
	ID string `json:"id,omitempty"`

	// A value indicating whether this layout node has been inherited. from a parent layout.  This is expected to only be only set by the combiner.
	Inherited bool `json:"inherited,omitempty"`

	// A value indicating if the layout node is contribution or not.
	IsContribution bool `json:"isContribution,omitempty"`

	// Label for the field.
	Label string `json:"label,omitempty"`

	// Inner text of the control.
	Metadata string `json:"metadata,omitempty"`

	// Order in which the control should appear in its group.
	Order int32 `json:"order,omitempty"`

	// A value indicating whether this layout node has been overridden . by a child layout.
	Overridden bool `json:"overridden,omitempty"`

	// A value indicating if the control is readonly.
	ReadOnly bool `json:"readOnly,omitempty"`

	// A value indicating if the control should be hidden or not.
	Visible bool `json:"visible,omitempty"`

	// Watermark text for the textbox.
	Watermark string `json:"watermark,omitempty"`
}

// Validate validates this control
func (m *Control) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContribution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Control) validateContribution(formats strfmt.Registry) error {

	if swag.IsZero(m.Contribution) { // not required
		return nil
	}

	if m.Contribution != nil {
		if err := m.Contribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Control) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Control) UnmarshalBinary(b []byte) error {
	var res Control
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
